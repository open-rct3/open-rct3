//****************************************
//** Globals
//****************************************

global Bitmap ShinyEnvMap
global Bitmap ChromeEnvMap
global Bitmap WaterEnvMap
global float GameTime
global Bitmap HorizonShadowMap
global float4x4 Texture0
global float4x4 Texture1
global float4x4 Texture2
global float4x4 Texture3
global float4x4 Texture4
global float4x4 Texture5
global float4x4 Texture6
global float4x4 Texture7
global int AlphaRefSI = 0xd0
global int AlphaRefSILow = 0x64
global int AlphaRefBillboard = 0x80
global float4x4 CausticsTransform
global Bitmap CausticsBitmap
global Colour CausticsColour
global Bitmap SimpleWaterBitmap
global Cubemap EnvCubemap
global float4x4 EnvCubemapTransform
global float4 EnvCubemapColour
global Bitmap Lightmap
global float4x4 LightmapTransform

//****************************************
//** TextureStage
//****************************************

TextureStage AddToDest( Bitmap _tx, TCI _uvsrc )
{
// If this TextureStage is set for 1st stage then 'current' is the diffuse
// colour. Otherwise it is the output from the previous stage.
	Colour=Modulate(Texture,Current)
	Alpha=Modulate(Texture,Current)
	TextureCoordIndex=_uvsrc
	Address=Tile
	MagFilter=Linear
	MinFilter=Linear
	MipFilter=Linear
	TextureTransformType=Off
	Bitmap=_tx
}


TextureStage AlphaMaskBitmap( Bitmap _tx )
{
// If this TextureStage is set for 1st stage then 'current' is the diffuse
// colour. Otherwise it is the output from the previous stage.
	Colour=Modulate(Texture,Current)
	Alpha=Modulate(Texture,Current)
	TextureCoordIndex=0
	Address=Tile
	MagFilter=Linear
	MinFilter=Linear
	MipFilter=Point
	TextureTransformType=Off
	Bitmap=_tx
	MipMapLODBias=0.0
}


TextureStage AlphaMaskFadeBitmap( Bitmap _tx )
{
// If this TextureStage is set for 1st stage then 'current' is the diffuse
// colour. Otherwise it is the output from the previous stage.
	Colour=Modulate(Texture,Current)
	Alpha=Modulate(Texture,Current)
	TextureCoordIndex=1
	Address=Clamp
	MagFilter=Linear
	MinFilter=Linear
	MipFilter=Point
	TextureTransformType=Off
	Bitmap=_tx
	MipMapLODBias=0.0
}


TextureStage Background( Bitmap _tx, TCI _uvsrc )
{
	Colour=Modulate(Texture,Current)
	Alpha=Select(Texture)
	TextureCoordIndex=_uvsrc
	Address=Clamp
	MagFilter=Linear
	MinFilter=Linear
	MipFilter=Linear
	TextureTransformType=Off
	Bitmap=_tx
	MipMapLODBias=0.0
}


TextureStage BillboardBlueprint( Bitmap _tx, TCI _uvsrc )
{
// If this TextureStage is set for 1st stage then 'current' is the diffuse
// colour. Otherwise it is the output from the previous stage.
	Colour=Select(Current)
	Alpha=Modulate(Texture,Current)
	TextureCoordIndex=_uvsrc
	Address=Tile
	MagFilter=Linear
	MinFilter=Linear
	MipFilter=Point
	TextureTransformType=Off
	Bitmap=_tx
	MipMapLODBias=0.0
}


TextureStage BillboardLightmap( Bitmap _tx )
{
	Colour=Add(Texture,Current)
	Alpha=Select(Current)
	TextureCoordIndex=CameraSpacePosition
	Address=Clamp
	MagFilter=Linear
	MinFilter=Linear
	MipFilter=None
	TextureTransform=Texture0
	TextureTransformType=Enabled
	Bitmap=_tx
	MipMapLODBias=0.0
}


TextureStage ClothShinyAlpha( Bitmap _tx)
{
	Colour=Add(Texture,Current)
	Alpha=Select(Current)
	TextureCoordIndex=CameraSpaceReflectionVector
	Address=Tile
	MagFilter=Linear
	MinFilter=Linear
	MipFilter=None
	TextureTransform=Texture7
	TextureTransformType=On
	Bitmap=_tx
	MipMapLODBias=0.0
}


TextureStage CloudsUVScroll( Bitmap _tx, TCI _uvsrc )
{
	Colour=Modulate(Texture,Current)
	Alpha=Modulate(Texture,Current)
	TextureCoordIndex=_uvsrc
	Address=Tile
	MagFilter=Linear
	MinFilter=Linear
	MipFilter=None
	TextureTransform=Texture5
	TextureTransformType=On
	Bitmap=_tx
	MipMapLODBias=0.0
}


TextureStage CloudsUVScroll2( Bitmap _alpha, TCI _uvsrc )
{
	Colour=Modulate(Texture,Current)
	Alpha=Modulate(Texture,Current)
	TextureCoordIndex=_uvsrc
	Address=Tile
	MagFilter=Linear
	MinFilter=Linear
	MipFilter=None
	TextureTransform=Texture4
	TextureTransformType=On
	Bitmap=_alpha
	MipMapLODBias=0.0
}


TextureStage GuiIconShader( Bitmap _tx, TCI _uvsrc )
{
// If this TextureStage is set for 1st stage then 'current' is the diffuse
// colour. Otherwise it is the output from the previous stage.
	Colour=Modulate(Texture,Current)
	Alpha=Modulate(Texture,Current)
	TextureCoordIndex=_uvsrc
	Address=Clamp
	MagFilter=Linear
	MinFilter=Linear
	MipFilter=None
	TextureTransformType=Off
	Bitmap=_tx
	MipMapLODBias=0.0
}


TextureStage GUIRendererBitmap( Bitmap _bmp )
{
	Colour=Modulate(Texture,Current)
	Alpha=Modulate(Texture,Current)
	TextureCoordIndex=0
	Address=Tile
	MagFilter=Linear
	MinFilter=Linear
	MipFilter=None
	TextureTransformType=Off
	Bitmap=_bmp
	MipMapLODBias=0.0
}


TextureStage GUIRendererZMask( Bitmap _bmp )
{
	Colour=Modulate(Texture,Current)
	Alpha=Modulate(Texture,Current)
	TextureCoordIndex=0
	Address=Tile
	MagFilter=Linear
	MinFilter=Linear
	MipFilter=None
	TextureTransformType=Off
	Bitmap=_bmp
	MipMapLODBias=0.0
}


TextureStage GUISkin( Bitmap _tx, TCI _uvsrc )
{
// If this TextureStage is set for 1st stage then 'current' is the diffuse
// colour. Otherwise it is the output from the previous stage.
	Colour=Modulate(Texture,Current)
	Alpha=Modulate(Texture,Current)
	TextureCoordIndex=_uvsrc
	Address=Clamp
	MagFilter=Point
	MinFilter=Point
	MipFilter=None
	TextureTransformType=Off
	Bitmap=_tx
	MipMapLODBias=0.0
}


TextureStage HorizonShadowUVAlpha( Bitmap _tx, TCI _uvsrc )
{
// If this TextureStage is set for 1st stage then 'current' is the diffuse
// colour. Otherwise it is the output from the previous stage.
	Colour=Modulate(Texture,Current)
	Alpha=Modulate(Texture,Current)
	TextureCoordIndex=_uvsrc
	Address=Clamp
	//MagFilter=Point
	//MinFilter=Point
	MagFilter=Linear
	MinFilter=Linear
	MipFilter=None
	TextureTransform=Texture0
	TextureTransformType=On
	Bitmap=_tx
	MipMapLODBias=0.0
}


TextureStage LapWater( Bitmap _tx )
{
	Colour=Modulate(Texture,Current)
	Alpha=Modulate(Texture,Current)
	TextureCoordIndex=0
	AddressU=Tile
	AddressV=Clamp
	MagFilter=Linear
	MinFilter=Linear
	MipFilter=Linear
	TextureTransform=Texture0
	TextureTransformType=On
	Bitmap=_tx
	MipMapLODBias=0.0
}


TextureStage ModulateAlpha( Bitmap _tx, TCI _uvsrc )
{
// If this TextureStage is set for 1st stage then 'current' is the diffuse
// colour. Otherwise it is the output from the previous stage.
	Colour=Modulate(Texture,Current)
	Alpha=Modulate(Texture,Current)
	TextureCoordIndex=_uvsrc
	Address=Clamp
	MagFilter=Linear
	MinFilter=Linear
	MipFilter=None
	TextureTransformType=Off
	Bitmap=_tx
	MipMapLODBias=0.0
}


TextureStage ModulateAlphaAddColourTile( Bitmap _tx, TCI _uvsrc )
{
// If this TextureStage is set for 1st stage then 'current' is the diffuse
// colour. Otherwise it is the output from the previous stage.
	Colour=ModulateAlphaAddColour(Current,Texture)
	Alpha=Select(Diffuse)
	TextureCoordIndex=_uvsrc
	Address=Tile
	MagFilter=Linear
	MinFilter=Linear
	MipFilter=Linear
	TextureTransformType=Off
	Bitmap=_tx
	MipMapLODBias=0.0
}


TextureStage ModulateAlphaClamp( Bitmap _tx, TCI _uvsrc )
{
// If this TextureStage is set for 1st stage then 'current' is the diffuse
// colour. Otherwise it is the output from the previous stage.
	Colour=Modulate(Texture,Current)
	Alpha=Modulate(Texture,Current)
	TextureCoordIndex=_uvsrc
	Address=Clamp
	MagFilter=Linear
	MinFilter=Linear
	MipFilter=Linear
	TextureTransformType=Off
	Bitmap=_tx
	MipMapLODBias=0.0
}

TextureStage ModulateAlphaClampNoMip( Bitmap _tx, TCI _uvsrc )
{
// If this TextureStage is set for 1st stage then 'current' is the diffuse
// colour. Otherwise it is the output from the previous stage.
	Colour=Modulate(Texture,Current)
	Alpha=Modulate(Texture,Current)
	TextureCoordIndex=_uvsrc
	Address=Clamp
	MagFilter=Linear
	MinFilter=Linear
	MipFilter=None
	TextureTransformType=Off
	Bitmap=_tx
	MipMapLODBias=0.0
}


TextureStage ModulateAlphaTile( Bitmap _tx, TCI _uvsrc )
{
// If this TextureStage is set for 1st stage then 'current' is the diffuse
// colour. Otherwise it is the output from the previous stage.
	Colour=Modulate(Texture,Current)
	Alpha=Modulate(Texture,Current)
	TextureCoordIndex=_uvsrc
	Address=Tile
	MagFilter=Linear
	MinFilter=Linear
	MipFilter=Linear
	TextureTransformType=Off
	Bitmap=_tx
	MipMapLODBias=0.0
}


TextureStage ModulateAlphaTileBias( Bitmap _tx, TCI _uvsrc )
{
// If this TextureStage is set for 1st stage then 'current' is the diffuse
// colour. Otherwise it is the output from the previous stage.
	Colour=Modulate(Texture,Current)
	Alpha=Modulate(Texture,Current)
	TextureCoordIndex=_uvsrc
	Address=Tile
	MagFilter=Linear
	MinFilter=Linear
	MipFilter=None
	TextureTransformType=Off
	Bitmap=_tx
	MipMapLODBias=0.0
}


TextureStage ModulateCurrentAlphaTile( Bitmap _tx, TCI _uvsrc )
{
// If this TextureStage is set for 1st stage then 'current' is the diffuse
// colour. Otherwise it is the output from the previous stage.
	Colour=Modulate(Texture,Current)
	Alpha=Select(Current)
	TextureCoordIndex=_uvsrc
	Address=Tile
	MagFilter=Linear
	MinFilter=Linear
	MipFilter=Linear
	TextureTransformType=Off
	Bitmap=_tx
	MipMapLODBias=0.0
}


TextureStage ModulateTile( Bitmap _tx, TCI _uvsrc )
{
// If this TextureStage is set for 1st stage then 'current' is the diffuse
// colour. Otherwise it is the output from the previous stage.
	Colour=Modulate(Texture,Current)
	Alpha=Select(Texture)
	TextureCoordIndex=_uvsrc
	Address=Tile
	MagFilter=Linear
	MinFilter=Linear
	MipFilter=Linear
	TextureTransformType=Off
	Bitmap=_tx
	MipMapLODBias=0.0
}


TextureStage ModulateTileBias( Bitmap _tx, TCI _uvsrc )
{
// If this TextureStage is set for 1st stage then 'current' is the diffuse
// colour. Otherwise it is the output from the previous stage.
	Colour=Modulate(Texture,Current)
	Alpha=Select(Texture)
	TextureCoordIndex=_uvsrc
	Address=Tile
	MagFilter=Linear
	MinFilter=Linear
	MipFilter=None
	TextureTransformType=Off
	Bitmap=_tx
	MipMapLODBias=0.0
}


TextureStage ModulateTileNoMip( Bitmap _tx, TCI _uvsrc )
{
// If this TextureStage is set for 1st stage then 'current' is the diffuse
// colour. Otherwise it is the output from the previous stage.
	Colour=Modulate(Texture,Current)
	Alpha=Select(Texture)
	TextureCoordIndex=_uvsrc
	Address=Tile
	MagFilter=Linear
	MinFilter=Linear
	MipFilter=None
	TextureTransformType=Off
	Bitmap=_tx
	MipMapLODBias=0.0
}


TextureStage Modulatex2Tile( Bitmap _tx, TCI _uvsrc )
{
	Colour=Modulate2x(Texture,Current)
	Alpha=Select(Texture)
	TextureCoordIndex=_uvsrc
	Address=Tile
	MagFilter=Linear
	MinFilter=Linear
	MipFilter=Linear
	TextureTransformType=Off
	Bitmap=_tx
	MipMapLODBias=0.0
}


TextureStage MoviePlayback(
	Bitmap _bitmap
)
{
	Colour=Modulate(Texture,Current)
	Alpha=Modulate(Texture,Current)
	Address=Clamp
	MagFilter=Linear
	MinFilter=Linear
	MipFilter=None
	MipMapLODBias=0.0
	TextureCoordIndex=0
	TextureTransformType=Off
	Bitmap=_bitmap
}

TextureStage NormalEdge( Bitmap _tx )
{
	// If this TextureStage is set for 1st stage then 'current' is the diffuse
	// colour. Otherwise it is the output from the previous stage.
	Colour=Select(Current)
	Alpha=Select(Texture)
	TextureCoordIndex=CameraSpaceNormal
	Address=Mirror
	MagFilter=Linear
	MinFilter=Linear
	MipFilter=None
	TextureTransformType=Enabled
	TextureTransform=Texture2
	Bitmap=_tx
	MipMapLODBias=0.0
}


TextureStage PathGround( Bitmap _tx )
{
	Colour=Modulate(Texture,Current)
	Alpha=Modulate(Texture,Current)
	TextureCoordIndex=0
	Address=Tile
	TextureTransformType=Off
	MagFilter=Linear
	MinFilter=Linear
	MipFilter=Linear
	Bitmap=_tx
	MipMapLODBias=0.0
}


TextureStage PathGroundAlpha( Bitmap _tx )
{
	Colour=Select(Current)
	Alpha=Modulate(Texture,Current)
	TextureCoordIndex=0
	Address=Tile
	TextureTransformType=Off
	MagFilter=Linear
	MinFilter=Linear
	MipFilter=Linear
	Bitmap=_tx
	MipMapLODBias=0.0
}


TextureStage PathGroundLightmap( Bitmap _tx )
{
	Colour=Add(Texture,Current)
	Alpha=Add(Texture,Current)
	TextureCoordIndex=CameraSpacePosition
	Address=Clamp
	MagFilter=Linear
	MinFilter=Linear
	MipFilter=None
	TextureTransform=Texture0
	TextureTransformType=Enabled
	Bitmap=_tx
	MipMapLODBias=0.0
}


TextureStage PeopleEnvMap( 
	Bitmap _tx
)
{
	Colour=Add(Texture,Current)
	Alpha=Modulate(Texture,Current)
	TextureCoordIndex=CameraSpaceReflectionVector
	Address=Tile
	MagFilter=Linear
	MinFilter=Linear
	MipFilter=None
	TextureTransform=Texture7
	TextureTransformType=On
	Bitmap=_tx
	MipMapLODBias=0.0
}

TextureStage ShadowAlphaMaskSolidColour( Bitmap _tx, TCI _uvsrc )
{
// If this TextureStage is set for 1st stage then 'current' is the diffuse
// colour. Otherwise it is the output from the previous stage.
	Colour=Select(Current)
	Alpha=Modulate(Texture,Current)
	TextureCoordIndex=_uvsrc
	Address=Tile
	MagFilter=Linear
	MinFilter=Linear
	//MipFilter=Point
	MipFilter=None
	TextureTransformType=Off
	Bitmap=_tx
	MipMapLODBias=0.0
}


TextureStage ShadowAlphaMaskSolidColourBillboard( Bitmap _tx, TCI _uvsrc )
{
// If this TextureStage is set for 1st stage then 'current' is the diffuse
// colour. Otherwise it is the output from the previous stage.
	Colour=Select(Current)
	Alpha=Modulate(Texture,Current)
	TextureCoordIndex=_uvsrc
	Address=Tile
	MagFilter=Linear
	MinFilter=Linear
	//MipFilter=Point
	MipFilter=None
	TextureTransformType=Off
	Bitmap=_tx
	MipMapLODBias=0.0
}


TextureStage ShapeGlass( Bitmap _tx)
{
	// If this TextureStage is set for 1st stage then 'current' is the diffuse
	// colour. Otherwise it is the output from the previous stage.
	Colour=Add(Texture,Current)
	Alpha=Modulate(Texture,Current)
	TextureCoordIndex=CameraSpaceReflectionVector
	Address=Tile
	MagFilter=Linear
	MinFilter=Linear
	MipFilter=None
	TextureTransform=Texture7
	TextureTransformType=On
	Bitmap=_tx
	MipMapLODBias=0.0
}


TextureStage ShapeNormalEdgeModulateAlpha( Bitmap _tx )
{
// If this TextureStage is set for 1st stage then 'current' is the diffuse
// colour. Otherwise it is the output from the previous stage.
	Colour=Select(Current)
	Alpha=Modulate(Texture,Current)
	TextureCoordIndex=0
	Address=Tile
	MagFilter=Linear
	MinFilter=Linear
	MipFilter=Point
	TextureTransformType=Off
	Bitmap=_tx
	MipMapLODBias=0.0
}


TextureStage SIChrome( Bitmap _tx )
{
	// If this TextureStage is set for 1st stage then 'current' is the diffuse
	// colour. Otherwise it is the output from the previous stage.
	Colour=Modulate(Texture,Current)
	Alpha=Select(Texture)
	TextureCoordIndex=CameraSpaceReflectionVector
	Address=Tile
	MagFilter=Linear
	MinFilter=Linear
	MipFilter=None
	TextureTransform=Texture7
	TextureTransformType=On
	Bitmap=_tx
	MipMapLODBias=0.0
}


TextureStage SIChromeModulateCurrentAlpha( Bitmap _tx )
{
	// If this TextureStage is set for 1st stage then 'current' is the diffuse
	// colour. Otherwise it is the output from the previous stage.
	Colour=Modulate(Texture,Current)
	Alpha=Select(Current)
	TextureCoordIndex=CameraSpaceReflectionVector
	Address=Tile
	MagFilter=Linear
	MinFilter=Linear
	MipFilter=None
	TextureTransform=Texture7
	TextureTransformType=On
	Bitmap=_tx
	MipMapLODBias=0.0
}


TextureStage SIChromePassAlpha( Bitmap _tx )
{
	// If this TextureStage is set for 1st stage then 'current' is the diffuse
	// colour. Otherwise it is the output from the previous stage.
	Colour=Select(Texture)
	Alpha=Select(Current)
	TextureCoordIndex=CameraSpaceReflectionVector
	Address=Tile
	MagFilter=Linear
	MinFilter=Linear
	MipFilter=None
	TextureTransform=Texture7
	TextureTransformType=On
	Bitmap=_tx
	MipMapLODBias=0.0
}


TextureStage SIGlossReflection( Bitmap _tx )
{
	// If this TextureStage is set for 1st stage then 'current' is the diffuse
	// colour. Otherwise it is the output from the previous stage.
	Colour=ModulateAlphaAddColour(Current,Texture)
	Alpha=Select(Current)
	TextureCoordIndex=CameraSpaceReflectionVector
	Address=Tile
	MagFilter=Linear
	MinFilter=Linear
	MipFilter=None
	TextureTransform=Texture7
	TextureTransformType=Enabled
	Bitmap=_tx
	MipMapLODBias=0.0
}


TextureStage SIGlossSpecular()
{
	// If this TextureStage is set for 1st stage then 'current' is the diffuse
	// colour. Otherwise it is the output from the previous stage.
	Colour=ModulateAlphaAddColour(Current,Specular)
	Alpha=Select(Diffuse)
}


TextureStage SimpleWaterEnvmap( Bitmap _tx )
{
	// If this TextureStage is set for 1st stage then 'current' is the diffuse
	// colour. Otherwise it is the output from the previous stage.
	Colour=Add(Texture,Current)
	Alpha=Select(Current)
	TextureCoordIndex=CameraSpaceReflectionVector
	Address=Clamp
	MagFilter=Linear
	MinFilter=Linear
	MipFilter=None
	TextureTransformType=Enabled
	TextureTransform=Texture7
	Bitmap=_tx
	MipMapLODBias=0.0
}


TextureStage SimpleWaterSpecMap( Bitmap _tx )
{
	// If this TextureStage is set for 1st stage then 'current' is the diffuse
	// colour. Otherwise it is the output from the previous stage.
	Colour=Modulate2x(Texture,Specular)
	Alpha=Select(Current)
	TextureCoordIndex=0
	Address=Tile
	MagFilter=Linear
	MinFilter=Linear
	MipFilter=None
	TextureTransformType=On
	TextureTransform=Texture0
	Bitmap=_tx
	MipMapLODBias=0.0
}


TextureStage SIReflection( Bitmap _tx )
{
	// If this TextureStage is set for 1st stage then 'current' is the diffuse
	// colour. Otherwise it is the output from the previous stage.
	Colour=Add(Texture,Current)
	Alpha=Select(Current)
	TextureCoordIndex=CameraSpaceReflectionVector
	Address=Clamp
	MagFilter=Linear
	MinFilter=Linear
	MipFilter=None
	TextureTransformType=Enabled
	TextureTransform=Texture7
	Bitmap=_tx
	MipMapLODBias=0.0
}


TextureStage SkyUVScroll( Bitmap _tx, TCI _uvsrc )
{
// If this TextureStage is set for 1st stage then 'current' is the diffuse
// colour. Otherwise it is the output from the previous stage.
	Colour=Modulate(Texture,Current)
	Alpha=Select(Texture)
	TextureCoordIndex=_uvsrc
	Address=Tile
	MagFilter=Linear
	MinFilter=Linear
	MipFilter=Linear
	TextureTransform=Texture6
	TextureTransformType=On
	Bitmap=_tx
	MipMapLODBias=0.0
}


TextureStage SolidColourFont( Bitmap _tx, TCI _uvsrc )
{
	Colour=Modulate(Texture,Current)
	Alpha=Modulate(Texture,Current)
	TextureCoordIndex=_uvsrc
	Address=Clamp
	MagFilter=Linear
	MinFilter=Linear
	MipFilter=Linear
	MipMapLODBias=0
	TextureTransformType=Off
	Bitmap=_tx
}


TextureStage StarStyle( Bitmap _tx, TCI _uvsrc )
{
// If this TextureStage is set for 1st stage then 'current' is the diffuse
// colour. Otherwise it is the output from the previous stage.
	Colour=Modulate(Texture,Current)
	Alpha=Select(Texture)
	TextureCoordIndex=_uvsrc
	Address=Tile
	MagFilter=Linear
	MinFilter=Linear
	MipFilter=Linear
	TextureTransform=Texture0
	TextureTransformType=Enabled
	Bitmap=_tx
	MipMapLODBias=0.0
}


TextureStage SystemFont( Bitmap _tx )
{
	Colour = Modulate(Texture, Current)
	Alpha = Modulate(Texture, Current)
	TextureCoordIndex=0
	Address=Tile
	MagFilter=Point
	MinFilter=Point
	MipFilter=None
	MipMapLODBias=0
	TextureTransformType=Off
	Bitmap=_tx
	MipMapLODBias=0.0
}


TextureStage TerrainCircle( Bitmap _tx )
{
	Colour=Select(Texture)
	Alpha=Select(Texture)
	TextureCoordIndex=0
	Address=Clamp
	MagFilter=Linear
	MinFilter=Linear
	MipFilter=Linear
	MipMapLODBias=-1
	MaxMipLevel=0
	TextureTransformType=None
	Bitmap=_tx
}


TextureStage TerrainCliff( Bitmap _tx )
{
	Colour=Modulate(Texture,Current)
	Alpha=Select(Texture)
	TextureCoordIndex=0
	Address=Tile
	MagFilter=Linear
	MinFilter=Linear
	MipFilter=Linear
	TextureTransformType=Off
	Bitmap=_tx
	MipMapLODBias=0.0
}


TextureStage TerrainContour( Bitmap _tx )
{
	Colour=Modulate(Texture,Current)
	Alpha=Modulate(Texture,Current)
	TextureCoordIndex=CameraSpaceNormal
	Address=Clamp
	MagFilter=Linear
	MinFilter=Linear
	MipFilter=None
	TextureTransform=Texture1
	TextureTransformType=On
	Bitmap=_tx
	MipMapLODBias=0.0
}


TextureStage TerrainDebug()
{
	Colour=Select(Current)
	Alpha=Select(Current)
}


TextureStage TerrainDetail( Bitmap _tx )
{
	Colour=Modulate4X(Texture,Current)
	Alpha=Select(Current)
	TextureCoordIndex=CameraSpacePosition
	Address=Tile
	MagFilter=Linear
	MinFilter=Linear
	MipFilter=Linear
	TextureTransform=Texture0
	TextureTransformType=On
	Bitmap=_tx
	MipMapLODBias=0.0
}


TextureStage TerrainGrid( Bitmap _tx )
{
	Colour=Select(Texture)
	Alpha=Select(Texture)
	TextureCoordIndex=CameraSpacePosition
	Address=Tile
	MagFilter=Linear
	MinFilter=Linear
	MipFilter=Linear
	TextureTransform=Texture0
	TextureTransformType=On
	Bitmap=_tx
	MipMapLODBias=0.0
}


TextureStage TerrainGrid2Stage0( Bitmap _tx )
{
	Colour=Select(Texture)
	Alpha=Select(Texture)
	TextureCoordIndex=CameraSpacePosition
	Address=Tile
	MagFilter=Linear
	MinFilter=Linear
	MipFilter=Linear
	TextureTransform=Texture0
	TextureTransformType=On
	Bitmap=_tx
	MipMapLODBias=0.0
}


TextureStage TerrainGrid2Stage1( Bitmap _tx )
{
	Colour=Modulate(Texture,Current)
	Alpha=Modulate(Texture,Current)
	TextureCoordIndex=CameraSpacePosition
	Address=Tile
	MagFilter=Point
	MinFilter=Point
	MipFilter=None
	TextureTransform=Texture1
	TextureTransformType=On
	Bitmap=_tx
	MipMapLODBias=0.0
}


TextureStage TerrainHighlight( Bitmap _tx )
{
	Colour=Select(Texture)
	Alpha=Select(Texture)
	TextureCoordIndex=0
	Address=Clamp
	MagFilter=Linear
	MinFilter=Linear
	MipFilter=None
	MipMapLODBias=0
	MaxMipLevel=0
	TextureTransformType=None
	Bitmap=_tx
}


TextureStage TerrainHole( 
	Bitmap _tx 
)
{
	Colour=Modulate( Texture, Current )
	Alpha=Modulate( Texture, Current )
	TextureCoordIndex=0
	Address=Tile
	MagFilter=Point
	MinFilter=Point
	MipFilter=None
	TextureTransformType=Off
	Bitmap=_tx
	MipMapLODBias=0.0
}

TextureStage TerrainHoleStencil( 
)
{
	Colour=Select( Current )
	Alpha=Select( Current )
	TextureCoordIndex=0
	Address=Clamp
	MagFilter=Point
	MinFilter=Point
	MipFilter=None
	TextureTransformType=Off
	MipMapLODBias=0.0
}

TextureStage TerrainLightmap( Bitmap _tx )
{
	Colour=Add(Texture,Current)
	Alpha=Add(Texture,Current)
	TextureCoordIndex=CameraSpacePosition
	Address=Clamp
	MagFilter=Linear
	MinFilter=Linear
	MipFilter=None
	TextureTransform=Texture0
	TextureTransformType=Enabled
	Bitmap=_tx
	MipMapLODBias=0.0
}


TextureStage TerrainPosition( 
	Bitmap _tx 
)
{
	Colour=Select( Texture )
	Alpha=Select( Texture )
	TextureCoordIndex=CameraSpacePosition
	Address=Clamp
	MagFilter=Point
	MinFilter=Point
	MipFilter=None
	TextureTransform=Texture0
	TextureTransformType=On
	Bitmap=_tx
	MipMapLODBias=0.0
}

TextureStage TerrainShadow( Bitmap _tx )
{
	//Colour=Modulate(Texture,Current)
	//Alpha=Modulate(Texture,Current)
	//Colour=Select(Texture)
	//Alpha=Select(Texture)
	Colour=DotProduct3(Texture,TFactor)
	Alpha=Select(Current)

	TextureCoordIndex=CameraSpacePosition
	Address=Tile
	MagFilter=Linear
	MinFilter=Linear
	MipFilter=None
	TextureTransform=Texture1
	TextureTransformType=On
	Bitmap=_tx
	MipMapLODBias=0.0
}


TextureStage TerrainVCBlending( Bitmap _tx )
{
	Colour=Select(Texture)
	Alpha=Select(Current)
	TextureCoordIndex=CameraSpacePosition
	Address=Tile
	MagFilter=Linear
	MinFilter=Linear
	MipFilter=Linear
	TextureTransform=Texture0
	TextureTransformType=On
	Bitmap=_tx
	MipMapLODBias=0.0
}

TextureStage WaterCaustics( Bitmap _tx )
{
	Colour=Modulate(Texture,Current)
	Alpha=Modulate(Texture,Current)
	TextureCoordIndex=CameraSpacePosition
	Address=Tile
	MagFilter=Linear
	MinFilter=Linear
	MipFilter=Point
	TextureTransform=Texture0
	TextureTransformType=Enabled
	Bitmap=_tx
	MipMapLODBias=0.0
}


TextureStage Waterfall( Bitmap _tx, TCI _uvsrc, float4x4 _transform )
{
// If this TextureStage is set for 1st stage then 'current' is the diffuse
// colour. Otherwise it is the output from the previous stage.
	Colour=Modulate(Texture,Current)
	Alpha=Modulate(Texture,Current)
	TextureCoordIndex=_uvsrc
	Address=Tile
	MagFilter=Linear
	MinFilter=Linear
	MipFilter=Linear
	TextureTransform=_transform
	TextureTransformType=On
	Bitmap=_tx
	MipMapLODBias=0.0
}


TextureStage WaterfallB( Bitmap _tx, TCI _uvsrc, float4x4 _transform )
{
// If this TextureStage is set for 1st stage then 'current' is the diffuse
// colour. Otherwise it is the output from the previous stage.
	Colour=Add(Texture,Current)
	Alpha=Modulate(Texture,Current)
	TextureCoordIndex=_uvsrc
	Address=Tile
	MagFilter=Linear
	MinFilter=Linear
	MipFilter=Linear
	TextureTransform=_transform
	TextureTransformType=On
	Bitmap=_tx
	MipMapLODBias=0.0
}


TextureStage WaterfallFloor( Bitmap _tx, TCI _uvsrc, float4x4 _transform )
{
// If this TextureStage is set for 1st stage then 'current' is the diffuse
// colour. Otherwise it is the output from the previous stage.
	Colour=Modulate(Texture,Current)
	Alpha=Modulate(Texture,Current)
	TextureCoordIndex=_uvsrc
	Address=Tile
	MagFilter=Linear
	MinFilter=Linear
	MipFilter=Linear
	TextureTransform=_transform
	TextureTransformType=On
	Bitmap=_tx
	MipMapLODBias=0.0
}


TextureStage WaterfallFloorB( Bitmap _tx, TCI _uvsrc, float4x4 _transform )
{
// If this TextureStage is set for 1st stage then 'current' is the diffuse
// colour. Otherwise it is the output from the previous stage.
	Colour=Modulate(Texture,Current)
	Alpha=Modulate(Texture,Current)
	TextureCoordIndex=_uvsrc
	Address=Tile
	MagFilter=Linear
	MinFilter=Linear
	MipFilter=Linear
	TextureTransform=_transform
	TextureTransformType=On
	Bitmap=_tx
	MipMapLODBias=0.0
}


TextureStage WaterfallFloorFroth( Bitmap _tx, TCI _uvsrc, float4x4 _transform )
{
// If this TextureStage is set for 1st stage then 'current' is the diffuse
// colour. Otherwise it is the output from the previous stage.
	Colour=Modulate(Texture,Current)
	Alpha=Modulate(Texture,Current)
	TextureCoordIndex=_uvsrc
	Address=Tile
	MagFilter=Linear
	MinFilter=Linear
	MipFilter=Linear
	TextureTransform=_transform
	TextureTransformType=On
	Bitmap=_tx
	MipMapLODBias=0.0
}


TextureStage WaterfallFloorFrothB( Bitmap _tx, TCI _uvsrc, float4x4 _transform )
{
// If this TextureStage is set for 1st stage then 'current' is the diffuse
// colour. Otherwise it is the output from the previous stage.
	Colour=Add(Texture,Current)
	Alpha=Modulate(Texture,Current)
	TextureCoordIndex=_uvsrc
	Address=Tile
	MagFilter=Linear
	MinFilter=Linear
	MipFilter=Linear
	TextureTransform=_transform
	TextureTransformType=On
	Bitmap=_tx
	MipMapLODBias=0.0
}


TextureStage WaterReflectionAnimatedBumpMap( Bitmap _bmp )
{
	TextureCoordIndex=0
	TextureTransformType=Off
	Address=Tile
	MagFilter=Linear
	MinFilter=Linear
	MipFilter=None
	Bitmap=_bmp
}


TextureStage WaterTest( Bitmap _bmp )
{
	Colour=Select(Texture)
	Alpha=Select(Texture)
	TextureCoordIndex=CameraSpacePosition
	TextureTransform=Texture0
	TextureTransformType=Projected
	Address=Clamp
	MagFilter=Linear
	MinFilter=Linear
	MipFilter=None
	Bitmap=_bmp
}


TextureStage WaypointHighlight( Bitmap _tx, TCI _uvsrc )
{
	Colour=Modulate(Texture,Current)
	Alpha=Modulate(Texture,Current)
	TextureCoordIndex=_uvsrc
	Address=Tile
	MagFilter=Linear
	MinFilter=Linear
	MipFilter=Linear
	TextureTransformType=Off
	Bitmap=_tx
	MipMapLODBias=0.0
}


//****************************************
//** Sampler
//****************************************

Sampler LinearClamp(
	Bitmap	_bitmap
)
{
	Address		= Clamp
	MinFilter	= Linear
	MagFilter	= Linear
	MipFilter	= Linear
	Bitmap		= _bitmap
}

Sampler LinearClampCubemap(
	Cubemap	_cubemap
)
{
	Address		= Clamp
	MinFilter	= Linear
	MagFilter	= Linear
	MipFilter	= Linear
	Cubemap		= _cubemap
}

Sampler LinearTile(
	Bitmap	_bitmap
)
{
	Address		= Tile
	MinFilter	= Linear
	MagFilter	= Linear
	MipFilter	= Linear
	Bitmap		= _bitmap
}

//****************************************
//** PixelShader
//****************************************

//****************************************
//** VertexShader
//****************************************

//****************************************
//** Pass
//****************************************

//****************************************
//** Shader
//****************************************

Shader AdTexture( Bitmap _tx, CullMode _cull )
{
	Pass
	{
		SrcBlend=One
		DestBlend=Zero
		AlphaBlendEnable=true
		AlphaTestEnable=false
		SpecularEnable=false
		
		Diffuse=RGB(0.7,0.7,0.7)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		
		Modulatex2Tile(_tx,0)
		Lighting=true
		
		
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=_cull
	}
	Layer=0
}


Shader AlphaMaskBitmap( Bitmap _tx )
{
	Pass
	{
		SrcBlend=One
		DestBlend=Zero
		AlphaBlendEnable=true

		AlphaTestEnable=true
		AlphaRef=AlphaRefSI
		AlphaFunc=Greater

		SpecularEnable=false
		SpecularPower=0
		Specular=RGBA(0.0, 0.0, 0.0, 0.0)

		Ambient = 1:RGBA(1.0, 1.0, 1.0, 1.0)
		Diffuse = 1:RGBA(1.0, 1.0, 1.0, 1.0)
		Emissive = RGBA(0.0, 0.0, 0.0, 0.0)

		Lighting=true

		CullMode=CCW

		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true

		AlphaMaskBitmap( _tx )
	}
	
	Layer=0
}


Shader AlphaMaskFadeBitmap( Bitmap _tx, Bitmap _tx2 )
{
	Pass
	{
		SrcBlend=One
		DestBlend=Zero
		AlphaBlendEnable=true

		AlphaTestEnable=true
		AlphaRef=AlphaRefSI
		AlphaFunc=Greater

		SpecularEnable=false
		SpecularPower=0
		Specular=RGBA(0.0, 0.0, 0.0, 0.0)

		Ambient = 1:RGBA(1.0, 1.0, 1.0, 1.0)
		Diffuse = 1:RGBA(1.0, 1.0, 1.0, 1.0)
		Emissive = RGBA(0.0, 0.0, 0.0, 0.0)

		Lighting=true

		CullMode=CCW

		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true

		AlphaMaskBitmap( _tx )
		AlphaMaskFadeBitmap( _tx2 )
	}
	
	Layer=0
}


Shader Background( Bitmap _tx, CullMode _cull )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=0x00000000
		AlphaFunc=Greater
		SpecularEnable=false

		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		
		Lighting=1
		ZEnable=false
		ZFunc=LessEqual
		ZWriteEnable=false

		Background(_tx,0)
		CullMode=_cull
	}
}


Shader BillboardBlack( Bitmap _tx )
{
	Pass
	{
		SrcBlend=Zero
		DestBlend=Zero

		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=0x00000080
		AlphaFunc=Greater
		SpecularEnable=false
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		//ModulateTile(_tx,0)
		ModulateAlphaTile(_tx,0)
		Lighting=false
		
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=CCW
	}
	Layer=0
}


Shader BillboardBlueprint( Bitmap _tx )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true

		AlphaTestEnable=false
		SpecularEnable=false
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		
		//ModulateTile(_tx,0)
		BillboardBlueprint(_tx,0)
		Lighting=false
		
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=false
		CullMode=CCW
	}
	Layer=0
}


Shader BillboardShadowAlphaMask( Bitmap _tx, CullMode _cull )
{
	Pass
	{
		SrcBlend=Zero
		DestBlend=Zero
		AlphaBlendEnable=true

		AlphaTestEnable=true
		AlphaRef=0x00000080
		AlphaFunc=Greater

		SpecularEnable=false
		FogEnable=false

		Diffuse=RGB(0,0,0)
		Ambient=RGB(0,0,0)
		Emissive=RGB(0,0,0)
		CullMode=_cull
		ModulateTile(_tx,0)
		Lighting=false
		ZEnable=true
		ZFunc=Always
		ZWriteEnable=false
	}
	Layer=0
}

Shader BillboardStandard( Bitmap _lightmap, Bitmap _tx )
{
	Pass
	{
		//SrcBlend=SrcAlpha
		//DestBlend=InvSrcAlpha
		SrcBlend=One
		DestBlend=Zero

		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=0x00000080
		AlphaFunc=Greater
		SpecularEnable=false
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		CullMode=CCW
		//ModulateTile(_tx,0)
		BillboardLightmap(_lightmap)
		ModulateAlphaTile(_tx,0)
		Lighting=false
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
	}
	Layer=0
}


Shader BillboardStandard_AV( Bitmap _lightmap, Bitmap _tx )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha

		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=AlphaRefBillboard
		AlphaFunc=Greater
		SpecularEnable=false
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		CullMode=CCW
		//ModulateTile(_tx,0)
		BillboardLightmap(_lightmap)
		ModulateAlphaTile(_tx,0)
		Lighting=false
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
	}
	Layer=0
}


Shader BillboardStandard_O( Bitmap _lightmap, Bitmap _tx )
{
	Pass
	{
		SrcBlend=One
		DestBlend=Zero

		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=AlphaRefBillboard
		AlphaFunc=Greater
		SpecularEnable=false
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		CullMode=CCW
		//ModulateTile(_tx,0)
		BillboardLightmap(_lightmap)
		ModulateAlphaTile(_tx,0)
		Lighting=false
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
	}
	Layer=0
}


Shader ClothShinyAlpha( Bitmap _tx, Colour _diffuse, Bitmap _envmap, Cullmode _cull )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=false
		SpecularEnable=true

		Diffuse=_diffuse
		Ambient=RGB(1,1,1)
		Specular=RGB(1,1,1)
		Emissive=RGB(0,0,0)
		SpecularPower=20
		ModulateAlpha(_tx,0)
		ClothShinyAlpha(_envmap)
		Lighting=1
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		#playstation2:Shadows=false
		CullMode=none
	}
	Layer=0
}


Shader CloudsUVScroll( Bitmap _clouds, Bitmap _alpha, Colour _col )
{
	Pass
	{
		SrcBlend=One
		DestBlend=Zero
		AlphaBlendEnable=true
		AlphaTestEnable=false
		SpecularEnable=false

		Diffuse=1:RGB(1,1,1)
		Ambient=_col
		Emissive=RGB(0,0,0)
		CloudsUVScroll(_clouds,0)
		CloudsUVScroll2(_alpha,0)
		Lighting=1
		ZEnable=false
		ZFunc=LessEqual
		ZWriteEnable=false
		CullMode=none
	}
}


Shader CloudsUVScrollB( Bitmap _clouds, Bitmap _alpha )
{
	Pass
	{
		SrcBlend=DestColour
		DestBlend=SrcColour
		AlphaBlendEnable=true
		AlphaTestEnable=false
		SpecularEnable=false

		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		CloudsUVScroll(_clouds,0)
		CloudsUVScroll2(_alpha,0)
		Lighting=1
		ZEnable=false
		ZFunc=LessEqual
		ZWriteEnable=false
		CullMode=none
	}
}


Shader CloudsUVScrollNoDestAlpha( Bitmap _clouds, Bitmap _alpha, Colour _col )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=false
		SpecularEnable=false

		Diffuse=1:RGB(1,1,1)
		Ambient=_col
		Emissive=RGB(0,0,0)
		CloudsUVScroll(_clouds,0)
		CloudsUVScroll2(_alpha,0)
		Lighting=1
		ZEnable=false
		ZFunc=LessEqual
		ZWriteEnable=false
		CullMode=none
	}
}


Shader EnvMap( Bitmap _tx )
{
	Pass
	{
		SrcBlend=One
		DestBlend=Zero

		AlphaBlendEnable=true
		AlphaTestEnable=false
		AlphaRef=0x00000000
		AlphaFunc=Greater
		SpecularEnable=false
		
		Diffuse=1:RGB(1,1,1)
		Ambient=RGB(1,1,1)
		Emissive=RGB(0,0,0)
		CullMode=none
		GuiIconShader(_tx,0)
		Lighting=false
		ZEnable=true
		ZFunc=Always
		ZWriteEnable=false
	}
	Layer=0
}


Shader FlatTag( Bitmap _tx )
{
	Pass
	{
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=0x00000010
		AlphaFunc=Greater
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		ZWriteEnable=false
		ZEnable=true
		ZFunc=LessEqual
		Ambient=1:RGB(1,1,1)
		Diffuse=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		Lighting=false
		SpecularEnable=false
		ModulateTile( _tx, 0 )
		CullMode=none
		FogEnable=false
	}
	Layer=0
}

			

Shader FullscreenModulateX2( Bitmap _tx, bool _zEnable )
{
	Pass
	{
		SrcBlend=DestColour
		DestBlend=One
		AlphaBlendEnable=true
		AlphaTestEnable=false
		SpecularEnable=false
		FogEnable=false
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		CullMode=None
		ModulateAlphaTile(_tx,0)
		Lighting=0
		ZEnable=_zEnable
		ZFunc=LessEqual
		ZWriteEnable=false
	}
	Layer=0
}


Shader FullscreenModulateX2NoBitmap( bool _zEnable )
{
	Pass
	{
		SrcBlend=DestColour
		DestBlend=One
		AlphaBlendEnable=true
		AlphaTestEnable=false
		SpecularEnable=false
		FogEnable=false
		
		CullMode=None
		Lighting=0
		ZEnable=_zEnable
		ZFunc=LessEqual
		ZWriteEnable=false
	}
	Layer=0
}


Shader GuiIconShader( Bitmap _tx )
{
	Pass
	{
		AlphaBlendEnable=true
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaTestEnable=false

		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=false

		Diffuse=1:RGB(1,1,1)
		CullMode=None
		GuiIconShader(_tx,0)
		Lighting=0
		SpecularEnable=false
		FogEnable=false
	}
	Layer=0
}


Shader GUIRendererBitmap( Bitmap _bmp )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaRef=0x0000000f
		AlphaFunc=Greater
		AlphaTestEnable=true
		
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=false

		Lighting=false
		Diffuse=1:RGB(1,1,1)
		CullMode=None
		GUIRendererBitmap( _bmp )
		FogEnable=false
	}
	Layer=0
}


Shader GUIRendererColour()
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=false
		
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=false

		Lighting=false
		CullMode=None
		FogEnable=false
	}
	Layer=0
}


Shader GUIRendererZMask( Bitmap _bmp, int _alphaRef )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaFunc=Greater
		AlphaRef=_alphaRef
		
		ZEnable=true
		ZFunc=Always
		ZWriteEnable=true

		Lighting=false
		Diffuse=0:RGB(0,0,0)
		CullMode=None
		GUIRendererZMask( _bmp )
		FogEnable=false
	}
	Layer=0
}


Shader GUISkin( Bitmap _tx )
{
	Pass
	{
		AlphaBlendEnable=true
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaTestEnable=false
		
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=false

		Diffuse=1:RGB(1,1,1)
		CullMode=None
		GUISkin(_tx,0)
		Lighting=0
		SpecularEnable=false
		FogEnable=false
	}
	Layer=0
}


Shader GUISkinTile( Bitmap _tx )
{
	Pass
	{
		SrcBlend=One
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=false
		SpecularEnable=false
		
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=false

		Diffuse=1:RGB(1,1,1)
		CullMode=None
		ModulateTileNoMip(_tx,0)
		Lighting=0
		FogEnable=false
	}
	Layer=0
}


Shader GUISolidColour( )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=false
		SpecularEnable=false
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=false
		CullMode=None
		Lighting=0
		FogEnable=false
	}
	Layer=0
}


Shader GUISolidColourOpaque( )
{
	Pass
	{
		SrcBlend=One
		DestBlend=Zero
		AlphaBlendEnable=true
		AlphaTestEnable=false
		SpecularEnable=false
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		Lighting=0
		
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=false
		CullMode=none
		FogEnable=false
	}
	Layer=0
}


Shader HorizonLight( Bitmap _tx, CullMode _cull )
{
	Pass
	{
		SrcBlend=DestColour
		DestBlend=Zero
		AlphaBlendEnable=true
		AlphaTestEnable=false
		SpecularEnable=false
		
		Ambient=1:RGB(1,1,1)
		Diffuse=1:RGB(1,1,1)
		//Specular=1:RGB(0,0,0)
		//SpecularPower=20
		Emissive=RGB(0,0,0)
		ModulateTile(_tx,0)
		Lighting=true
		
		
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=_cull
	}
	Layer=0
}


Shader HorizonShadow( Bitmap _tx, CullMode _cull )
{
	Pass
	{
		SrcBlend=One
		DestBlend=Zero
		AlphaBlendEnable=true
		AlphaTestEnable=false
		SpecularEnable=false
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		ModulateTile(_tx,0)
		Lighting=true
		FogEnable=false
		
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=_cull
	}
	Layer=0
}


Shader HorizonShadowUV( Bitmap _tx, CullMode _cull )
{
	Pass
	{
		SrcBlend=Zero
		DestBlend=InvSrcColour
		AlphaBlendEnable=true
		AlphaTestEnable=false
		SpecularEnable=false
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		HorizonShadowUVAlpha(_tx,0)
		Lighting=false
		FogEnable=false
		
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=false
		CullMode=_cull
	}
	Layer=0
}


Shader LapWater( Bitmap _tx )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=false
		SpecularEnable=false
		Diffuse=1:RGBA(1,1,1,1)
		Ambient=1:RGB(0,0,0)
		Emissive=RGB(0,0,0)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		LapWater( _tx )
		CullMode=none
	}
	
	Layer=6
}


Shader LightVolumeBack( )
{
	Pass
	{
		SrcBlend=One
		DestBlend=Zero
		AlphaBlendEnable=true
		AlphaTestEnable=false
		SpecularEnable=false
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		CullMode=CW
		Lighting=0
		ZEnable=true
		ZFunc=Greater
		ZWriteEnable=false
	}
	Layer=0
}


Shader LightVolumeBackAlways( )
{
	Pass
	{
		SrcBlend=Zero
		DestBlend=Zero
		AlphaBlendEnable=true
		AlphaTestEnable=false
		SpecularEnable=false
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		CullMode=CW
		Lighting=0
		ZEnable=true
		ZFunc=Always
		ZWriteEnable=false
	}
	Layer=0
}


Shader LightVolumeFront( Bitmap _tx )
{
	Pass
	{
		SrcBlend=One
		DestBlend=Zero
		AlphaBlendEnable=true
		AlphaTestEnable=false

		SpecularEnable=true
		SpecularPower=10
		Specular=1:RGB(1,1,1)
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		CullMode=CCW
		ModulateAlphaTile(_tx,0)
		Lighting=1
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=false
	}
	Layer=0
}


Shader MoviePlayback(
	Bitmap _bitmap
)
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=false

		ZEnable=false
		ZWriteEnable=false
		CullMode=None

		Diffuse=1:RGB(1,1,1)
		Lighting=false
		SpecularEnable=false
		FogEnable=false

		MoviePlayback( _bitmap )
	}

	Layer=0
}

Shader ParticleAdditive( Bitmap _tx )
{
	Pass
	{
		SrcBlend=One
		DestBlend=One

		AlphaBlendEnable=true
		AlphaTestEnable=false
		AlphaRef=0x00000000
		AlphaFunc=Greater
		SpecularEnable=false
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)

		ModulateAlphaTile(_tx,0)
		Lighting=false
		
		
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=false
		CullMode=CCW
		FogEnable=false
	}
	Layer=0
}


Shader ParticleAdditiveBias( Bitmap _tx )
{
	Pass
	{
		SrcBlend=One
		DestBlend=One

		AlphaBlendEnable=true
		AlphaTestEnable=false
		AlphaRef=0x00000000
		AlphaFunc=Greater
		SpecularEnable=false
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)

		ModulateAlphaTileBias(_tx,0)
		Lighting=false
		
		
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=false
		CullMode=CCW
		FogEnable=false
	}
	Layer=0
}


Shader ParticleBurnTrail( Bitmap _tx )
{
	Pass
	{
		SrcBlend=One
		DestBlend=One

		AlphaBlendEnable=true
		AlphaTestEnable=false
		AlphaRef=0x00000000
		AlphaFunc=Greater
		SpecularEnable=false
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		ModulateAlpha(_tx,0)
		Lighting=false
		
		
		ZEnable=true
		ZFunc=Always
		ZWriteEnable=false
		CullMode=none
		FogEnable=false
	}
	Layer=0
}


Shader ParticlePreMultipliedAlpha( Bitmap _tx )
{
	Pass
	{
		SrcBlend=One
		DestBlend=InvSrcAlpha

		AlphaBlendEnable=true
		AlphaTestEnable=false
		AlphaRef=0x00000000
		AlphaFunc=Greater
		SpecularEnable=false
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		CullMode=CCW
		ModulateAlphaClamp(_tx,0)
		Lighting=false
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=false
		FogEnable=false
	}
	Layer=0
}


Shader PathBlueprint( )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=false
		SpecularEnable=false
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		Lighting=0
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=false
		CullMode=none
	}
	Layer=0
}


Shader PathGround( Bitmap _lightmap, Bitmap _tx, Colour _diffuse )
{
	Pass
	{
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=0x00000010
		AlphaFunc=Greater
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		ZWriteEnable=false
		ZEnable=true
		ZFunc=LessEqual
		Diffuse=_diffuse
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		Lighting=true
		SpecularEnable=false
		CullMode=CCW
		PathGroundLightmap(_lightmap)
		PathGround( _tx )
	}
	Layer=0
}


Shader PathGroundAlpha( Bitmap _tx, Colour _diffuse )
{
	Pass
	{
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=0x00000010
		AlphaFunc=Greater
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		ZWriteEnable=false
		ZEnable=true
		ZFunc=LessEqual
		Diffuse=_diffuse
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		Lighting=true
		SpecularEnable=false
		PathGroundAlpha( _tx )
		CullMode=CCW
	}
	Layer=0
}


Shader People( Bitmap _tx )
{
	Pass
	{
		AlphaBlendEnable=false
		AlphaTestEnable=false
		Lighting=true
		SpecularEnable=false
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		ModulateTileNoMip(_tx,0)
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=none
	}
	Layer=0
}


Shader PeopleAlphaTest( Bitmap _tx )
{
	Pass
	{
		AlphaBlendEnable=false
		AlphaTestEnable=true
		AlphaRef=0x10
		AlphaFunc=Greater
		Lighting=true
		SpecularEnable=false
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		ModulateTileNoMip(_tx,0)
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=none
	}
	Layer=0
}


Shader PeopleEnvMap( 
	Bitmap _diffuse, 
	Bitmap _envmap 
)
{
	Pass
	{
		AlphaBlendEnable=false
		AlphaTestEnable=false
		
		Diffuse=RGB(1,1,1)
		Ambient=RGB(1,1,1)
		Emissive=RGB(0,0,0)
		CullMode=CCW

		ModulateTileNoMip(_diffuse,0)
		PeopleEnvMap(_envmap)

		Lighting=true
		SpecularEnable=false
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
	}
	Layer=0
}

Shader PreLitTexTile( Bitmap _tx, CullMode _cull )
{
	Pass
	{
		SrcBlend=One
		DestBlend=Zero
		AlphaBlendEnable=false
		AlphaTestEnable=false
		SpecularEnable=false
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		ModulateTile(_tx,0)
		Lighting=1
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=_cull
	}
	Layer=2
}


Shader Rope( Bitmap _tx, CullMode _cull )
{
	Pass
	{
		SrcBlend=One
		DestBlend=Zero
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=0x00000080
		AlphaFunc=Greater
		SpecularEnable=false
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		
		ModulateAlphaTile(_tx,0)
		Lighting=true
		
		
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=_cull
	}
	Layer=0
}


Shader ShadowAlphaMaskSolidColourBillboard( Bitmap _tx, CullMode _cull, Colour _col )
{
	Pass
	{
		SrcBlend=One
		DestBlend=Zero
		AlphaBlendEnable=true
		AlphaTestEnable=true
		//AlphaRef=0x000000d0
		AlphaRef=0x00000080
		AlphaFunc=Greater
		SpecularEnable=false
		FogEnable=false

		Diffuse=_col
		Ambient=_col
		Emissive=RGB(0,0,0)
		CullMode=_cull
		ShadowAlphaMaskSolidColourBillboard(_tx,0)
		Lighting=false
		ZEnable=true
		ZFunc=Always
		ZWriteEnable=false
	}
	Layer=0
}


Shader ShadowCopy( Bitmap _tx, CullMode _cull )
{
	Pass
	{
		SrcBlend=Zero
		DestBlend=InvSrcColour
		AlphaBlendEnable=true
		AlphaTestEnable=false
		SpecularEnable=false
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		ModulateAlphaClampNoMip(_tx,0)
		Lighting=false
		FogEnable=false
		
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=false
		CullMode=_cull
	}
	Layer=0
}


Shader ShapeAlphaFromParam( Bitmap _tx, CullMode _cull, Colour _col )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=false
		SpecularEnable=false
		
		Diffuse=_col
		Ambient=_col
		Emissive=RGB(0,0,0)
		
		ModulateAlphaTile(_tx,0)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=_cull
	}
	Layer=0
}


Shader ShapeAlphaFromParamAlphaMask( Bitmap _tx, CullMode _cull, Colour _col )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=0x000000d0
		AlphaFunc=Greater
		SpecularEnable=false
		
		Diffuse=_col
		Ambient=_col
		Emissive=RGB(0,0,0)
		
		ModulateAlphaTile(_tx,0)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=_cull
	}
	Layer=0
}


Shader ShapeAlphaFromVertex( Bitmap _tx, CullMode _cull )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=false
		SpecularEnable=false
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		
		ModulateAlphaTile(_tx,0)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=_cull
	}
	Layer=0
}


Shader ShapeAlphaFromVertexAlphaMask( Bitmap _tx, CullMode _cull )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=0x000000d0
		AlphaFunc=Greater
		SpecularEnable=false
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		
		ModulateAlphaTile(_tx,0)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=_cull
	}
	Layer=0
}


Shader ShapeAlphaMask( Bitmap _tx, CullMode _cull, Colour _col )
{
	Pass
	{
		SrcBlend=One
		DestBlend=Zero
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=0x000000d0
		AlphaFunc=Greater
		SpecularEnable=false
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		
		ModulateTile(_tx,0)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=_cull
	}
	Layer=0
}


Shader ShapeBlueprintOpaque( Bitmap _tx, CullMode _cull, Colour _col )
{
	Pass
	{
		SrcBlend=Zero
		DestBlend=Zero
		AlphaBlendEnable=true

		//AlphaTestEnable=false
		AlphaTestEnable=true
		AlphaRef=0x000000d0
		AlphaFunc=Greater

		SpecularEnable=false
		
		Diffuse=_col
		Ambient=_col
		Emissive=RGB(0,0,0)
		
		//ModulateAlphaTile(_tx,0)
		ModulateTile(_tx,0)
		Lighting=false
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=_cull
	}
	Layer=0
}


Shader ShapeNormalEdgeAlpha( Bitmap _tx, Bitmap _edge, CullMode _cull, Colour _col )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true

		AlphaTestEnable=true
		AlphaRef=0x00000008
		AlphaFunc=Greater

		SpecularEnable=false
		SpecularPower=0
		Specular=RGBA(0.0, 0.0, 0.0, 0.0)

		Diffuse = _col
		Ambient = _col
		Emissive = RGBA(0.0, 0.0, 0.0, 0.0)

		Lighting=true

		CullMode=_cull

		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=false

		NormalEdge( _edge )
		ShapeNormalEdgeModulateAlpha( _tx )
	}
	
	Layer=0
}


Shader ShapeNormalEdgeAlphaMask( Bitmap _tx, Bitmap _edge, CullMode _cull, Colour _col )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true

		AlphaTestEnable=true
		//AlphaRef=AlphaRefSI
		AlphaRef=0x00000008
		AlphaFunc=Greater

		SpecularEnable=false
		SpecularPower=0
		Specular=RGBA(0.0, 0.0, 0.0, 0.0)

		Diffuse = _col
		Ambient = _col
		Emissive = RGBA(0.0, 0.0, 0.0, 0.0)

		Lighting=true

		CullMode=_cull

		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=false

		NormalEdge( _edge )
		ShapeNormalEdgeModulateAlpha( _tx )
	}
	
	Layer=0
}


Shader ShapeNormalEdgeOpaque( Bitmap _tx, Bitmap _edge, CullMode _cull, Colour _col )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true

		AlphaTestEnable=false

		SpecularEnable=false
		SpecularPower=0
		Specular=RGBA(0.0, 0.0, 0.0, 0.0)

		Diffuse = _col
		Ambient = _col
		Emissive = RGBA(0.0, 0.0, 0.0, 0.0)

		Lighting=true

		CullMode=_cull

		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=false

		NormalEdge( _edge )
	}
	
	Layer=0
}


Shader ShapeOpaque( Bitmap _tx, CullMode _cull )
{
	Pass
	{
		SrcBlend=One
		DestBlend=Zero
		AlphaBlendEnable=true
		AlphaTestEnable=false
		SpecularEnable=false
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		
		ModulateTile(_tx,0)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=_cull
	}
	Layer=0
}


Shader ShapeOpaqueAlphaMask( Bitmap _tx, CullMode _cull )
{
	Pass
	{
		SrcBlend=One
		DestBlend=Zero
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=0x000000d0
		AlphaFunc=Greater
		SpecularEnable=false
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		
		ModulateTile(_tx,0)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=_cull
	}
	Layer=0
}


Shader ShapeShadow( Bitmap _tx, CullMode _cull )
{
	Pass
	{
		SrcBlend=Zero
		DestBlend=InvSrcColour
		AlphaBlendEnable=true
		AlphaTestEnable=false
		SpecularEnable=false
		FogEnable=false

		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		
		//ModulateAlphaClampNoMip(_tx,0)
		HorizonShadowUVAlpha(_tx,0)
		Lighting=false
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=false
		CullMode=_cull
	}
	Layer=0
}


Shader ShapeShadowAlpha( Bitmap _tx, CullMode _cull )
{
	Pass
	{
		SrcBlend=Zero
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true

		AlphaTestEnable=false
		//AlphaTestEnable=true
		//AlphaRef=0x000000d0
		//AlphaFunc=Greater

		SpecularEnable=false
		FogEnable=false

		Diffuse=RGB(0,0,0)
		Ambient=RGB(0,0,0)
		Emissive=RGB(0,0,0)
		CullMode=_cull
		ModulateTile(_tx,0)
		Lighting=false
		ZEnable=true
		ZFunc=Always
		ZWriteEnable=false
	}
	Layer=0
}


Shader ShapeShadowAlphaMask( Bitmap _tx, CullMode _cull )
{
	Pass
	{
		SrcBlend=Zero
		DestBlend=Zero
		AlphaBlendEnable=true

		//AlphaTestEnable=false
		AlphaTestEnable=true
		//AlphaRef=0x000000d0
		AlphaRef=0x00000080
		AlphaFunc=Greater

		SpecularEnable=false
		FogEnable=false

		Diffuse=RGB(0,0,0)
		Ambient=RGB(0,0,0)
		Emissive=RGB(0,0,0)
		CullMode=_cull
		ModulateTile(_tx,0)
		Lighting=false
		ZEnable=true
		ZFunc=Always
		ZWriteEnable=false
	}
	Layer=0
}


Shader ShapeShadowOpaque( CullMode _cull )
{
	Pass
	{
		SrcBlend=Zero
		DestBlend=Zero
		AlphaBlendEnable=true

		AlphaTestEnable=false

		SpecularEnable=false
		FogEnable=false

		Diffuse=RGB(0,0,0)
		Ambient=RGB(0,0,0)
		Emissive=RGB(0,0,0)
		CullMode=_cull
		Lighting=false
		ZEnable=true
		ZFunc=Always
		ZWriteEnable=false
	}
	Layer=0
}

Shader ShapeStandard( Bitmap _tx )
{
	Pass
	{
		SrcBlend=One
		DestBlend=Zero
		AlphaBlendEnable=true
		AlphaTestEnable=false
		SpecularEnable=false
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		ModulateTile(_tx,0)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=CCW
	}
	Layer=0
}


Shader SIAlphaChrome_AP( Bitmap _tx, CullMode _cull, Colour _col, Bitmap _envmap )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=0x00000008
		AlphaFunc=Greater

		SpecularEnable=true
		SpecularPower=20
		Specular=RGB(1,1,1)
		
		Diffuse=_col
		Ambient=_col
		Emissive=RGB(0,0,0)
		CullMode=_cull

		ModulateAlphaTile(_tx,0)
		SIChromePassAlpha(_envmap)

		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
	}
	Layer=0
}


Shader SIAlphaChrome_AV( Bitmap _tx, CullMode _cull, Bitmap _envmap )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=0x00000008
		AlphaFunc=Greater

		SpecularEnable=true
		SpecularPower=20
		Specular=RGB(1,1,1)
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		CullMode=_cull

		ModulateAlphaTile(_tx,0)
		SIChromePassAlpha(_envmap)

		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
	}
	Layer=0
}


Shader SIAlphaChrome_O( Bitmap _tx, CullMode _cull, Bitmap _envmap )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=0x00000008
		AlphaFunc=Greater

		SpecularEnable=true
		SpecularPower=20
		Specular=RGB(1,1,1)
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		CullMode=_cull

		ModulateAlphaTile(_tx,0)
		SIChromePassAlpha(_envmap)

		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
	}
	Layer=0
}


Shader SIAlphaMaskChrome_AP( Bitmap _tx, CullMode _cull, Colour _col, Bitmap _envmap )
{
	Pass
	{
		SrcBlend=One
		DestBlend=Zero
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=AlphaRefSI
		AlphaFunc=Greater

		SpecularEnable=true
		SpecularPower=20
		Specular=RGB(1,1,1)
		
		Diffuse=_col
		Ambient=_col
		Emissive=RGB(0,0,0)
		

		ModulateAlphaTile(_tx,0)
		SIChromePassAlpha(_envmap)

		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=_cull
	}
	Layer=0
}


Shader SIAlphaMaskChrome_AV( Bitmap _tx, CullMode _cull, Bitmap _envmap )
{
	Pass
	{
		SrcBlend=One
		DestBlend=Zero
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=AlphaRefSI
		AlphaFunc=Greater

		SpecularEnable=true
		SpecularPower=20
		Specular=RGB(1,1,1)
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		

		ModulateAlphaTile(_tx,0)
		SIChromePassAlpha(_envmap)

		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=_cull
	}
	Layer=0
}


Shader SIAlphaMaskChrome_O( Bitmap _tx, CullMode _cull, Bitmap _envmap )
{
	Pass
	{
		SrcBlend=One
		DestBlend=Zero
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=AlphaRefSI
		AlphaFunc=Greater

		SpecularEnable=true
		SpecularPower=20
		Specular=RGB(1,1,1)
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)

		ModulateAlphaTile(_tx,0)
		SIChromePassAlpha(_envmap)

		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=_cull
	}
	Layer=0
}


Shader SIAlphaMaskLowSpecular100Reflection_AP( Bitmap _tx, CullMode _cull, Colour _col, Bitmap _envmap )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=AlphaRefSILow
		AlphaFunc=Greater

		SpecularEnable=true
		SpecularPower=20
		Specular=RGB(1,1,1)
		
		Diffuse=_col
		Ambient=_col
		Emissive=RGB(0,0,0)

		ModulateAlphaTileBias(_tx,0)
		SIReflection(_envmap)

		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=_cull
	}
	Layer=0
}


Shader SIAlphaMaskLowSpecular100Reflection_AV( Bitmap _tx, CullMode _cull, Bitmap _envmap )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=AlphaRefSILow
		AlphaFunc=Greater

		SpecularEnable=true
		SpecularPower=20
		Specular=RGB(1,1,1)
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)

		ModulateAlphaTileBias(_tx,0)
		SIReflection(_envmap)

		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=_cull
	}
	Layer=0
}


Shader SIAlphaMaskLowSpecular100Reflection_O( Bitmap _tx, CullMode _cull, Bitmap _envmap )
{
	Pass
	{
		SrcBlend=One
		DestBlend=Zero
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=AlphaRefSILow
		AlphaFunc=Greater

		SpecularEnable=true
		SpecularPower=20
		Specular=RGB(1,1,1)
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)

		ModulateTileBias(_tx,0)
		SIReflection(_envmap)

		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=_cull
	}
	Layer=0
}


Shader SIAlphaMaskLowSpecular100_AP( Bitmap _tx, CullMode _cull, Colour _col )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=AlphaRefSILow
		AlphaFunc=Greater

		SpecularEnable=true
		SpecularPower=20
		Specular=RGB(1,1,1)
		
		Diffuse=_col
		Ambient=_col
		Emissive=RGB(0,0,0)
			ModulateAlphaTileBias(_tx,0)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=_cull
	}
	Layer=0
}


Shader SIAlphaMaskLowSpecular100_AV( Bitmap _tx, CullMode _cull )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=AlphaRefSILow
		AlphaFunc=Greater

		SpecularEnable=true
		SpecularPower=20
		Specular=RGB(1,1,1)
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		
		ModulateAlphaTileBias(_tx,0)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=_cull
	}
	Layer=0
}


Shader SIAlphaMaskLowSpecular100_O( Bitmap _tx, CullMode _cull )
{
	Pass
	{
		SrcBlend=One
		DestBlend=Zero
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=AlphaRefSILow
		AlphaFunc=Greater

		SpecularEnable=true
		SpecularPower=20
		Specular=RGB(1,1,1)
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		
		ModulateTileBias(_tx,0)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=_cull
	}
	Layer=0
}


Shader SIAlphaMaskLowSpecular50Reflection_AP( Bitmap _tx, CullMode _cull, Colour _col, Bitmap _envmap )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=AlphaRefSILow
		AlphaFunc=Greater

		SpecularEnable=true
		SpecularPower=20
		Specular=RGB(0.55,0.55,0.55)
		
		Diffuse=_col
		Ambient=_col
		Emissive=RGB(0,0,0)

		ModulateAlphaTileBias(_tx,0)
		SIReflection(_envmap)

		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=_cull
	}
	Layer=0
}


Shader SIAlphaMaskLowSpecular50Reflection_AV( Bitmap _tx, CullMode _cull, Bitmap _envmap )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=AlphaRefSILow
		AlphaFunc=Greater

		SpecularEnable=true
		SpecularPower=20
		Specular=RGB(0.55,0.55,0.55)
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)

		ModulateAlphaTileBias(_tx,0)
		SIReflection(_envmap)

		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=_cull
	}
	Layer=0
}


Shader SIAlphaMaskLowSpecular50Reflection_O( Bitmap _tx, CullMode _cull, Bitmap _envmap )
{
	Pass
	{
		SrcBlend=One
		DestBlend=Zero
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=AlphaRefSILow
		AlphaFunc=Greater

		SpecularEnable=true
		SpecularPower=20
		Specular=RGB(0.55,0.55,0.55)
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)

		ModulateTileBias(_tx,0)
		SIReflection(_envmap)

		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=_cull
	}
	Layer=0
}


Shader SIAlphaMaskLowSpecular50_AP( Bitmap _tx, CullMode _cull, Colour _col )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=AlphaRefSILow
		AlphaFunc=Greater

		SpecularEnable=true
		SpecularPower=20
		Specular=RGB(0.55,0.55,0.55)
		
		Diffuse=_col
		Ambient=_col
		Emissive=RGB(0,0,0)
		
		ModulateAlphaTileBias(_tx,0)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=_cull
	}
	Layer=0
}


Shader SIAlphaMaskLowSpecular50_AV( Bitmap _tx, CullMode _cull )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=AlphaRefSILow
		AlphaFunc=Greater

		SpecularEnable=true
		SpecularPower=20
		Specular=RGB(0.55,0.55,0.55)
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		
		ModulateAlphaTileBias(_tx,0)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=_cull
	}
	Layer=0
}


Shader SIAlphaMaskLowSpecular50_O( Bitmap _tx, CullMode _cull )
{
	Pass
	{
		SrcBlend=One
		DestBlend=Zero
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=AlphaRefSILow
		AlphaFunc=Greater

		SpecularEnable=true
		SpecularPower=20
		Specular=RGB(0.55,0.55,0.55)
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		
		ModulateTileBias(_tx,0)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=_cull
	}
	Layer=0
}


Shader SIAlphaMaskLow_AP( Bitmap _tx, CullMode _cull, Colour _col )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=AlphaRefSILow
		AlphaFunc=Greater
		SpecularEnable=false
		
		Diffuse=_col
		Ambient=_col
		Emissive=RGB(0,0,0)
		
		ModulateAlphaTileBias(_tx,0)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=_cull
	}
	Layer=0
}


Shader SIAlphaMaskLow_AV( Bitmap _tx, CullMode _cull )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=AlphaRefSILow
		AlphaFunc=Greater
		SpecularEnable=false
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		
		ModulateAlphaTileBias(_tx,0)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=_cull
	}
	Layer=0
}


Shader SIAlphaMaskLow_O( Bitmap _tx, CullMode _cull )
{
	Pass
	{
		SrcBlend=One
		DestBlend=Zero
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=AlphaRefSILow
		AlphaFunc=Greater
		SpecularEnable=false
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		
		ModulateTileBias(_tx,0)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=_cull
	}
	Layer=0
}


Shader SIAlphaMaskReflection_AP( Bitmap _tx, CullMode _cull, Colour _col, Bitmap _envmap )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=AlphaRefSI
		AlphaFunc=Greater
		SpecularEnable=false
		
		Diffuse=_col
		Ambient=_col
		Emissive=RGB(0,0,0)
		CullMode=_cull
		ModulateAlphaTile(_tx,0)
		SIReflection(_envmap)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
	}
	Layer=0
}


Shader SIAlphaMaskReflection_AV( Bitmap _tx, CullMode _cull, Bitmap _envmap )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=AlphaRefSI
		AlphaFunc=Greater
		SpecularEnable=false
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		CullMode=_cull
		ModulateAlphaTile(_tx,0)
		SIReflection(_envmap)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
	}
	Layer=0
}


Shader SIAlphaMaskReflection_O( Bitmap _tx, CullMode _cull, Bitmap _envmap )
{
	Pass
	{
		SrcBlend=One
		DestBlend=Zero
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=AlphaRefSI
		AlphaFunc=Greater
		SpecularEnable=false
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		CullMode=_cull
		ModulateTile(_tx,0)
		SIReflection(_envmap)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
	}
	Layer=0
}


Shader SIAlphaMaskSpecular100Reflection_AP( Bitmap _tx, CullMode _cull, Colour _col, Bitmap _envmap )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=AlphaRefSI
		AlphaFunc=Greater

		SpecularEnable=true
		SpecularPower=20
		Specular=RGB(1,1,1)
		
		Diffuse=_col
		Ambient=_col
		Emissive=RGB(0,0,0)
		CullMode=_cull
		ModulateAlphaTile(_tx,0)
		SIReflection(_envmap)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
	}
	Layer=0
}


Shader SIAlphaMaskSpecular100Reflection_AV( Bitmap _tx, CullMode _cull, Bitmap _envmap )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=AlphaRefSI
		AlphaFunc=Greater

		SpecularEnable=true
		SpecularPower=20
		Specular=RGB(1,1,1)
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		CullMode=_cull
		ModulateAlphaTile(_tx,0)
		SIReflection(_envmap)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
	}
	Layer=0
}


Shader SIAlphaMaskSpecular100Reflection_O( Bitmap _tx, CullMode _cull, Bitmap _envmap )
{
	Pass
	{
		SrcBlend=One
		DestBlend=Zero
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=AlphaRefSI
		AlphaFunc=Greater

		SpecularEnable=true
		SpecularPower=20
		Specular=RGB(1,1,1)
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		CullMode=_cull
		ModulateTile(_tx,0)
		SIReflection(_envmap)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
	}
	Layer=0
}


Shader SIAlphaMaskSpecular100_AP( Bitmap _tx, CullMode _cull, Colour _col )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=AlphaRefSI
		AlphaFunc=Greater

		SpecularEnable=true
		SpecularPower=20
		Specular=RGB(1,1,1)
		
		Diffuse=_col
		Ambient=_col
		Emissive=RGB(0,0,0)
		
		ModulateAlphaTile(_tx,0)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=_cull
	}
	Layer=0
}


Shader SIAlphaMaskSpecular100_AV( Bitmap _tx, CullMode _cull )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=AlphaRefSI
		AlphaFunc=Greater

		SpecularEnable=true
		SpecularPower=20
		Specular=RGB(1,1,1)
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		
		ModulateAlphaTile(_tx,0)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=_cull
	}
	Layer=0
}


Shader SIAlphaMaskSpecular100_O( Bitmap _tx, CullMode _cull )
{
	Pass
	{
		SrcBlend=One
		DestBlend=Zero
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=AlphaRefSI
		AlphaFunc=Greater

		SpecularEnable=true
		SpecularPower=20
		Specular=RGB(1,1,1)
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		
		ModulateTile(_tx,0)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=_cull
	}
	Layer=0
}


Shader SIAlphaMaskSpecular50Reflection_AP( Bitmap _tx, CullMode _cull, Colour _col, Bitmap _envmap )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=AlphaRefSI
		AlphaFunc=Greater

		SpecularEnable=true
		SpecularPower=20
		Specular=RGB(0.55,0.55,0.55)
		
		Diffuse=_col
		Ambient=_col
		Emissive=RGB(0,0,0)
		CullMode=_cull
		ModulateAlphaTile(_tx,0)
		SIReflection(_envmap)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
	}
	Layer=0
}


Shader SIAlphaMaskSpecular50Reflection_AV( Bitmap _tx, CullMode _cull, Bitmap _envmap )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=AlphaRefSI
		AlphaFunc=Greater

		SpecularEnable=true
		SpecularPower=20
		Specular=RGB(0.55,0.55,0.55)
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		CullMode=_cull
		ModulateAlphaTile(_tx,0)
		SIReflection(_envmap)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
	}
	Layer=0
}


Shader SIAlphaMaskSpecular50Reflection_O( Bitmap _tx, CullMode _cull, Bitmap _envmap )
{
	Pass
	{
		SrcBlend=One
		DestBlend=Zero
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=AlphaRefSI
		AlphaFunc=Greater

		SpecularEnable=true
		SpecularPower=20
		Specular=RGB(0.55,0.55,0.55)
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		CullMode=_cull
		ModulateTile(_tx,0)
		SIReflection(_envmap)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
	}
	Layer=0
}


Shader SIAlphaMaskSpecular50_AP( Bitmap _tx, CullMode _cull, Colour _col )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=AlphaRefSI
		AlphaFunc=Greater

		SpecularEnable=true
		SpecularPower=20
		Specular=RGB(0.55,0.55,0.55)
		
		Diffuse=_col
		Ambient=_col
		Emissive=RGB(0,0,0)
		
		ModulateAlphaTile(_tx,0)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=_cull
	}
	Layer=0
}


Shader SIAlphaMaskSpecular50_AV( Bitmap _tx, CullMode _cull )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=AlphaRefSI
		AlphaFunc=Greater

		SpecularEnable=true
		SpecularPower=20
		Specular=RGB(0.55,0.55,0.55)
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		
		ModulateAlphaTile(_tx,0)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=_cull
	}
	Layer=0
}


Shader SIAlphaMaskSpecular50_O( Bitmap _tx, CullMode _cull )
{
	Pass
	{
		SrcBlend=One
		DestBlend=Zero
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=AlphaRefSI
		AlphaFunc=Greater

		SpecularEnable=true
		SpecularPower=20
		Specular=RGB(0.55,0.55,0.55)
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		
		ModulateTile(_tx,0)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=_cull
	}
	Layer=0
}


Shader SIAlphaMaskUnlitLow_AP( Bitmap _tx, CullMode _cull, Colour _col )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=AlphaRefSILow
		AlphaFunc=Greater
		SpecularEnable=false
		
		Diffuse=_col
		Ambient=_col
		Emissive=RGB(0,0,0)
		CullMode=_cull
		ModulateAlphaTileBias(_tx,0)
		Lighting=false
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
	}
	Layer=0
}

Shader SIAlphaMaskUnlitLow_AV( Bitmap _tx, CullMode _cull )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=AlphaRefSILow
		AlphaFunc=Greater
		SpecularEnable=false
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		CullMode=_cull
		ModulateAlphaTileBias(_tx,0)
		Lighting=false
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
	}
	Layer=0
}

Shader SIAlphaMaskUnlitLow_O( Bitmap _tx, CullMode _cull )
{
	Pass
	{
		SrcBlend=One
		DestBlend=Zero
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=AlphaRefSILow
		AlphaFunc=Greater
		SpecularEnable=false
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		CullMode=_cull
		ModulateTileBias(_tx,0)
		Lighting=false
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
	}
	Layer=0
}

Shader SIAlphaMaskUnlit_AP( Bitmap _tx, CullMode _cull, Colour _col )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=AlphaRefSI
		AlphaFunc=Greater
		SpecularEnable=false
		
		Diffuse=_col
		Ambient=_col
		Emissive=RGB(0,0,0)
		
		ModulateAlphaTile(_tx,0)
		Lighting=false
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=_cull
	}
	Layer=0
}


Shader SIAlphaMaskUnlit_AV( Bitmap _tx, CullMode _cull )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=AlphaRefSI
		AlphaFunc=Greater
		SpecularEnable=false
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		
		ModulateAlphaTile(_tx,0)
		Lighting=false
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=_cull
	}
	Layer=0
}


Shader SIAlphaMaskUnlit_O( Bitmap _tx, CullMode _cull )
{
	Pass
	{
		SrcBlend=One
		DestBlend=Zero
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=AlphaRefSI
		AlphaFunc=Greater
		SpecularEnable=false
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		
		ModulateTile(_tx,0)
		Lighting=false
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=_cull
	}
	Layer=0
}


Shader SIAlphaMask_AP( Bitmap _tx, CullMode _cull, Colour _col )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=AlphaRefSI
		AlphaFunc=Greater
		SpecularEnable=false
		
		Diffuse=_col
		Ambient=_col
		Emissive=RGB(0,0,0)
		

		ModulateAlphaTile(_tx,0)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=_cull
	}
	Layer=0
}


Shader SIAlphaMask_AV( Bitmap _tx, CullMode _cull )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=AlphaRefSI
		AlphaFunc=Greater
		SpecularEnable=false
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		
		ModulateAlphaTile(_tx,0)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=_cull
	}
	Layer=0
}


Shader SIAlphaMask_O( Bitmap _tx, CullMode _cull )
{
	Pass
	{
		SrcBlend=One
		DestBlend=Zero
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=AlphaRefSI
		AlphaFunc=Greater
		SpecularEnable=false
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		
		ModulateTile(_tx,0)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=_cull
	}
	Layer=0
}


Shader SIAlphaReflection_AP( Bitmap _tx, CullMode _cull, Colour _col, Bitmap _envmap )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=0x00000008
		AlphaFunc=Greater
		SpecularEnable=false
		
		Diffuse=_col
		Ambient=_col
		Emissive=RGB(0,0,0)
		CullMode=_cull
		ModulateAlphaTile(_tx,0)
		SIReflection(_envmap)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
	}
	Layer=0
}


Shader SIAlphaReflection_AV( Bitmap _tx, CullMode _cull, Bitmap _envmap )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=0x00000008
		AlphaFunc=Greater
		SpecularEnable=false
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		CullMode=_cull
		ModulateAlphaTile(_tx,0)
		SIReflection(_envmap)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
	}
	Layer=0
}


Shader SIAlphaReflection_O( Bitmap _tx, CullMode _cull, Bitmap _envmap )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=0x00000008
		AlphaFunc=Greater
		SpecularEnable=false
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		CullMode=_cull
		ModulateTile(_tx,0)
		SIReflection(_envmap)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
	}
	Layer=0
}


Shader SIAlphaSpecular100Reflection_AP( Bitmap _tx, CullMode _cull, Colour _col, Bitmap _envmap )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=0x00000008
		AlphaFunc=Greater

		SpecularEnable=true
		SpecularPower=20
		Specular=RGB(1,1,1)
		
		Diffuse=_col
		Ambient=_col
		Emissive=RGB(0,0,0)
		CullMode=_cull
		ModulateAlphaTile(_tx,0)
		SIReflection(_envmap)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
	}
	Layer=0
}


Shader SIAlphaSpecular100Reflection_AV( Bitmap _tx, CullMode _cull, Bitmap _envmap )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=0x00000008
		AlphaFunc=Greater

		SpecularEnable=true
		SpecularPower=20
		Specular=RGB(1,1,1)
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		CullMode=_cull
		ModulateAlphaTile(_tx,0)
		SIReflection(_envmap)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
	}
	Layer=0
}


Shader SIAlphaSpecular100Reflection_O( Bitmap _tx, CullMode _cull, Bitmap _envmap )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=0x00000008
		AlphaFunc=Greater

		SpecularEnable=true
		SpecularPower=20
		Specular=RGB(1,1,1)
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		CullMode=_cull
		ModulateTile(_tx,0)
		SIReflection(_envmap)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
	}
	Layer=0
}


Shader SIAlphaSpecular100_AP( Bitmap _tx, CullMode _cull, Colour _col )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=0x00000008
		AlphaFunc=Greater

		SpecularEnable=true
		SpecularPower=20
		Specular=RGB(1,1,1)
		
		Diffuse=_col
		Ambient=_col
		Emissive=RGB(0,0,0)
		CullMode=_cull
		ModulateAlphaTile(_tx,0)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
	}
	Layer=0
}


Shader SIAlphaSpecular100_AV( Bitmap _tx, CullMode _cull )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=0x00000008
		AlphaFunc=Greater

		SpecularEnable=true
		SpecularPower=20
		Specular=RGB(1,1,1)
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		CullMode=_cull
		ModulateAlphaTile(_tx,0)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
	}
	Layer=0
}


Shader SIAlphaSpecular100_O( Bitmap _tx, CullMode _cull )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=0x00000008
		AlphaFunc=Greater

		SpecularEnable=true
		SpecularPower=20
		Specular=RGB(1,1,1)
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		CullMode=_cull
		ModulateTile(_tx,0)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
	}
	Layer=0
}


Shader SIAlphaSpecular50Reflection_AP( Bitmap _tx, CullMode _cull, Colour _col, Bitmap _envmap )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=0x00000008
		AlphaFunc=Greater

		SpecularEnable=true
		SpecularPower=20
		Specular=RGB(0.55,0.55,0.55)
		
		Diffuse=_col
		Ambient=_col
		Emissive=RGB(0,0,0)
		CullMode=_cull
		ModulateAlphaTile(_tx,0)
		SIReflection(_envmap)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
	}
	Layer=0
}


Shader SIAlphaSpecular50Reflection_AV( Bitmap _tx, CullMode _cull, Bitmap _envmap )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=0x00000008
		AlphaFunc=Greater

		SpecularEnable=true
		SpecularPower=20
		Specular=RGB(0.55,0.55,0.55)
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		CullMode=_cull
		ModulateAlphaTile(_tx,0)
		SIReflection(_envmap)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
	}
	Layer=0
}


Shader SIAlphaSpecular50Reflection_O( Bitmap _tx, CullMode _cull, Bitmap _envmap )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=0x00000008
		AlphaFunc=Greater

		SpecularEnable=true
		SpecularPower=20
		Specular=RGB(0.55,0.55,0.55)
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		CullMode=_cull
		ModulateTile(_tx,0)
		SIReflection(_envmap)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
	}
	Layer=0
}


Shader SIAlphaSpecular50_AP( Bitmap _tx, CullMode _cull, Colour _col )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=0x00000008
		AlphaFunc=Greater

		SpecularEnable=true
		SpecularPower=20
		Specular=RGB(0.55,0.55,0.55)
		
		Diffuse=_col
		Ambient=_col
		Emissive=RGB(0,0,0)
		CullMode=_cull
		ModulateAlphaTile(_tx,0)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
	}
	Layer=0
}


Shader SIAlphaSpecular50_AV( Bitmap _tx, CullMode _cull )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=0x00000008
		AlphaFunc=Greater

		SpecularEnable=true
		SpecularPower=20
		Specular=RGB(0.55,0.55,0.55)
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		CullMode=_cull
		ModulateAlphaTile(_tx,0)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
	}
	Layer=0
}


Shader SIAlphaSpecular50_O( Bitmap _tx, CullMode _cull )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=0x00000008
		AlphaFunc=Greater

		SpecularEnable=true
		SpecularPower=20
		Specular=RGB(0.55,0.55,0.55)
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		CullMode=_cull
		ModulateTile(_tx,0)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
	}
	Layer=0
}


Shader SIAlphaText_AP( Bitmap _tx, CullMode _cull, Colour _col )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=true
		//AlphaRef=0x00000008
		AlphaRef=0x00000032
		AlphaFunc=Greater
		SpecularEnable=false
		
		Diffuse=_col
		Ambient=_col
		Emissive=RGB(0,0,0)
		CullMode=_cull
		ModulateAlphaTile(_tx,0)
		Lighting=false
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
	}
	Layer=0
}


Shader SIAlphaText_AV( Bitmap _tx, CullMode _cull )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=true
		//AlphaRef=0x00000008
		AlphaRef=0x00000032
		AlphaFunc=Greater
		SpecularEnable=false
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		CullMode=_cull
		ModulateAlphaTile(_tx,0)
		Lighting=false
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
	}
	Layer=0
}


Shader SIAlphaText_O( Bitmap _tx, CullMode _cull )
{
	Pass
	{
		//SrcBlend=SrcAlpha
		//DestBlend=InvSrcAlpha
		SrcBlend=One
		DestBlend=Zero
		AlphaBlendEnable=true
		AlphaTestEnable=true
		//AlphaRef=0x00000008
		AlphaRef=0x00000032
		AlphaFunc=Greater
		SpecularEnable=false
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		CullMode=_cull
		ModulateTile(_tx,0)
		Lighting=false
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
	}
	Layer=0
}


Shader SIAlphaUnlit_AP( Bitmap _tx, CullMode _cull, Colour _col )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=0x00000008
		AlphaFunc=Greater
		SpecularEnable=false
		
		Diffuse=_col
		Ambient=_col
		Emissive=RGB(0,0,0)
		CullMode=_cull
		ModulateAlphaTile(_tx,0)
		Lighting=false
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
	}
	Layer=0
}


Shader SIAlphaUnlit_AV( Bitmap _tx, CullMode _cull )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=0x00000008
		AlphaFunc=Greater
		SpecularEnable=false
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		CullMode=_cull
		ModulateAlphaTile(_tx,0)
		Lighting=false
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
	}
	Layer=0
}


Shader SIAlphaUnlit_O( Bitmap _tx, CullMode _cull )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=0x00000008
		AlphaFunc=Greater
		SpecularEnable=false
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		CullMode=_cull
		ModulateTile(_tx,0)
		Lighting=false
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
	}
	Layer=0
}


Shader SIAlpha_AP( Bitmap _tx, CullMode _cull, Colour _col )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=0x00000008
		AlphaFunc=Greater
		SpecularEnable=false
		
		Diffuse=_col
		Ambient=_col
		Emissive=RGB(0,0,0)
		CullMode=_cull
		ModulateAlphaTile(_tx,0)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
	}
	Layer=0
}


Shader SIAlpha_AV( Bitmap _tx, CullMode _cull )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=0x00000008
		AlphaFunc=Greater
		SpecularEnable=false
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		CullMode=_cull
		ModulateAlphaTile(_tx,0)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
	}
	Layer=0
}


Shader SIAlpha_O( Bitmap _tx, CullMode _cull )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=0x00000008
		AlphaFunc=Greater
		SpecularEnable=false
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		CullMode=_cull
		ModulateTile(_tx,0)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
	}
	Layer=0
}


Shader SIEmissiveMaskSpecular100_AP( Bitmap _tx, CullMode _cull, Colour _col )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=false

		SpecularEnable=true
		SpecularPower=20
		Specular=RGB(1,1,1)
		
		Diffuse=_col
		Ambient=_col
		Emissive=RGB(0,0,0)
		
		ModulateTile(_tx,0)
		ModulateAlphaAddColourTile(_tx,0)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=_cull
	}
	Layer=0
}


Shader SIEmissiveMaskSpecular100_AV( Bitmap _tx, CullMode _cull )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=false

		SpecularEnable=true
		SpecularPower=20
		Specular=RGB(1,1,1)
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		
		ModulateTile(_tx,0)
		ModulateAlphaAddColourTile(_tx,0)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=_cull
	}
	Layer=0
}


Shader SIEmissiveMaskSpecular100_O( Bitmap _tx, CullMode _cull )
{
	Pass
	{
		SrcBlend=One
		DestBlend=Zero
		AlphaBlendEnable=true
		AlphaTestEnable=false

		SpecularEnable=true
		SpecularPower=20
		Specular=RGB(1,1,1)
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		
		ModulateTile(_tx,0)
		ModulateAlphaAddColourTile(_tx,0)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=_cull
	}
	Layer=0
}


Shader SIEmissiveMaskSpecular50_AP( Bitmap _tx, CullMode _cull, Colour _col )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=false

		SpecularEnable=true
		SpecularPower=20
		Specular=RGB(0.55,0.55,0.55)
		
		Diffuse=_col
		Ambient=_col
		Emissive=RGB(0,0,0)
		
		ModulateTile(_tx,0)
		ModulateAlphaAddColourTile(_tx,0)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=_cull
	}
	Layer=0
}


Shader SIEmissiveMaskSpecular50_AV( Bitmap _tx, CullMode _cull )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=false

		SpecularEnable=true
		SpecularPower=20
		Specular=RGB(0.55,0.55,0.55)
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		
		ModulateTile(_tx,0)
		ModulateAlphaAddColourTile(_tx,0)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=_cull
	}
	Layer=0
}


Shader SIEmissiveMaskSpecular50_O( Bitmap _tx, CullMode _cull )
{
	Pass
	{
		SrcBlend=One
		DestBlend=Zero
		AlphaBlendEnable=true
		AlphaTestEnable=false

		SpecularEnable=true
		SpecularPower=20
		Specular=RGB(0.55,0.55,0.55)
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		
		ModulateTile(_tx,0)
		ModulateAlphaAddColourTile(_tx,0)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=_cull
	}
	Layer=0
}


Shader SIEmissiveMask_AP( Bitmap _tx, CullMode _cull, Colour _col )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=false
		SpecularEnable=false
		
		Diffuse=_col
		Ambient=_col
		Emissive=RGB(0,0,0)
		
		ModulateTile(_tx,0)
		ModulateAlphaAddColourTile(_tx,0)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=_cull
	}
	Layer=0
}


Shader SIEmissiveMask_AV( Bitmap _tx, CullMode _cull )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=false
		SpecularEnable=false
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		
		ModulateTile(_tx,0)
		ModulateAlphaAddColourTile(_tx,0)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=_cull
	}
	Layer=0
}


Shader SIEmissiveMask_O( Bitmap _tx, CullMode _cull )
{
	Pass
	{
		SrcBlend=One
		DestBlend=Zero
		AlphaBlendEnable=true
		AlphaTestEnable=false
		SpecularEnable=false
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		
		ModulateTile(_tx,0)
		ModulateAlphaAddColourTile(_tx,0)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=_cull
	}
	Layer=0
}


Shader SIFillZ_O( CullMode _cull )
{
	Pass
	{
		SrcBlend=Zero
		DestBlend=One
		AlphaBlendEnable=true
		AlphaTestEnable=false
		SpecularEnable=false
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		
		Lighting=false
		FogEnable=false
		
		
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=_cull
	}
	Layer=0
}


Shader SIGlass_AP( Bitmap _tx, CullMode _cull, Colour _col, Bitmap _envmap )
{
	Pass
	{
		SrcBlend=One
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=false
		AlphaRef=0x00000008
		AlphaFunc=Greater
		SpecularEnable=false
		
		Diffuse=_col
		Ambient=_col
		Emissive=RGB(0,0,0)
		CullMode=_cull

		ModulateAlphaTile(_tx,0)
		ShapeGlass(_envmap)
		//ModulateByDiffuseAlpha()

		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
	}
	Layer=0
}


Shader SIGlass_AV( Bitmap _tx, CullMode _cull, Bitmap _envmap )
{
	Pass
	{
		SrcBlend=One
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=false
		AlphaRef=0x00000008
		AlphaFunc=Greater
		SpecularEnable=false
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		CullMode=_cull

		ModulateAlphaTile(_tx,0)
		ShapeGlass(_envmap)

		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
	}
	Layer=0
}


Shader SIGlass_O( Bitmap _tx, CullMode _cull, Bitmap _envmap )
{
	Pass
	{
		SrcBlend=One
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=false
		AlphaRef=0x00000008
		AlphaFunc=Greater
		SpecularEnable=false
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		CullMode=_cull

		//SIGlassBase(_tx,0)
		//SIGlass(_envmap)
		ModulateAlphaTile(_tx,0)
		ShapeGlass(_envmap)

		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
	}
	Layer=0
}


Shader SimpleWater( 
)
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true

		AlphaTestEnable=false

		SpecularEnable=true
		SpecularPower=150
		Specular=RGBA(0.4,0.4,0.4,0.0)

		Ambient = 1:RGBA(1.0, 1.0, 1.0, 1.0)
		Diffuse = 1:RGBA(1.0, 1.0, 1.0, 1.0)
		Emissive = RGBA(0.0, 0.0, 0.0, 0.0)

		Lighting=true

		CullMode=none

		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true

		VertexShader
		{
			float4 c_envCubemapColour = EnvCubemapColour
			float4x4 c_envCubemapTransform = EnvCubemapTransform

			Program
			{{
				#include <vsdefault>

				void main (void)
				{
#if MAX_LIGHTS
					InitLightsArrays();
#endif
					InitConstantArrays();
					GEF_InputVertex();
					GEF_Transform();
					GEF_Project();
					GEF_Light();
					GEF_Fog();

					vec4 uv = vec4(reflect(normalize(g_viewPosition), g_viewNormal), 1.0);
					gl_TexCoord[0].xyz = mul(uv, c_envCubemapTransform).xyz;

					float cosAngle = dot(normalize(g_viewPosition),-g_viewNormal);
					float fresnel = 1.0 - abs( cosAngle );
					float cFresnel = c_envCubemapColour.w;
					gl_FrontColor.w = (fresnel * (1.0 - cFresnel))*0.7 + cFresnel;
				}
			}}
		}

		PixelShader
		{
			Sampler s_envMap	= LinearClampCubemap(EnvCubemap);
			float4	c_envColour = EnvCubemapColour

			struct PS_INPUT
			{
				float4 Diffuse		: colour 0
				float4 Specular		: colour 1
				float3 TexCoord0	: texcoord 0
			}

			Program
			{{
				#asm
				#bind s_envMap		s0
				#bind c_envColour	c0
				!!ARBfp1.0
				ATTRIB v0 = fragment.color.primary;
				ATTRIB v1 = fragment.color.secondary;
				ATTRIB T0 = fragment.texcoord[0];
				PARAM c[1] = { program.env[0] };
				TEMP r0, t0;
				TEX t0, T0, texture[0], CUBE;
				MAD r0.xyz, t0, c[0], v1;
				MOV r0.w, v0;
				MOV result.color, r0;
				END
			}}
		}
	}
	
	Layer=0
}


Shader SimpleWaterBumped( 
	Bitmap _bumpmap,
	float4 _clipDir
)
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true

		AlphaTestEnable=false

		SpecularEnable=true
		SpecularPower=150
		Specular=RGBA(0.4,0.4,0.4,0.0)

		Ambient = 1:RGBA(1.0, 1.0, 1.0, 1.0)
		Diffuse = 1:RGBA(1.0, 1.0, 1.0, 1.0)
		Emissive = RGBA(0.0, 0.0, 0.0, 0.0)

		Lighting=true

		CullMode=none

		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=false

		VertexShader
		{
			float4 c_envCubemapColour = EnvCubemapColour
			float4x4 c_envCubemapTransform = EnvCubemapTransform
			
			float4x4 c_reflMat = Texture0
			float4x4 c_bumpMat = Texture1
			float4 c_clipDir = _clipDir

			Program
			{{
				#include <vsdefault>

				void main(void)
				{
#if MAX_LIGHTS
					InitLightsArrays();
#endif
					InitConstantArrays();
					GEF_InputVertex();
					GEF_Transform();
					
					// clip given position to water plane
					g_viewPosition += c_clipDir.xyz * max(0.0, c_clipDir.w - g_viewPosition.z);

					GEF_Project();
					GEF_Light();
					GEF_Fog();

					vec4 uv = vec4(reflect(normalize(g_viewPosition), g_viewNormal), 1.0);
					vec4 origXY = mul(uv, c_envCubemapTransform).xyzz;
					
					float cosAngle = dot(normalize(g_viewPosition),-g_viewNormal);
					float fresnel = 1.0 - abs( cosAngle );
					float cFresnel = c_envCubemapColour.w;
					gl_FrontColor.w = (fresnel * (1.0 - cFresnel))*0.7 + cFresnel;

					//Based on WaterReflection:
					vec4 viewPos4 = vec4(g_viewPosition, 1.0);
					vec4 pspPos4 = viewPos4 / dot(c_projMat[3], viewPos4);
					gl_Position.xy = vec2(mul(pspPos4, float4x2(c_projMat)));
					gl_Position.z = 0.0;
					gl_Position.w = 1.0;

					// transform and perspective project position for 2d bump texture
					gl_TexCoord[0].xy = vec2(mul(pspPos4, float4x2(c_bumpMat)));
							
					// setup 3x3 bem matrix
					gl_TexCoord[1].z = origXY.x;
					gl_TexCoord[2].z = origXY.y; 
					gl_TexCoord[3].z = origXY.z;
					gl_TexCoord[1].xy = c_reflMat[2].xy;
					gl_TexCoord[2].xy = c_reflMat[2].zw;
					gl_TexCoord[3].xy = vec2(0.0);
				}
			}}
		}

		PixelShader
		{
			Sampler s_bumps  = LinearTile(_bumpmap);
			Sampler s_envMap = LinearClampCubemap(EnvCubemap);
			float4	c_envCol = EnvCubemapColour

			struct PS_INPUT
			{
				float4 Diffuse		: colour 0
				float4 Specular		: colour 1
				float3 TexCoord0	: texcoord 0
				float3 TexCoord1	: texcoord 1
				float3 TexCoord2	: texcoord 2
				float3 TexCoord3	: texcoord 3
			}

			Program
			{{
				#asm
				#bind s_bumps	s0
				#bind s_envMap	s3
				#bind c_envCol	c0
			
				ps.1.1				
				//Need w for cube map!
				tex			t0					// sample bump offset texture
				texm3x3pad	t1,		t0_bx2		// calculate u coord
				texm3x3pad	t2,		t0_bx2		// calculate v coord
				texm3x3tex  t3,     t0_bx2		// calculate w and sample envmap(u,v,w)

				//Same as reflective water: (Looks nicer)
				//mad			r0.rgb,	t3,	c0, v0	// modulate env map and add in diffuse
				//mul			r0.a,	v0, c0		// modulate alpha from vertex with env map col

				//Same as simple water:
				mad			r0.rgb,	t3,	c0, v1	// modulate env map and add in diffuse
				+mov		r0.a, v0			// copy alpha from vertex
			}}
		}
	}
	
	Layer=0
}

Shader SimpleWaterBumpedPS20( 
	Bitmap _bumpmap,
	float4 _clipDir
)
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true

		AlphaTestEnable=false

		SpecularEnable=true
		SpecularPower=150
		Specular=RGBA(0.4,0.4,0.4,0.0)

		Ambient = 1:RGBA(1.0, 1.0, 1.0, 1.0)
		Diffuse = 1:RGBA(1.0, 1.0, 1.0, 1.0)
		Emissive = RGBA(0.0, 0.0, 0.0, 0.0)

		Lighting=true

		CullMode=none

		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=false

		VertexShader
		{
			float4 c_envCubemapColour = EnvCubemapColour
			float4x4 c_envCubemapTransform = EnvCubemapTransform
			
			float4x4 c_reflMat = Texture0
			float4x4 c_bumpMat = Texture1
			float4 c_clipDir = _clipDir

			Program
			{{
				#include <vsdefault>

				void main(void)
				{
#if MAX_LIGHTS
					InitLightsArrays();
#endif
					InitConstantArrays();
					GEF_InputVertex();
					GEF_Transform();
					
					// clip given position to water plane
					g_viewPosition += c_clipDir.xyz * max(0.0, c_clipDir.w - g_viewPosition.z);

					GEF_Project();
					GEF_Light();
					GEF_Fog();

					vec4 uv = vec4(reflect(normalize(g_viewPosition), g_viewNormal), 1.0);
					vec4 origXY = mul(uv, c_envCubemapTransform).xyzz;
					
					float cosAngle = dot(normalize(g_viewPosition),-g_viewNormal);
					float fresnel = 1.0 - abs( cosAngle );
					float cFresnel = c_envCubemapColour.w;
					gl_FrontColor.w = (fresnel * (1.0 - cFresnel))*0.7 + cFresnel;

					//Based on WaterReflection:
					vec4 viewPos4 = vec4(g_viewPosition, 1.0);
					vec4 pspPos4 = viewPos4 / dot(c_projMat[3], viewPos4);
					gl_Position.xy = vec2(mul(pspPos4, float4x2(c_projMat)));
					gl_Position.z = 0.0;
					gl_Position.w = 1.0;

					// transform and perspective project position for 2d bump texture
					gl_TexCoord[0].xy = vec2(mul(pspPos4, float4x2(c_bumpMat)));
							
					// setup 3x3 bem matrix
					gl_TexCoord[1].z = origXY.x;
					gl_TexCoord[2].z = origXY.y; 
					gl_TexCoord[3].z = origXY.z;
					gl_TexCoord[1].xy = c_reflMat[2].xy;
					gl_TexCoord[2].xy = c_reflMat[2].zw;
					gl_TexCoord[3].xy = vec2(0.0);
				}
			}}
		}

		PixelShader
		{
			Sampler s_bumps  = LinearTile(_bumpmap);
			Sampler s_envMap = LinearClampCubemap(EnvCubemap);
			float4	c_envCol = EnvCubemapColour

			struct PS_INPUT
			{
				float4 Diffuse		: colour 0
				float4 Specular		: colour 1
				float3 TexCoord0	: texcoord 0
				float3 TexCoord1	: texcoord 1
				float3 TexCoord2	: texcoord 2
				float3 TexCoord3	: texcoord 3
			}

			Program
			{{
				#asm
				#bind s_envMap		s0
				#bind s_bumps		s1
				#bind c_envCol		c0

				!!ARBfp1.0
				PARAM  c1 = { -0.500000, 0.500000, 1.000000, 2.000000 };
				ATTRIB v0 = fragment.color.primary;
				ATTRIB v1 = fragment.color.secondary;
				ATTRIB T0 = fragment.texcoord[0];
				ATTRIB T1 = fragment.texcoord[1];
				ATTRIB T2 = fragment.texcoord[2];
				ATTRIB T3 = fragment.texcoord[3];
				TEMP r0, t0, t1;
				PARAM c[1] = { program.env[0] };
				TEX t0, T0, texture[1], 2D;
				ADD t0.xyz, t0, c1.x;
				MUL t0.xyz, t0, c1.w;
				DP3 t1.x, T1, t0;
				DP3 t1.y, T2, t0;
				DP3 t1.z, T3, t0;
				TEX t0, t1, texture[0], CUBE;
				MAD r0.xyz, t0, c[0], v1;
				MOV r0.w, v0;
				MOV result.color, r0;
				END
			}}
		}
	}
	
	Layer=0
}

Shader SIOpaqueChromeModulate_AP( Bitmap _tx, CullMode _cull, Colour _col, Bitmap _envmap )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=false
		SpecularEnable=false
		
		Diffuse=_col
		Ambient=_col
		Emissive=RGB(0,0,0)
		
		SIChromeModulateCurrentAlpha(_envmap)
		ModulateCurrentAlphaTile(_tx,0)
		//SIChromeModulate(_envmap)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=_cull
	}
	Layer=0
}


Shader SIOpaqueChromeModulate_AV( Bitmap _tx, CullMode _cull, Bitmap _envmap )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=false
		SpecularEnable=false
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		
		SIChromeModulateCurrentAlpha(_envmap)
		ModulateCurrentAlphaTile(_tx,0)
		//SIChromeModulate(_envmap)
		Lighting=true
	
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=_cull
	}
	Layer=0
}


Shader SIOpaqueChromeModulate_O( Bitmap _tx, CullMode _cull, Bitmap _envmap )
{
	Pass
	{
		SrcBlend=One
		DestBlend=Zero
		AlphaBlendEnable=true
		AlphaTestEnable=false
		SpecularEnable=false
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		
		SIChrome(_envmap)
		ModulateTile(_tx,0)
		//SIChromeModulate(_envmap)
		Lighting=true
		
		
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=_cull
	}
	Layer=0
}


Shader SIOpaqueChrome_AP( Bitmap _envmap, CullMode _cull, Colour _col )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=false

		SpecularEnable=true
		SpecularPower=20
		Specular=RGB(1,1,1)
		
		Diffuse=_col
		Ambient=_col
		Emissive=RGB(0,0,0)
		
		SIChromeModulateCurrentAlpha(_envmap)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=_cull
	}
	Layer=0
}


Shader SIOpaqueChrome_AV( Bitmap _envmap, CullMode _cull )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=false

		SpecularEnable=true
		SpecularPower=20
		Specular=RGB(1,1,1)
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		
		SIChromeModulateCurrentAlpha(_envmap)
		Lighting=true
		
		
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=_cull
	}
	Layer=0
}


Shader SIOpaqueChrome_O( Bitmap _envmap, CullMode _cull )
{
	Pass
	{
		SrcBlend=One
		DestBlend=Zero
		AlphaBlendEnable=true
		AlphaTestEnable=false

		SpecularEnable=true
		SpecularPower=20
		Specular=RGB(1,1,1)
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		
		SIChrome(_envmap)
		Lighting=true
		
		
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=_cull
	}
	Layer=0
}


Shader SIOpaqueGlossReflection_AP( Bitmap _tx, CullMode _cull, Colour _col, Bitmap _envmap )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=false
		SpecularEnable=false
		
		Diffuse=_col
		Ambient=_col
		Emissive=RGB(0,0,0)
		CullMode=_cull
		ModulateAlphaTile(_tx,0)
		SIGlossReflection(_envmap)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
	}
	Layer=0
}


Shader SIOpaqueGlossReflection_AV( Bitmap _tx, CullMode _cull, Bitmap _envmap )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=false
		SpecularEnable=false
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		CullMode=_cull
		ModulateAlphaTile(_tx,0)
		SIGlossReflection(_envmap)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
	}
	Layer=0
}


Shader SIOpaqueGlossReflection_O( Bitmap _tx, CullMode _cull, Bitmap _envmap )
{
	Pass
	{
		SrcBlend=One
		DestBlend=Zero
		AlphaBlendEnable=true
		AlphaTestEnable=false
		SpecularEnable=false
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		CullMode=_cull
		ModulateAlphaTile(_tx,0)
		SIGlossReflection(_envmap)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
	}
	Layer=0
}


Shader SIOpaqueReflection_AP( Bitmap _tx, CullMode _cull, Colour _col, Bitmap _envmap )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=false
		SpecularEnable=false
		
		Diffuse=_col
		Ambient=_col
		Emissive=RGB(0,0,0)
		CullMode=_cull
		ModulateCurrentAlphaTile(_tx,0)
		SIReflection(_envmap)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
	}
	Layer=0
}


Shader SIOpaqueReflection_AV( Bitmap _tx, CullMode _cull, Bitmap _envmap )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=false
		SpecularEnable=false
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		CullMode=_cull
		ModulateCurrentAlphaTile(_tx,0)
		SIReflection(_envmap)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
	}
	Layer=0
}


Shader SIOpaqueReflection_O( Bitmap _tx, CullMode _cull, Bitmap _envmap )
{
	Pass
	{
		SrcBlend=One
		DestBlend=Zero
		AlphaBlendEnable=true
		AlphaTestEnable=false
		SpecularEnable=false
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		CullMode=_cull
		ModulateTile(_tx,0)
		SIReflection(_envmap)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
	}
	Layer=0
}


Shader SIOpaqueSpecular100Reflection_AP( Bitmap _tx, CullMode _cull, Colour _col, Bitmap _envmap )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=false

		SpecularEnable=true
		SpecularPower=20
		Specular=RGB(1,1,1)
		
		Diffuse=_col
		Ambient=_col
		Emissive=RGB(0,0,0)
		CullMode=_cull
		ModulateCurrentAlphaTile(_tx,0)
		SIReflection(_envmap)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
	}
	Layer=0
}


Shader SIOpaqueSpecular100Reflection_AV( Bitmap _tx, CullMode _cull, Bitmap _envmap )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=false

		SpecularEnable=true
		SpecularPower=20
		Specular=RGB(1,1,1)
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		CullMode=_cull
		ModulateCurrentAlphaTile(_tx,0)
		SIReflection(_envmap)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
	}
	Layer=0
}


Shader SIOpaqueSpecular100Reflection_O( Bitmap _tx, CullMode _cull, Bitmap _envmap )
{
	Pass
	{
		SrcBlend=One
		DestBlend=Zero
		AlphaBlendEnable=true
		AlphaTestEnable=false

		SpecularEnable=true
		SpecularPower=20
		Specular=RGB(1,1,1)
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		CullMode=_cull
		ModulateTile(_tx,0)
		SIReflection(_envmap)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
	}
	Layer=0
}


Shader SIOpaqueSpecular100_AP( Bitmap _tx, CullMode _cull, Colour _col )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=false

		SpecularEnable=true
		SpecularPower=20
		Specular=RGB(1,1,1)
		
		Diffuse=_col
		Ambient=_col
		Emissive=RGB(0,0,0)
		
		ModulateCurrentAlphaTile(_tx,0)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=_cull
	}
	Layer=0
}


Shader SIOpaqueSpecular100_AV( Bitmap _tx, CullMode _cull )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=false

		SpecularEnable=true
		SpecularPower=20
		Specular=RGB(1,1,1)
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		
		ModulateCurrentAlphaTile(_tx,0)
		Lighting=true
		
		
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=_cull
	}
	Layer=0
}


Shader SIOpaqueSpecular100_O( Bitmap _tx, CullMode _cull )
{
	Pass
	{
		SrcBlend=One
		DestBlend=Zero
		AlphaBlendEnable=true
		AlphaTestEnable=false

		SpecularEnable=true
		SpecularPower=20
		Specular=RGB(1,1,1)
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		
		ModulateTile(_tx,0)
		Lighting=true
		
		
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=_cull
	}
	Layer=0
}


Shader SIOpaqueSpecular50Reflection_AP( Bitmap _tx, CullMode _cull, Colour _col, Bitmap _envmap )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=false

		SpecularEnable=true
		SpecularPower=20
		Specular=RGB(0.55,0.55,0.55)
		
		Diffuse=_col
		Ambient=_col
		Emissive=RGB(0,0,0)
		CullMode=_cull
		ModulateCurrentAlphaTile(_tx,0)
		SIReflection(_envmap)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
	}
	Layer=0
}


Shader SIOpaqueSpecular50Reflection_AV( Bitmap _tx, CullMode _cull, Bitmap _envmap )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=false

		SpecularEnable=true
		SpecularPower=20
		Specular=RGB(0.55,0.55,0.55)
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		CullMode=_cull
		ModulateCurrentAlphaTile(_tx,0)
		SIReflection(_envmap)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
	}
	Layer=0
}


Shader SIOpaqueSpecular50Reflection_O( Bitmap _tx, CullMode _cull, Bitmap _envmap )
{
	Pass
	{
		SrcBlend=One
		DestBlend=Zero
		AlphaBlendEnable=true
		AlphaTestEnable=false

		SpecularEnable=true
		SpecularPower=20
		Specular=RGB(0.55,0.55,0.55)
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		CullMode=_cull
		ModulateTile(_tx,0)
		SIReflection(_envmap)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
	}
	Layer=0
}


Shader SIOpaqueSpecular50_AP( Bitmap _tx, CullMode _cull, Colour _col )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=false

		SpecularEnable=true
		SpecularPower=20
		Specular=RGB(0.55,0.55,0.55)
		
		Diffuse=_col
		Ambient=_col
		Emissive=RGB(0,0,0)
		
		ModulateCurrentAlphaTile(_tx,0)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=_cull
	}
	Layer=0
}


Shader SIOpaqueSpecular50_AV( Bitmap _tx, CullMode _cull )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=false

		SpecularEnable=true
		SpecularPower=20
		Specular=RGB(0.55,0.55,0.55)
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		
		ModulateCurrentAlphaTile(_tx,0)
		Lighting=true
		
		
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=_cull
	}
	Layer=0
}


Shader SIOpaqueSpecular50_O( Bitmap _tx, CullMode _cull )
{
	Pass
	{
		SrcBlend=One
		DestBlend=Zero
		AlphaBlendEnable=true
		AlphaTestEnable=false

		SpecularEnable=true
		SpecularPower=20
		Specular=RGB(0.55,0.55,0.55)
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		
		ModulateTile(_tx,0)
		Lighting=true
		
		
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=_cull
	}
	Layer=0
}


Shader SIOpaqueText_AP( Bitmap _tx, CullMode _cull, Colour _col )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=false
		SpecularEnable=false
		
		Diffuse=_col
		Ambient=_col
		Emissive=RGB(0,0,0)
		
		//Modulate2XAlphaTile(_tx,0)
		//Lighting=true
		ModulateCurrentAlphaTile(_tx,0)
		Lighting=false

		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=_cull
	}
	Layer=0
}


Shader SIOpaqueText_AV( Bitmap _tx, CullMode _cull )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=false
		SpecularEnable=false
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		
		//Modulate2XAlphaTile(_tx,0)
		//Lighting=true
		ModulateCurrentAlphaTile(_tx,0)
		Lighting=false
		
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=_cull
	}
	Layer=0
}


Shader SIOpaqueText_O( Bitmap _tx, CullMode _cull )
{
	Pass
	{
		SrcBlend=One
		DestBlend=Zero
		AlphaBlendEnable=true
		AlphaTestEnable=false
		SpecularEnable=false
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		
		//Modulate2XTile(_tx,0)
		//Lighting=true
		ModulateTile(_tx,0)
		Lighting=false
		
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=_cull
	}
	Layer=0
}


Shader SIOpaqueUnlit_AP( Bitmap _tx, CullMode _cull, Colour _col )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=false
		SpecularEnable=false
		
		Diffuse=_col
		Ambient=_col
		Emissive=RGB(0,0,0)
		
		ModulateCurrentAlphaTile(_tx,0)
		Lighting=false
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=_cull
	}
	Layer=0
}


Shader SIOpaqueUnlit_AV( Bitmap _tx, CullMode _cull )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=false
		SpecularEnable=false
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		
		ModulateCurrentAlphaTile(_tx,0)
		Lighting=false
		
		
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=_cull
	}
	Layer=0
}


Shader SIOpaqueUnlit_O( Bitmap _tx, CullMode _cull )
{
	Pass
	{
		SrcBlend=One
		DestBlend=Zero
		AlphaBlendEnable=true
		AlphaTestEnable=false
		SpecularEnable=false
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		
		ModulateTile(_tx,0)
		Lighting=false
		
		
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=_cull
	}
	Layer=0
}


Shader SIOpaque_AP( Bitmap _tx, CullMode _cull, Colour _col )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=false
		SpecularEnable=false
		
		Diffuse=_col
		Ambient=_col
		Emissive=RGB(0,0,0)
		
		ModulateCurrentAlphaTile(_tx,0)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=_cull
	}
	Layer=0
}


Shader SIOpaque_AV( Bitmap _tx, CullMode _cull )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=false
		SpecularEnable=false
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		
		ModulateCurrentAlphaTile(_tx,0)
		Lighting=true
		
		
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=_cull
	}
	Layer=0
}


Shader SIOpaque_O( Bitmap _tx, CullMode _cull )
{
	Pass
	{
		SrcBlend=One
		DestBlend=Zero
		AlphaBlendEnable=true
		AlphaTestEnable=false
		SpecularEnable=false
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		
		ModulateTile(_tx,0)
		Lighting=true
		
		
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=_cull
	}
	Layer=0
}


Shader SkyUVScroll( Bitmap _tx, CullMode _cull )
{
	Pass
	{
		SrcBlend=InvDestAlpha
		DestBlend=DestAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=false
		SpecularEnable=false
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		
		SkyUVScroll(_tx,0)
		Lighting=1
		ZEnable=false
		ZFunc=LessEqual
		ZWriteEnable=false
		CullMode=_cull
	}
}


Shader SkyUVScrollNoDestAlpha( Bitmap _tx, CullMode _cull )
{
	Pass
	{
		SrcBlend=One
		DestBlend=Zero
		AlphaBlendEnable=true
		AlphaTestEnable=false
		SpecularEnable=false
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		
		SkyUVScroll(_tx,0)
		Lighting=1
		ZEnable=false
		ZFunc=LessEqual
		ZWriteEnable=false
		CullMode=_cull
	}
}


Shader SolidColourFont( Bitmap _tx )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=0x00000000
		AlphaFunc=Greater

		ZEnable=true
		ZWriteEnable=false
		ZFunc=LessEqual

		Diffuse=1:RGB(1,1,1)
		SolidColourFont(_tx,0)
		Lighting=0
		SpecularEnable=false
		CullMode=None
	}
	Layer=0
}


Shader StarStyle( Bitmap _tx, CullMode _cull )
{
	Pass
	{
		SrcBlend=invdestalpha
		DestBlend=one
		AlphaBlendEnable=true
		AlphaTestEnable=false
		SpecularEnable=false
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		CullMode=_cull
		StarStyle(_tx,0)
		Lighting=1
		ZEnable=false
		ZFunc=LessEqual
		ZWriteEnable=false
		FogEnable=false
	}
}


Shader SystemFont( Bitmap _tx )
{
	Pass
	{
		ZEnable=false
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=false
		SystemFont(_tx)
		Lighting=0
		CullMode=none
		FogEnable=false
	}
}


Shader TerrainBlending( Bitmap _tx )
{
	Pass
	{
		AlphaBlendEnable=true
		AlphaTestEnable=false
		SrcBlend=SrcAlpha
		DestBlend=One

		ZWriteEnable=false
		ZEnable=true
		ZFunc=LessEqual
		CullMode=CCW

		Lighting=false
		FogEnable=false
		Diffuse=1:RGB(1,1,1)

		TerrainVCBlending( _tx )
	}
	Layer=0
}


Shader TerrainCircleBack( Bitmap _tx )
{
	Pass
	{
		AlphaBlendEnable=true
		AlphaTestEnable=true
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		ZWriteEnable=false
		ZEnable=true
		ZFunc=Greater
		Lighting=false
		Diffuse=1:RGB(0,0,0)
		Ambient=1:RGB(0,0,0)
		Emissive=RGB(0,0,0)
		SpecularEnable=false
		TerrainCircle( _tx )
		CullMode=none
	}
	Layer=0
}


Shader TerrainCircleFront( Bitmap _tx )
{
	Pass
	{
		AlphaBlendEnable=true
		AlphaTestEnable=true
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		ZWriteEnable=false
		ZEnable=true
		ZFunc=LessEqual
		Diffuse=1:RGB(0,0,0)
		Ambient=1:RGB(0,0,0)
		Emissive=RGB(0,0,0)
		Lighting=false
		SpecularEnable=false
		TerrainCircle( _tx )
		CullMode=None
	}
	Layer=0
}


Shader TerrainCliff( Bitmap _tx )
{
	Pass
	{
		AlphaBlendEnable=false
		AlphaTestEnable=false
		
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true
		CullMode=CCW

		Lighting=true
		FogEnable=true
		SpecularEnable=false
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)

		TerrainCliff(_tx)
	}
	Layer=0
}


Shader TerrainContour( Bitmap _main, Bitmap _fade )
{
	Pass
	{
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=0x10
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		ZWriteEnable=false
		ZEnable=true
		ZFunc=LessEqual
		Diffuse=1:RGB(0,0,0)
		Ambient=1:RGB(0,0,0)
		Emissive=RGB(0,0,0)
		Lighting=false
		SpecularEnable=false
		TerrainGrid( _main )
		TerrainContour( _fade )
		CullMode=CCW
	}
	Layer=0
}


Shader TerrainDebug( )
{
	Pass
	{
		AlphaBlendEnable=true
		AlphaTestEnable=false
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		ZWriteEnable=true
		ZEnable=true
		ZFunc=LessEqual
		Diffuse=1:RGB(1,1,1)
		Ambient=RGB(1,1,1)
		Emissive=RGB(0,0,0)
		Lighting=false
		SpecularEnable=false
		TerrainDebug()
		CullMode=None
	}
	Layer=0
}


Shader TerrainDetail( 
	Bitmap _detail, 
	bool _fogEnable
)
{
	Pass
	{
		AlphaBlendEnable=true
		AlphaTestEnable=false
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha

		ZWriteEnable=true
		ZEnable=true
		ZFunc=LessEqual
		CullMode=CCW

		Lighting=true
		SpecularEnable=false
		FogEnable=_fogEnable
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)

		TerrainDetail( _detail )
	}
	Layer=0
}


Shader TerrainFakeUp(
	Bitmap _textureBitmap
)
{
	Pass
	{
		SrcBlend=One
		DestBlend=Zero

		AlphaBlendEnable=false
		AlphaTestEnable=false
		ZWriteEnable=true
		ZEnable=true
		ZFunc=LessEqual
		Diffuse=1:RGB(1,1,1)
		Ambient=0:RGB(0,0,0)
		Emissive=0:RGB(0,0,0)
		Lighting=false
		SpecularEnable=false
		CullMode=CCW
		FogEnable=false
		TerrainHole( _textureBitmap )
	}
	Layer=0
}


Shader TerrainGrid( Bitmap _tx )
{
	Pass
	{
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=0x10
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		ZWriteEnable=false
		ZEnable=true
		ZFunc=LessEqual
		Diffuse=1:RGB(0,0,0)
		Ambient=1:RGB(0,0,0)
		Emissive=RGB(0,0,0)
		Lighting=false
		SpecularEnable=false
		TerrainGrid( _tx )
	}
	Layer=0
}


Shader TerrainGrid2Stage( Bitmap _tx, Bitmap _tx2 )
{
	Pass
	{
		AlphaBlendEnable=true
		AlphaTestEnable=true
		AlphaRef=0x10
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		ZWriteEnable=false
		ZEnable=true
		ZFunc=LessEqual
		Diffuse=1:RGB(0,0,0)
		Ambient=1:RGB(0,0,0)
		Emissive=RGB(0,0,0)
		Lighting=false
		SpecularEnable=false
		TerrainGrid2Stage0( _tx )
		TerrainGrid2Stage1( _tx2 )
	}
	Layer=0
}


Shader TerrainHighlight( Bitmap _tx )
{
	Pass
	{
		AlphaBlendEnable=true
		AlphaTestEnable=true
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		ZWriteEnable=false
		ZEnable=true
		ZFunc=LessEqual
		Diffuse=1:RGB(0,0,0)
		Ambient=1:RGB(0,0,0)
		Emissive=RGB(0,0,0)
		Lighting=false
		SpecularEnable=false
		TerrainHighlight( _tx )
		CullMode=CCW
		FogEnable=false
	}
	Layer=0
}


Shader TerrainHole(
	Bitmap _textureBitmap
)
{
	Pass
	{
		SrcBlend=One
		DestBlend=Zero

		AlphaBlendEnable=false
		AlphaTestEnable=false
		ZWriteEnable=true
		ZEnable=true
		ZFunc=Greater
		Diffuse=1:RGB(1,1,1)
		Ambient=0:RGB(0,0,0)
		Emissive=0:RGB(0,0,0)
		Lighting=true
		SpecularEnable=false
		CullMode=CW
		FogEnable=false
		TerrainHole( _textureBitmap )
	}
	Layer=0
}


Shader TerrainHoleStencil(
)
{
	Pass
	{
		SrcBlend=Zero
		DestBlend=One

		AlphaBlendEnable=true
		AlphaTestEnable=false
		ZWriteEnable=false
		ZEnable=true
		ZFunc=Greater
		Diffuse=0:RGB(0,0,0)
		Ambient=0:RGB(0,0,0)
		Emissive=0:RGB(0,0,0)
		Lighting=false
		SpecularEnable=false
		CullMode=CCW
		FogEnable=false
		TerrainHoleStencil( )
	}
	Layer=0
}


Shader TerrainLightFalloff( Bitmap _tx )
{
	Pass
	{
		SrcBlend=One
		DestBlend=One

		AlphaBlendEnable=true
		AlphaTestEnable=false
		AlphaRef=0x00000000
		AlphaFunc=Greater
		SpecularEnable=false
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		CullMode=CCW
		ModulateAlphaTile(_tx,0)
		Lighting=false
		ZEnable=true
		ZFunc=Always
		ZWriteEnable=false
		FogEnable=false
	}
	Layer=0
}


Shader TerrainLightmap( Bitmap _tx )
{
	Pass
	{
		SrcBlend=Zero
		DestBlend=SrcColour

		AlphaBlendEnable=true
		AlphaTestEnable=false
		AlphaRef=0x00000000
		AlphaFunc=Greater
		SpecularEnable=false

		Diffuse=1:RGB(1,1,1)
		Ambient=RGB(1,1,1)
		Emissive=RGB(0,0,0)
		CullMode=CCW
		TerrainLightmap(_tx)
		Lighting=true
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=false
		FogEnable=false
	}
	Layer=0
}


Shader TerrainPosition(
	Bitmap _black
)
{
	Pass
	{
		AlphaBlendEnable=false
		AlphaTestEnable=false
		ZWriteEnable=true
		ZEnable=true
		ZFunc=LessEqual
		Diffuse=RGB(0,0,0)
		Ambient=RGB(0,0,0)
		Emissive=RGB(0,0,0)
		Lighting=false
		SpecularEnable=false
		CullMode=CCW
		FogEnable=false
		TerrainPosition( _black )
	}
	Layer=0
}


Shader TerrainPositionNoZ(
	Bitmap _black
)
{
	Pass
	{
		AlphaBlendEnable=false
		AlphaTestEnable=false
		ZWriteEnable=false
		ZEnable=true
		ZFunc=LessEqual
		Diffuse=RGB(0,0,0)
		Ambient=RGB(0,0,0)
		Emissive=RGB(0,0,0)
		Lighting=false
		SpecularEnable=false
		CullMode=None
		FogEnable=false
		TerrainPosition( _black )
	}
	Layer=0
}


Shader TerrainShadowHorizon( Bitmap _tx, Bitmap _horizon, CullMode _cull, Colour _tfactor )
{
	Pass
	{
		//SrcBlend=One
		//DestBlend=Zero
		SrcBlend=Zero
		//DestBlend=InvSrcColour
		DestBlend=SrcColour

		AlphaBlendEnable=true
		AlphaTestEnable=false
		SpecularEnable=false
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		

		TerrainShadow(_tx)
		HorizonShadowUVAlpha(_horizon,0)

		Lighting=false
		FogEnable=false
		
		
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=false
		CullMode=_cull
		TextureFactor=_tfactor
	}
	Layer=0
}


Shader TerrainTileBlueprint()
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true

		AlphaTestEnable=false

		SpecularEnable=false
		SpecularPower=0
		Specular=RGBA(0.0, 0.0, 0.0, 0.0)

		Diffuse = 1:RGBA(0.0, 0.0, 0.0, 0.0)
		Ambient = 1:RGBA(0.0, 0.0, 0.0, 0.0)
		Emissive = RGBA(0.0, 0.0, 0.0, 0.0)

		Lighting=true

		CullMode=none

		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=false
	}
	
	Layer=0
}


Shader VerySimpleWater( Colour _ambient, Colour _diffuse )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true

		AlphaTestEnable=false

		SpecularEnable=false

		Diffuse = 1:_diffuse
		Ambient = _ambient
		Emissive=RGB(0,0,0)

		Lighting=true

		CullMode=none

		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=true

		SIReflection( WaterEnvMap )
	}
	
	Layer=0
}


Shader VisibleFootprint( Bitmap _tx )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=true
		SpecularEnable=false
		
		Diffuse=1:RGB(1,1,1)
		Ambient=RGB(0.5,0.5,0.5)
		Emissive=RGB(0,0,0)
		CullMode=None
		ModulateAlpha(_tx,0)
		Lighting=false
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=false
	}
	Layer=0
}


Shader WaterCaustics( Bitmap _tx, Colour _col )
{
	Layer=0

	Pass
	{
		CullMode=CCW

		SrcBlend=One
		DestBlend=One

		AlphaBlendEnable=true
		AlphaTestEnable=false
		SpecularEnable=false
		
		//Diffuse=1:RGB(1,1,1)
		//Ambient=1:RGB(1,1,1)
		Diffuse=_col
		Ambient=_col
		Emissive=RGB(0,0,0)

		Lighting=true
		FogEnable=true
		
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=false	

		WaterCaustics(_tx)
	}
}


Shader Waterfall( Bitmap _tx, Bitmap _blend, Colour _diffuse, float4x4 _transform1, float4x4 _transform2 )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=false
		SpecularEnable=false
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		
		Waterfall(_tx,0,_transform1)
		WaterfallB(_blend,0,_transform2)
		Lighting=1
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=false
		CullMode=none
	}
}


Shader WaterfallFloor( Bitmap _tx, Bitmap _blend, float4x4 _transform1, float4x4 _transform2 )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=false
		SpecularEnable=false
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		
		WaterfallFloor(_tx,0,_transform1)
		WaterfallFloorB(_blend,0,_transform2)
		Lighting=1
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=false
		CullMode=none
	}
}


Shader WaterfallFloorFroth( Bitmap _tx, Bitmap _blend, float4x4 _transform1, float4x4 _transform2 )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha
		AlphaBlendEnable=true
		AlphaTestEnable=false
		SpecularEnable=false
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		
		WaterfallFloorFroth(_tx,0,_transform1)
		WaterfallFloorFrothB(_blend,0,_transform2)
		Lighting=1
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=false
		CullMode=none
	}
}


Shader WaterRippleNeg( Bitmap _tx )
{
	Layer=0

	Pass
	{
		CullMode=none

		SrcBlend=Zero
		DestBlend=InvSrcColour

		AlphaBlendEnable=true
		AlphaTestEnable=false
		SpecularEnable=false
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)

		Lighting=false
		FogEnable=false
		
		//ZEnable=true
		ZEnable=false
		ZFunc=Always
		ZWriteEnable=false	

		AddToDest(_tx,0)
	}
}


Shader WaterRipplePos( Bitmap _tx )
{
	Layer=0

	Pass
	{
		CullMode=none

		SrcBlend=One
		DestBlend=One

		AlphaBlendEnable=true
		AlphaTestEnable=false
		SpecularEnable=false
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)

		Lighting=false
		FogEnable=false
		
		//ZEnable=true
		ZEnable=false
		ZFunc=Always
		ZWriteEnable=false	

		AddToDest(_tx,0)
	}
}


Shader WaterRippleSimple( Bitmap _tx )
{
	Layer=0

	Pass
	{
		CullMode=none

		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha

		AlphaBlendEnable=true
		AlphaTestEnable=false
		SpecularEnable=false
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)

		Lighting=false
		FogEnable=false
		
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=false	

		ModulateAlphaTile(_tx,0)
	}
}


Shader WaterStencil()
{
	Pass
	{
		AlphaBlendEnable=false
		AlphaTestEnable=false
		ZWriteEnable=true
		ZEnable=true
		ZFunc=LessEqual
		Lighting=false
		CullMode=none
	}
	Layer=0
}


Shader WaterTest( Bitmap _bmp )
{
	Pass
	{
		AlphaBlendEnable=false
		AlphaTestEnable=false
		ZWriteEnable=true
		ZEnable=true
		ZFunc=LessEqual
		Lighting=false
		SpecularEnable=false
		WaterTest( _bmp )
		CullMode=None
	}
	Layer=0
}


Shader WaypointHighlight( Bitmap _tx )
{
	Pass
	{
		SrcBlend=SrcAlpha
		DestBlend=InvSrcAlpha

		AlphaBlendEnable=true
		AlphaTestEnable=false
		AlphaRef=0x00000000
		AlphaFunc=Greater
		SpecularEnable=false
		
		Diffuse=1:RGB(1,1,1)
		Ambient=1:RGB(1,1,1)
		Emissive=RGB(0,0,0)
		CullMode=None
		WaypointHighlight(_tx,0)
		Lighting=false
		ZEnable=true
		ZFunc=LessEqual
		ZWriteEnable=false
	}
	Layer=0
}


Shader ZFillAlphaShader( Bitmap _tx )
{
	Pass
	{
		SrcBlend=Zero
		DestBlend=One
		AlphaBlendEnable=true
		AlphaTestEnable=true
		SpecularEnable=false
		
		Diffuse=1:RGB(0,0,0)
		Ambient=1:RGB(0,0,0)
		Emissive=RGB(0,0,0)
		CullMode=None
		ModulateTile(_tx,0)
		Lighting=0
		ZEnable=true
		ZFunc=Always
		ZWriteEnable=true
	}
	Layer=0
}


//****************************************
//** Downgrade
//****************************************

Downgrade SIEmissiveMaskReflection_AP( Bitmap _tx, CullMode _cull, Colour _col, Bitmap _envmap )
{
	Shader
	{
		Pass
		{
			SrcBlend=SrcAlpha
			DestBlend=InvSrcAlpha
			AlphaBlendEnable=true
			AlphaTestEnable=false
			SpecularEnable=false
			
			Diffuse=_col
			Ambient=_col
			Emissive=RGB(0,0,0)

			ModulateTile(_tx,0)
			ModulateAlphaAddColourTile(_tx,0)
			SIReflection(_envmap)
			Lighting=true
			ZEnable=true
			ZFunc=LessEqual
			ZWriteEnable=true
			CullMode=_cull
		}
		Layer=0
	}

	// As above, but without the SIReflection stage
	Shader
	{
		Pass
		{
			SrcBlend=SrcAlpha
			DestBlend=InvSrcAlpha
			AlphaBlendEnable=true
			AlphaTestEnable=false
			SpecularEnable=false
			
			Diffuse=_col
			Ambient=_col
			Emissive=RGB(0,0,0)

			ModulateTile(_tx,0)
			ModulateAlphaAddColourTile(_tx,0)
			Lighting=true
			ZEnable=true
			ZFunc=LessEqual
			ZWriteEnable=true
			CullMode=_cull
		}
		Layer=0
	}
}


Downgrade SIEmissiveMaskReflection_AV( Bitmap _tx, CullMode _cull, Bitmap _envmap )
{
	Shader
	{
		Pass
		{
			SrcBlend=SrcAlpha
			DestBlend=InvSrcAlpha
			AlphaBlendEnable=true
			AlphaTestEnable=false
			SpecularEnable=false
			
			Diffuse=1:RGB(1,1,1)
			Ambient=1:RGB(1,1,1)
			Emissive=RGB(0,0,0)

			ModulateTile(_tx,0)
			ModulateAlphaAddColourTile(_tx,0)
			SIReflection(_envmap)
			Lighting=true
			ZEnable=true
			ZFunc=LessEqual
			ZWriteEnable=true
			CullMode=_cull
		}
		Layer=0
	}

	// As above, but without the relfection stage
	Shader
	{
		Pass
		{
			SrcBlend=SrcAlpha
			DestBlend=InvSrcAlpha
			AlphaBlendEnable=true
			AlphaTestEnable=false
			SpecularEnable=false
			
			Diffuse=1:RGB(1,1,1)
			Ambient=1:RGB(1,1,1)
			Emissive=RGB(0,0,0)

			ModulateTile(_tx,0)
			ModulateAlphaAddColourTile(_tx,0)
			Lighting=true
			ZEnable=true
			ZFunc=LessEqual
			ZWriteEnable=true
			CullMode=_cull
		}
		Layer=0
	}
}


Downgrade SIEmissiveMaskReflection_O( Bitmap _tx, CullMode _cull, Bitmap _envmap )
{
	Shader
	{
		Pass
		{
			SrcBlend=One
			DestBlend=Zero
			AlphaBlendEnable=true
			AlphaTestEnable=false
			SpecularEnable=false
			
			Diffuse=1:RGB(1,1,1)
			Ambient=1:RGB(1,1,1)
			Emissive=RGB(0,0,0)

			ModulateTile(_tx,0)
			ModulateAlphaAddColourTile(_tx,0)
			SIReflection(_envmap)
			Lighting=true
			ZEnable=true
			ZFunc=LessEqual
			ZWriteEnable=true
			CullMode=_cull
		}
		Layer=0
	}

	// As above, but without the reflection stage
	Shader
	{
		Pass
		{
			SrcBlend=One
			DestBlend=Zero
			AlphaBlendEnable=true
			AlphaTestEnable=false
			SpecularEnable=false
			
			Diffuse=1:RGB(1,1,1)
			Ambient=1:RGB(1,1,1)
			Emissive=RGB(0,0,0)

			ModulateTile(_tx,0)
			ModulateAlphaAddColourTile(_tx,0)
			Lighting=true
			ZEnable=true
			ZFunc=LessEqual
			ZWriteEnable=true
			CullMode=_cull
		}
		Layer=0
	}
}


Downgrade SIEmissiveMaskSpecular100Reflection_AP( Bitmap _tx, CullMode _cull, Colour _col, Bitmap _envmap )
{
	Shader
	{
		Pass
		{
			SrcBlend=SrcAlpha
			DestBlend=InvSrcAlpha
			AlphaBlendEnable=true
			AlphaTestEnable=false

			SpecularEnable=true
			SpecularPower=20
			Specular=RGB(1,1,1)
			
			Diffuse=_col
			Ambient=_col
			Emissive=RGB(0,0,0)

			ModulateTile(_tx,0)
			ModulateAlphaAddColourTile(_tx,0)
			SIReflection(_envmap)
			Lighting=true
			ZEnable=true
			ZFunc=LessEqual
			ZWriteEnable=true
			CullMode=_cull
		}
		Layer=0
	}

	// As above, but without the reflection stage
	Shader
	{
		Pass
		{
			SrcBlend=SrcAlpha
			DestBlend=InvSrcAlpha
			AlphaBlendEnable=true
			AlphaTestEnable=false

			SpecularEnable=true
			SpecularPower=20
			Specular=RGB(1,1,1)
			
			Diffuse=_col
			Ambient=_col
			Emissive=RGB(0,0,0)

			ModulateTile(_tx,0)
			ModulateAlphaAddColourTile(_tx,0)
			Lighting=true
			ZEnable=true
			ZFunc=LessEqual
			ZWriteEnable=true
			CullMode=_cull
		}
		Layer=0
	}
}


Downgrade SIEmissiveMaskSpecular100Reflection_AV( Bitmap _tx, CullMode _cull, Bitmap _envmap )
{
	Shader
	{
		Pass
		{
			SrcBlend=SrcAlpha
			DestBlend=InvSrcAlpha
			AlphaBlendEnable=true
			AlphaTestEnable=false

			SpecularEnable=true
			SpecularPower=20
			Specular=RGB(1,1,1)
			
			Diffuse=1:RGB(1,1,1)
			Ambient=1:RGB(1,1,1)
			Emissive=RGB(0,0,0)

			ModulateTile(_tx,0)
			ModulateAlphaAddColourTile(_tx,0)
			SIReflection(_envmap)
			Lighting=true
			ZEnable=true
			ZFunc=LessEqual
			ZWriteEnable=true
			CullMode=_cull
		}
		Layer=0
	}

	// As above, but without the reflection stage
	Shader
	{
		Pass
		{
			SrcBlend=SrcAlpha
			DestBlend=InvSrcAlpha
			AlphaBlendEnable=true
			AlphaTestEnable=false

			SpecularEnable=true
			SpecularPower=20
			Specular=RGB(1,1,1)
			
			Diffuse=1:RGB(1,1,1)
			Ambient=1:RGB(1,1,1)
			Emissive=RGB(0,0,0)

			ModulateTile(_tx,0)
			ModulateAlphaAddColourTile(_tx,0)
			Lighting=true
			ZEnable=true
			ZFunc=LessEqual
			ZWriteEnable=true
			CullMode=_cull
		}
		Layer=0
	}
}


Downgrade SIEmissiveMaskSpecular100Reflection_O( Bitmap _tx, CullMode _cull, Bitmap _envmap )
{
	Shader
	{
		Pass
		{
			SrcBlend=One
			DestBlend=Zero
			AlphaBlendEnable=true
			AlphaTestEnable=false

			SpecularEnable=true
			SpecularPower=20
			Specular=RGB(1,1,1)
			
			Diffuse=1:RGB(1,1,1)
			Ambient=1:RGB(1,1,1)
			Emissive=RGB(0,0,0)

			ModulateTile(_tx,0)
			ModulateAlphaAddColourTile(_tx,0)
			SIReflection(_envmap)
			Lighting=true
			ZEnable=true
			ZFunc=LessEqual
			ZWriteEnable=true
			CullMode=_cull
		}
		Layer=0
	}

	// as above, but without the reflection stage
	Shader
	{
		Pass
		{
			SrcBlend=One
			DestBlend=Zero
			AlphaBlendEnable=true
			AlphaTestEnable=false

			SpecularEnable=true
			SpecularPower=20
			Specular=RGB(1,1,1)
			
			Diffuse=1:RGB(1,1,1)
			Ambient=1:RGB(1,1,1)
			Emissive=RGB(0,0,0)

			ModulateTile(_tx,0)
			ModulateAlphaAddColourTile(_tx,0)
			Lighting=true
			ZEnable=true
			ZFunc=LessEqual
			ZWriteEnable=true
			CullMode=_cull
		}
		Layer=0
	}
}


Downgrade SIEmissiveMaskSpecular50Reflection_AP( Bitmap _tx, CullMode _cull, Colour _col, Bitmap _envmap )
{
	Shader
	{
		Pass
		{
			SrcBlend=SrcAlpha
			DestBlend=InvSrcAlpha
			AlphaBlendEnable=true
			AlphaTestEnable=false

			SpecularEnable=true
			SpecularPower=20
			Specular=RGB(0.55,0.55,0.55)
			
			Diffuse=_col
			Ambient=_col
			Emissive=RGB(0,0,0)

			ModulateTile(_tx,0)
			ModulateAlphaAddColourTile(_tx,0)
			SIReflection(_envmap)
			Lighting=true
			ZEnable=true
			ZFunc=LessEqual
			ZWriteEnable=true
			CullMode=_cull
		}
		Layer=0
	}

	// As above, but without the reflection stage
	Shader
	{
		Pass
		{
			SrcBlend=SrcAlpha
			DestBlend=InvSrcAlpha
			AlphaBlendEnable=true
			AlphaTestEnable=false

			SpecularEnable=true
			SpecularPower=20
			Specular=RGB(0.55,0.55,0.55)
			
			Diffuse=_col
			Ambient=_col
			Emissive=RGB(0,0,0)

			ModulateTile(_tx,0)
			ModulateAlphaAddColourTile(_tx,0)
			Lighting=true
			ZEnable=true
			ZFunc=LessEqual
			ZWriteEnable=true
			CullMode=_cull
		}
		Layer=0
	}
}


Downgrade SIEmissiveMaskSpecular50Reflection_AV( Bitmap _tx, CullMode _cull, Bitmap _envmap )
{
	Shader
	{
		Pass
		{
			SrcBlend=SrcAlpha
			DestBlend=InvSrcAlpha
			AlphaBlendEnable=true
			AlphaTestEnable=false

			SpecularEnable=true
			SpecularPower=20
			Specular=RGB(0.55,0.55,0.55)
			
			Diffuse=1:RGB(1,1,1)
			Ambient=1:RGB(1,1,1)
			Emissive=RGB(0,0,0)

			ModulateTile(_tx,0)
			ModulateAlphaAddColourTile(_tx,0)
			SIReflection(_envmap)
			Lighting=true
			ZEnable=true
			ZFunc=LessEqual
			ZWriteEnable=true
			CullMode=_cull
		}
		Layer=0
	}

	// As above, but without the reflection stage
	Shader
	{
		Pass
		{
			SrcBlend=SrcAlpha
			DestBlend=InvSrcAlpha
			AlphaBlendEnable=true
			AlphaTestEnable=false

			SpecularEnable=true
			SpecularPower=20
			Specular=RGB(0.55,0.55,0.55)
			
			Diffuse=1:RGB(1,1,1)
			Ambient=1:RGB(1,1,1)
			Emissive=RGB(0,0,0)

			ModulateTile(_tx,0)
			ModulateAlphaAddColourTile(_tx,0)
			Lighting=true
			ZEnable=true
			ZFunc=LessEqual
			ZWriteEnable=true
			CullMode=_cull
		}
		Layer=0
	}
}


Downgrade SIEmissiveMaskSpecular50Reflection_O( Bitmap _tx, CullMode _cull, Bitmap _envmap )
{
	Shader
	{
		Pass
		{
			SrcBlend=One
			DestBlend=Zero
			AlphaBlendEnable=true
			AlphaTestEnable=false

			SpecularEnable=true
			SpecularPower=20
			Specular=RGB(0.55,0.55,0.55)
			
			Diffuse=1:RGB(1,1,1)
			Ambient=1:RGB(1,1,1)
			Emissive=RGB(0,0,0)

			ModulateTile(_tx,0)
			ModulateAlphaAddColourTile(_tx,0)
			SIReflection(_envmap)
			Lighting=true
			ZEnable=true
			ZFunc=LessEqual
			ZWriteEnable=true
			CullMode=_cull
		}
		Layer=0
	}

	// As above, but without the reflection stage
	Shader
	{
		Pass
		{
			SrcBlend=One
			DestBlend=Zero
			AlphaBlendEnable=true
			AlphaTestEnable=false

			SpecularEnable=true
			SpecularPower=20
			Specular=RGB(0.55,0.55,0.55)
			
			Diffuse=1:RGB(1,1,1)
			Ambient=1:RGB(1,1,1)
			Emissive=RGB(0,0,0)

			ModulateTile(_tx,0)
			ModulateAlphaAddColourTile(_tx,0)
			Lighting=true
			ZEnable=true
			ZFunc=LessEqual
			ZWriteEnable=true
			CullMode=_cull
		}
		Layer=0
	}
}


Downgrade SIOpaqueGlossSpecular(
	Bitmap		_baseBitmap,
	CullMode	_cull,
	Colour		_diffuse,
	Colour		_specular,
	bool		_alphaBlend,
	bool		_vertexDiffuse
)
{
	Shader
	{
		Pass
		{
			SrcBlend=SrcAlpha
			DestBlend=InvSrcAlpha
			AlphaBlendEnable=_alphaBlend
			AlphaTestEnable=false
			SpecularEnable=false
			SpecularPower=20
			Ambient=_vertexDiffuse:_diffuse
			Diffuse=_vertexDiffuse:_diffuse
			Specular=_specular
			Emissive=RGB(0,0,0)
			CullMode=_cull
			ModulateAlphaTile(_baseBitmap,0)
			TextureStage
			{
				Colour=ModulateAlphaAddColour(Current,Specular)
				Alpha=Select(Diffuse)
			}
			Lighting=true
			ZEnable=true
			ZFunc=LessEqual
			ZWriteEnable=true
		}
	}

	Shader	// 2 pass Radeon 7x00 fallback (dodgy drivers mean that D3DTA_SPECULAR isn't initialised if !D3DRS_SPECULARENABLE)
	{
		Pass	// apply base texture
		{
			SrcBlend=SrcAlpha
			DestBlend=InvSrcAlpha
			AlphaBlendEnable=_alphaBlend
			AlphaTestEnable=false
			SpecularEnable=false
			Ambient=_vertexDiffuse:_diffuse
			Diffuse=_vertexDiffuse:_diffuse
			Specular=RGB(0,0,0)
			Emissive=RGB(0,0,0)
			CullMode=_cull
			TextureStage
			{
				Colour=Modulate(Texture,Current)
				Alpha=Select(Current)
				TextureCoordIndex=0
				Address=Tile
				MagFilter=Linear
				MinFilter=Linear
				MipFilter=Linear
				Bitmap=_baseBitmap
			}
			Lighting=true
			ZEnable=true
			ZWriteEnable=true
		}
		Pass	// apply specular using specular mask
		{
			SrcBlend=SrcAlpha
			DestBlend=One
			AlphaBlendEnable=true
			AlphaTestEnable=true
			AlphaFunc=GreaterEqual
			AlphaRef=0x08
			SpecularEnable=true
			SpecularPower=20
			Ambient=RGB(0,0,0)
			Diffuse=RGB(0,0,0)
			Specular=_specular
			Emissive=RGB(0,0,0)
			FogEnable=false
			CullMode=_cull
			ModulateAlphaTile(_baseBitmap,0)
			ColourWriteEnable=0x07
			Lighting=true
			ZEnable=true
			ZWriteEnable=false
		}
		Layer=0
	}
}


//****************************************
//** TextureStyle
//****************************************

TextureStyle AddToDest()
{
	Downgrade
	{
		
		Shader
		{
			Layer=0

			Pass
			{
				SrcBlend=One
				DestBlend=One
				AlphaBlendEnable=true
				AlphaTestEnable=false
				SpecularEnable=false
				Lighting=false
				FogEnable=false
				ZEnable=false
				CullMode=None
			}
		}
	}
}


TextureStyle AdTexture( CullMode _cull=CCW, bool _alpha = false, bool _alphaFromParam = false, Colour _col=RGB(1,1,1) )
:	flic StandardFlic
{
	Downgrade
	{
		AdTexture( StandardFlic[GameTime], _cull )
	}
}


TextureStyle AlphaBitmap( Bitmap _tx )
{
	Downgrade
	{
		Shader
		{
			Pass
			{
				SrcBlend=SrcAlpha
				DestBlend=InvSrcAlpha
				AlphaBlendEnable=true

				AlphaTestEnable=false

				SpecularEnable=false
				//SpecularPower=1
				//Specular=RGBA(0.0, 0.0, 0.0, 0.0)

				Ambient = 1:RGBA(1.0, 1.0, 1.0, 1.0)
				Diffuse = 1:RGBA(1.0, 1.0, 1.0, 1.0)
				Emissive = RGBA(0.0, 0.0, 0.0, 0.0)

				Lighting=false
				FogEnable=false

				CullMode=none

				ZEnable=true
				ZFunc=lessequal
				ZWriteEnable=false

				TextureStage
				{
					Colour=Modulate(Texture,Current)
					Alpha=Modulate(Texture,Current)
					TextureCoordIndex=0
					Address=Tile
					MagFilter=Linear
					MinFilter=Linear
					MipFilter=Linear
					TextureTransformType=Off
					Bitmap=_tx
					MipMapLODBias=0.0
				}
			}
			
			Layer=0
		}
	}
}


TextureStyle AlphaMaskBitmap( Bitmap _tx )
{
	Downgrade
	{
		AlphaMaskBitmap( _tx )
	}
}


TextureStyle AlphaMaskFadeBitmap( Bitmap _tx, Bitmap _tx2 )
{
	Downgrade
	{
		AlphaMaskFadeBitmap( _tx, _tx2 )
	}
}


TextureStyle Background( CullMode _cull = CCW )
:	flic StandardFlic
{
	Downgrade
	{
		Background( StandardFlic[GameTime], _cull )
	}
}


TextureStyle BillboardBlack()
:	flic StandardFlic
{
	Downgrade
	{
		BillboardBlack( StandardFlic[GameTime] ) // select the flic frame based on game time.
	}
}


TextureStyle BillboardBlueprint()
:	flic StandardFlic
{
	Downgrade
	{
		BillboardBlueprint( StandardFlic[GameTime] ) // select the flic frame based on game time.
	}
}


TextureStyle BillboardShadowAlphaMask( Bitmap _tx=0, CullMode _cull=CCW )
{
	Downgrade
	{
		BillboardShadowAlphaMask( _tx, _cull )
	}
}

TextureStyle BillboardStandard( Bitmap _lightmap = ChromeEnvMap, bool _alpha = false )
:	flic StandardFlic
{
	Downgrade
	{
		BillboardStandard_AV( _lightmap, StandardFlic[GameTime] )
	} : _alpha

	Downgrade
	{
		BillboardStandard_O( _lightmap, StandardFlic[GameTime] )
	}
}


TextureStyle ClothShinyAlpha( Colour _diffuse=RGBA(1,1,1,1) )
:	flic StandardFlic
{
	Downgrade
	{
		ClothShinyAlpha( StandardFlic[GameTime], _diffuse, ShinyEnvMap, CCW )
		PreLitTexTile( StandardFlic[GameTime], CCW ) // select the flic frame based on game time.
	}
}


TextureStyle CloudsUVScroll( Bitmap _tx, Bitmap _tx2, Colour _col=RGB(1,1,1), bool _destAlpha = true )
{
	Downgrade
	{
		CloudsUVScroll( _tx, _tx2, _col )
	} : _destAlpha

	Downgrade
	{
		CloudsUVScrollNoDestAlpha( _tx, _tx2, _col )
	}
}


TextureStyle CloudsUVScrollB( CullMode _cull )
:	flic Clouds,
	flic CloudsAlpha
{
	Downgrade
	{
		CloudsUVScrollB( Clouds[GameTime], CloudsAlpha[GameTime] )
	}
}


TextureStyle DrawSolidColourNoZ()
{
  Downgrade
  {
    Shader
    {
       Pass
       {
           SrcBlend=SrcAlpha
		   DestBlend=InvSrcAlpha
		   AlphaBlendEnable=true
           Lighting=false
           ZEnable=false
           CullMode=None
       }
     }
   }
}

TextureStyle EnvMap()
:	flic StandardFlic
{
	Downgrade
	{
		EnvMap( StandardFlic[GameTime] )
	}
}


TextureStyle FlatTag( Bitmap _bitmap )
{
	Downgrade
	{
		FlatTag( _bitmap )
	}
}


TextureStyle FullscreenFadeToBlack(
)
{
	Downgrade
	{
		Shader
		{
			Pass
			{
				AlphaBlendEnable=true
				AlphaTestEnable=false
				SrcBlend=SrcAlpha
				DestBlend=InvSrcAlpha
				AlphaFunc=GreaterEqual
				AlphaRef=0x0f

				ZEnable=false         
				ZWriteEnable=false
				ZFunc=LessEqual
				CullMode=None

				Lighting=false
				FogEnable=false
				Diffuse=1:RGB(1,1,1)

				TextureStage
				{
					Colour=Select(Current)
					Alpha=Select(Current)
					MinFilter=None
					MagFilter=None
					MipFilter=None
					TextureCoordIndex=0
					Address=Clamp
					TextureTransformType=Off
				}
			}
		}	
	}
}

TextureStyle FullscreenModulateX2( bool _zEnable = true )
:	flic StandardFlic
{
	Downgrade
	{
		FullscreenModulateX2( StandardFlic[GameTime], _zEnable )
	}
}


TextureStyle FullscreenModulateX2NoBitmap( bool _zEnable = true )
{
	Downgrade
	{
		FullscreenModulateX2NoBitmap( _zEnable )
	}
}


TextureStyle GuiIcon()
:	flic StandardFlic
{
	Downgrade
	{
		GuiIconShader( StandardFlic[GameTime] ) // select the flic frame based on game time.
	}
}


TextureStyle GUIRendererBitmap( Bitmap _bmp = 0 )
{
	Downgrade
	{
		GUIRendererBitmap( _bmp )
	}
}


TextureStyle GUIRendererColour()
{
	Downgrade
	{
		GUIRendererColour()
	}
}


TextureStyle GUIRendererZMask( Flic _flic = 0, int _alphaRef = 0 )
{
	Downgrade
	{
		GUIRendererZMask( _flic[GameTime], _alphaRef )
	}
}


TextureStyle GUISkin()
:	flic StandardFlic
{
	Downgrade
	{
		GUISkin( StandardFlic[GameTime] ) // select the flic frame based on game time.
	}
}


TextureStyle GUISkinTile()
:	flic StandardFlic
{
	Downgrade
	{
		GUISkinTile( StandardFlic[GameTime] ) // select the flic frame based on game time.
	}
}


TextureStyle GUISolidColour( )
{
	Downgrade
	{
		GUISolidColour()
	}
}


TextureStyle GUISolidColourOpaque( )
{
	Downgrade
	{
		GUISolidColourOpaque()
	}
}


TextureStyle HorizonLight( CullMode _cull=CCW )
:	flic StandardFlic
{
	Downgrade
	{
		HorizonLight( StandardFlic[GameTime], _cull )
	}
}


TextureStyle HorizonShadow( CullMode _cull=CCW )
:	flic StandardFlic
{
	Downgrade
	{
		HorizonShadow( StandardFlic[GameTime], _cull )
	}
}


TextureStyle HorizonShadowUV( CullMode _cull=CCW )
:	flic StandardFlic
{
	Downgrade
	{
		HorizonShadowUV( StandardFlic[GameTime], _cull )
	}
}


TextureStyle LapWater()
:	flic StandardFlic
{
	Downgrade
	{
		LapWater( StandardFlic[GameTime] )
	}
}


TextureStyle LaserCapTS(
) :
	flic _flic
{
	Downgrade
	{
		Shader
		{
			Pass
			{
				AlphaBlendEnable=true
				AlphaTestEnable=false
				SrcBlend=SrcAlpha
				DestBlend=One
				AlphaFunc=GreaterEqual
				AlphaRef=0x0f

				ZEnable=true         
				ZWriteEnable=false
				ZFunc=LessEqual
				CullMode=None

				Lighting=false
				FogEnable=false
				Diffuse=1:RGB(1,1,1)

				TextureStage
				{
					Colour=Modulate(Texture,Diffuse)
					Alpha=Modulate(Texture,Diffuse)
					MinFilter=Linear
					MagFilter=Linear
					MipFilter=Linear
					TextureCoordIndex=0
					Address=Clamp
					TextureTransformType=Off
					Bitmap=_flic[GameTime]
				}
			}

			Layer=0
		}	
	}
}

TextureStyle LaserTS(
) :
	flic _flic
{
	Downgrade
	{
		Shader
		{
			Pass
			{
				AlphaBlendEnable=true
				AlphaTestEnable=false
				SrcBlend=SrcAlpha
				DestBlend=One
				AlphaFunc=GreaterEqual
				AlphaRef=0x0f

				ZEnable=true         
				ZWriteEnable=false
				ZFunc=LessEqual
				CullMode=None

				Lighting=false
				FogEnable=false
				Diffuse=1:RGB(1,1,1)

				TextureStage
				{
					Colour=Modulate(Texture,Current)
					Alpha=Modulate(Texture,Current)
					MinFilter=Linear
					MagFilter=Linear
					MipFilter=Linear
					TextureCoordIndex=0
					Address=Tile
					TextureTransformType=Off
					Bitmap=_flic[GameTime]
				}
			}

			Layer=0
		}	
	}
}

TextureStyle LightVolumeBack( )
:	flic StandardFlic
{
	Downgrade
	{
		LightVolumeBack()
	}
}


TextureStyle LightVolumeBackAlways( )
:	flic StandardFlic
{
	Downgrade
	{
		LightVolumeBackAlways()
	}
}


TextureStyle LightVolumeFront( )
:	flic StandardFlic
{
	Downgrade
	{
		LightVolumeFront( StandardFlic[GameTime] )
	}
}


TextureStyle MoviePlayback(
)
: Flic _flic
{
	Downgrade
	{
		MoviePlayback( _flic[GameTime] )
	}
}

TextureStyle ParticleAdditive()
:	flic StandardFlic
{
	Downgrade
	{
		ParticleAdditive( StandardFlic[GameTime] )
	}
}


TextureStyle ParticleAdditiveBias()
:	flic StandardFlic
{
	Downgrade
	{
		ParticleAdditive( StandardFlic[GameTime] )
	}
}


TextureStyle ParticleBurnTrail()
:	flic StandardFlic
{
	Downgrade
	{
		ParticleBurnTrail( StandardFlic[GameTime] )
	}
}


TextureStyle ParticlePreMultipliedAlpha()
:	flic StandardFlic
{
	Downgrade
	{
		ParticlePreMultipliedAlpha( StandardFlic[GameTime] )
	}
}


TextureStyle PathArrow( Bitmap _tx )
{
	Downgrade
	{
		Shader
		{
			Pass
			{
				SrcBlend=SrcAlpha
				DestBlend=InvSrcAlpha
				AlphaBlendEnable=true

				AlphaTestEnable=false

				SpecularEnable=false
				//SpecularPower=1
				//Specular=RGBA(0.0, 0.0, 0.0, 0.0)

				Ambient = 1:RGBA(1.0, 1.0, 1.0, 1.0)
				Diffuse = 1:RGBA(1.0, 1.0, 1.0, 1.0)
				Emissive = RGBA(0.0, 0.0, 0.0, 0.0)

				Lighting=false
				FogEnable=false

				CullMode=none

				ZEnable=true
				ZFunc=lessequal
				ZWriteEnable=false

				TextureStage
				{
					Colour=Modulate(Texture,Current)
					Alpha=Modulate(Texture,Current)
					TextureCoordIndex=0
					Address=Tile
					MagFilter=Linear
					MinFilter=Linear
					MipFilter=Linear
					TextureTransformType=Off
					Bitmap=_tx
					MipMapLODBias=0.0
				}
			}
			
			Layer=0
		}
	}
}


TextureStyle PathBlueprint( )
:	flic StandardFlic
{
	Downgrade
	{
		PathBlueprint()
	}
}


TextureStyle PathGround( Bitmap _lightmap = ChromeEnvMap, bool _alpha=0, Colour _diffuse=RGBA(1,1,1,1)  )
:	flic StandardFlic
{
	Downgrade
	{
		PathGroundAlpha( StandardFlic[GameTime], _diffuse ) // select the flic frame based on game time.
	} : _alpha

	Downgrade
	{
		PathGround( _lightmap, StandardFlic[GameTime], _diffuse ) // select the flic frame based on game time.
	}
}


TextureStyle People()
:	flic StandardFlic
{
	Downgrade
	{
		People( StandardFlic[GameTime] )
	}
}


TextureStyle PeopleAlphaTest()
:	flic StandardFlic
{
	Downgrade
	{
		PeopleAlphaTest( StandardFlic[GameTime] )
	}
}


TextureStyle PeopleEnvMap( 
)
:	flic StandardFlic
{
	Downgrade
	{
		PeopleEnvMap( StandardFlic[GameTime], ShinyEnvMap )
	}
}

TextureStyle PipeInfo(
) :
	flic _flic
{
	Downgrade
	{
		Shader
		{
			Pass
			{
				AlphaBlendEnable=true
				AlphaTestEnable=false
				SrcBlend=SrcAlpha
				DestBlend=One
				AlphaFunc=GreaterEqual
				AlphaRef=0x0f

				ZEnable=false         
				ZWriteEnable=false
				ZFunc=LessEqual
				CullMode=None

				Lighting=false
				FogEnable=false
				Diffuse=1:RGB(1,1,1)

				TextureStage
				{
					Colour=Modulate(Texture,Diffuse)
					Alpha=Modulate(Texture,Diffuse)
					MinFilter=Linear
					MagFilter=Linear
					MipFilter=Linear
					TextureCoordIndex=0
					Address=Tile
					TextureTransformType=Off
					Bitmap=_flic[GameTime]
				}
			}

			Layer=0
		}	
	}
}

TextureStyle PipePreviewGrid(
) :
	flic _grid,
	flic _blur
{
	Downgrade
	{
		Shader
		{
			Pass
			{
				AlphaBlendEnable=true
				AlphaTestEnable=true
				SrcBlend=SrcAlpha
				DestBlend=InvSrcAlpha
				AlphaFunc=GreaterEqual
				AlphaRef=0x0f

				ZEnable=true
				ZWriteEnable=true
				ZFunc=LessEqual
				CullMode=None

				Lighting=false
				FogEnable=false
				Diffuse=1:RGB(1,1,1)

				TextureStage
				{
					Colour=Modulate(Texture,Diffuse)
					Alpha=Modulate(Texture,Diffuse)
					MinFilter=Linear
					MagFilter=Linear
					MipFilter=Linear
					TextureCoordIndex=0
					Address=Tile
					TextureTransformType=Off
					Bitmap=_grid[GameTime]
					MipMapLODBias=0.0
				}

				TextureStage
				{
					Colour=Select(Current)
					Alpha=Modulate(Current, Texture)
					MinFilter=Linear
					MagFilter=Linear
					MipFilter=Linear
					TextureCoordIndex=1
					Address=Clamp
					TextureTransformType=Off
					Bitmap=_blur[GameTime]
					MipMapLODBias=0.0
				}
			}

			Layer=0
		}	
	}
}

TextureStyle PipePreviewPipeRep(
) :
	flic _flic
{
	Downgrade
	{
		Shader
		{
			Pass
			{
				AlphaBlendEnable=true
				AlphaTestEnable=true
				SrcBlend=SrcAlpha
				DestBlend=InvSrcAlpha
				AlphaFunc=GreaterEqual
				AlphaRef=0x0f

				ZEnable=true
				ZWriteEnable=true
				ZFunc=LessEqual
				CullMode=None

				Lighting=false
				FogEnable=false
				Diffuse=1:RGB(1,1,1)

				TextureStage
				{
					Colour=Modulate(Texture,Diffuse)
					Alpha=Modulate(Texture,Diffuse)
					MinFilter=Linear
					MagFilter=Linear
					MipFilter=Linear
					TextureCoordIndex=1
					Address=Tile
					TextureTransformType=Off
					Bitmap=_flic[GameTime]
					MipMapLODBias=0.0
				}
			}

			Layer=0
		}	
	}
}

TextureStyle PipePreviewSurround(
) :
	flic _flic
{
	Downgrade
	{
		Shader
		{
			Pass
			{
				AlphaBlendEnable=true
				AlphaTestEnable=true
				SrcBlend=SrcAlpha
				DestBlend=InvSrcAlpha
				AlphaFunc=GreaterEqual
				AlphaRef=0x0f

				ZEnable=true
				ZWriteEnable=true
				ZFunc=LessEqual
				CullMode=None

				Lighting=false
				FogEnable=false
				Diffuse=1:RGB(1,1,1)

				TextureStage
				{
					Colour=Modulate(Texture,Diffuse)
					Alpha=Modulate(Texture,Diffuse)
					MinFilter=Linear
					MagFilter=Linear
					MipFilter=Linear
					TextureCoordIndex=1
					Address=Tile
					TextureTransformType=Off
					Bitmap=_flic[GameTime]
					MipMapLODBias=0.0
				}
			}

			Layer=0
		}	
	}
}

TextureStyle PoolPreviewGrid(
) :
	flic _flic
{
	Downgrade
	{
		Shader
		{
			Pass
			{
				AlphaBlendEnable=true
				AlphaTestEnable=true
				SrcBlend=SrcAlpha
				DestBlend=InvSrcAlpha
				AlphaFunc=GreaterEqual
				AlphaRef=0x0f

				ZEnable=true
				ZWriteEnable=true
				ZFunc=LessEqual
				CullMode=CCW

				Lighting=false
				FogEnable=false
				Diffuse=1:RGB(1,1,1)

				TextureStage
				{
					Colour=Modulate(Texture,Diffuse)
					Alpha=Modulate(Texture,Diffuse)
					MinFilter=Linear
					MagFilter=Linear
					MipFilter=Linear
					TextureCoordIndex=0
					Address=Tile
					TextureTransformType=Off
					Bitmap=_flic[GameTime]
					MipMapLODBias=0.0
				}
			}

			Layer=0
		}	
	}
}

TextureStyle PoolPreviewGrid2(
) :
	flic _grid,
	flic _blur
{
	Downgrade
	{
		Shader
		{
			Pass
			{
				AlphaBlendEnable=true
				AlphaTestEnable=true
				SrcBlend=SrcAlpha
				DestBlend=InvSrcAlpha
				AlphaFunc=GreaterEqual
				AlphaRef=0x0f

				ZEnable=true
				ZWriteEnable=true
				ZFunc=LessEqual
				CullMode=CCW

				Lighting=false
				FogEnable=false
				Diffuse=1:RGB(1,1,1)

				TextureStage
				{
					Colour=Modulate(Texture,Diffuse)
					Alpha=Modulate(Texture,Diffuse)
					MinFilter=Linear
					MagFilter=Linear
					MipFilter=Linear
					TextureCoordIndex=0
					Address=Tile
					TextureTransformType=Off
					Bitmap=_grid[GameTime]
					MipMapLODBias=0.0
				}

				TextureStage
				{
					Colour=Select(Current)
					Alpha=Modulate(Current, Texture)
					MinFilter=Linear
					MagFilter=Linear
					MipFilter=Linear
					TextureCoordIndex=1
					Address=Clamp
					TextureTransformType=Off
					Bitmap=_blur[GameTime]
					MipMapLODBias=0.0
				}
			}

			Layer=0
		}	
	}
}

TextureStyle PoolStencilMask()
{
	Downgrade
	{
		Shader
		{
			Pass
			{
				SrcBlend=Zero
				DestBlend=One
				AlphaBlendEnable=true

				AlphaTestEnable=false

				SpecularEnable=false

				Ambient = 1:RGBA(1.0, 1.0, 1.0, 1.0)
				Diffuse = 1:RGBA(1.0, 1.0, 1.0, 1.0)
				Emissive = RGBA(0.0, 0.0, 0.0, 0.0)

				Lighting=false
				FogEnable=false

				CullMode=CCW

				ZEnable=true
				ZFunc=lessequal
				ZWriteEnable=false
			}
			
			Layer=0
		}
	}
}


TextureStyle Rope( CullMode _cull=None, bool _alpha = false, bool _alphaFromParam = false, Colour _col=RGB(1,1,1) )
:	flic StandardFlic
{
	Downgrade
	{
		Rope( StandardFlic[GameTime], _cull )
	}
}


TextureStyle ScreenDistortion( Bitmap _tx )
{
	Downgrade
	{
		Shader
		{
			Pass
			{
				SrcBlend=SrcAlpha
				DestBlend=InvSrcAlpha
				AlphaBlendEnable=true

				AlphaTestEnable=false

				SpecularEnable=false
				//SpecularPower=1
				//Specular=RGBA(0.0, 0.0, 0.0, 0.0)

				Ambient = 1:RGBA(1.0, 1.0, 1.0, 1.0)
				Diffuse = 1:RGBA(1.0, 1.0, 1.0, 1.0)
				Emissive = RGBA(0.0, 0.0, 0.0, 0.0)

				Lighting=false
				FogEnable=false

				CullMode=none

				ZEnable=false
				ZFunc=always
				ZWriteEnable=false

				TextureStage
				{
					Colour=Select(Texture)
					Alpha=Select(Current)
					TextureCoordIndex=0
					Address=Clamp
					MagFilter=Linear
					MinFilter=Linear
					MipFilter=None
					TextureTransformType=Off
					Bitmap=_tx
					MipMapLODBias=0.0
				}
			}
			
			Layer=0
		}
	}
}


TextureStyle ShadowAlphaMaskSolidColourBillboard( CullMode _cull=CCW, Colour _col=RGB(1,1,1) )
:	flic StandardFlic
{
	Downgrade
	{
		ShadowAlphaMaskSolidColourBillboard( StandardFlic[GameTime], _cull, _col )
	}
}


TextureStyle ShadowCopy( CullMode _cull=CCW )
:	flic StandardFlic
{
	Downgrade
	{
		ShadowCopy( StandardFlic[GameTime], _cull )
	}
}


TextureStyle ShadowDestAlphaCombine(
)
{
	Downgrade
	{
		Shader
		{
			Pass
			{
				SrcBlend=DestColour
				DestBlend=DestAlpha
				AlphaBlendEnable=true
				AlphaTestEnable=false
				SpecularEnable=false
				Lighting=false
				FogEnable=false
				ZEnable=false
				CullMode=none
			}
			Layer=0
		}
	}
}


TextureStyle ShadowDrawSolidColour(
)
{
	Downgrade
	{
		Shader
		{
			Pass
			{
				SrcBlend=SrcAlpha
				DestBlend=InvSrcAlpha
				AlphaBlendEnable=true
				AlphaTestEnable=false
				SpecularEnable=false
				FogEnable=false
				Lighting=false
				ZEnable=false
				CullMode=None
			}
			Layer=0
		}
	}
}


TextureStyle ShapeAll( CullMode _cull=CCW, bool _alpha = false, bool _alphaFromParam = false, Colour _col=RGB(1,1,1) )
:	flic StandardFlic
{
	Downgrade
	{
		ShapeAlphaFromParam( StandardFlic[GameTime], _cull, _col )
	} : _alphaFromParam

	Downgrade
	{
		ShapeAlphaFromVertex( StandardFlic[GameTime], _cull )
	} : _alpha

	Downgrade
	{
		ShapeOpaque( StandardFlic[GameTime], _cull )
	}
}


TextureStyle ShapeAllAlphaMask( CullMode _cull=CCW, bool _alpha = false, bool _alphaFromParam = false, Colour _col=RGB(1,1,1) )
:	flic StandardFlic
{
	Downgrade
	{
		ShapeAlphaFromParamAlphaMask( StandardFlic[GameTime], _cull, _col )
	} : _alphaFromParam

	Downgrade
	{
		ShapeAlphaFromVertexAlphaMask( StandardFlic[GameTime], _cull )
	} : _alpha

	Downgrade
	{
		ShapeOpaqueAlphaMask( StandardFlic[GameTime], _cull )
	}
}


TextureStyle ShapeAlphaMask( Colour _col=RGB(1,1,1) )
:	flic StandardFlic
{
	Downgrade
	{
		ShapeAlphaMask( StandardFlic[GameTime], None, _col ) // select the flic frame based on game time.
	}
}


TextureStyle ShapeBlueprintOpaque( CullMode _cull=CCW, Colour _col=RGB(1,1,1) )
:	flic StandardFlic
{
	Downgrade
	{
		ShapeBlueprintOpaque( StandardFlic[GameTime], _cull, _col )
	}
}


TextureStyle ShapeNormalEdge( Bitmap _tx, Bitmap _edge, CullMode _cull, Colour _col, bool _alpha, bool _alphaMask )
{
	Downgrade
	{
		ShapeNormalEdgeAlphaMask( _tx, _edge, _cull, _col )
	} : _alphaMask

	Downgrade
	{
		ShapeNormalEdgeAlpha( _tx, _edge, _cull, _col )
	} : _alpha

	Downgrade
	{
		ShapeNormalEdgeOpaque( _tx, _edge, _cull, _col )
	}
}


TextureStyle ShapeShadow( CullMode _cull=CCW )
:	flic StandardFlic
{
	Downgrade
	{
		ShapeShadow( StandardFlic[GameTime], _cull )
	}
}


TextureStyle ShapeShadowAlpha( Bitmap _tx=0, CullMode _cull=CCW )
{
	Downgrade
	{
		ShapeShadowAlpha( _tx, _cull )
	}
}

TextureStyle ShapeShadowAlphaMask( Bitmap _tx=0, CullMode _cull=CCW )
{
	Downgrade
	{
		ShapeShadowAlphaMask( _tx, _cull )
	}
}

TextureStyle ShapeShadowOpaque( CullMode _cull=CCW )
{
	Downgrade
	{
		ShapeShadowOpaque( _cull )
	}
}

TextureStyle ShapeStandard()
:	flic StandardFlic
{
	Downgrade
	{
		ShapeStandard( StandardFlic[GameTime] ) // select the flic frame based on game time.
	}
}


TextureStyle SIAlpha( CullMode _cull=CCW, bool _alpha=0, bool _alphaFromParam=0, Colour _col=RGB(1,1,1) )
:	flic StandardFlic
{
	Downgrade
	{
		SIAlpha_AP( StandardFlic[GameTime], _cull, _col )
	} : _alphaFromParam

	Downgrade
	{
		SIAlpha_AV( StandardFlic[GameTime], _cull )
	} : _alpha

	Downgrade
	{
		SIAlpha_O( StandardFlic[GameTime], _cull )
	}
}


TextureStyle SIAlphaChrome( CullMode _cull=CCW, bool _alpha=0, bool _alphaFromParam=0, Colour _col=RGB(1,1,1) )
:	flic StandardFlic
{
	Downgrade
	{
		SIAlphaChrome_AP( StandardFlic[GameTime], _cull, _col, ChromeEnvMap )
	} : _alphaFromParam

	Downgrade
	{
		SIAlphaChrome_AV( StandardFlic[GameTime], _cull, ChromeEnvMap )
	} : _alpha

	Downgrade
	{
		SIAlphaChrome_O( StandardFlic[GameTime], _cull, ChromeEnvMap )
	}
}


TextureStyle SIAlphaDS( CullMode _cull=none, bool _alpha=0, bool _alphaFromParam=0, Colour _col=RGB(1,1,1) )
:	flic StandardFlic
{
	Downgrade
	{
		SIAlpha_AP( StandardFlic[GameTime], none, _col )
	} : _alphaFromParam

	Downgrade
	{
		SIAlpha_AV( StandardFlic[GameTime], none )
	} : _alpha

	Downgrade
	{
		SIAlpha_O( StandardFlic[GameTime], none )
	}
}


TextureStyle SIAlphaMask( CullMode _cull=CCW, bool _alpha=0, bool _alphaFromParam=0, Colour _col=RGB(1,1,1) )
:	flic StandardFlic
{
	Downgrade
	{
		SIAlphaMask_AP( StandardFlic[GameTime], _cull, _col )
	} : _alphaFromParam

	Downgrade
	{
		SIAlphaMask_AV( StandardFlic[GameTime], _cull )
	} : _alpha

	Downgrade
	{
		SIAlphaMask_O( StandardFlic[GameTime], _cull )
	}
}


TextureStyle SIAlphaMaskCaustics( CullMode _cull=CCW, bool _alpha = false, bool _alphaFromParam = false, Colour _col=RGB(1,1,1) )
:	flic StandardFlic
{
	Downgrade
	{
		Shader
		{
			Pass
			{
				SrcBlend=One
				DestBlend=Zero
				AlphaBlendEnable=false

				AlphaTestEnable=true
				AlphaRef=AlphaRefSI
				AlphaFunc=Greater

				SpecularEnable=false

				Diffuse=1:RGB(1,1,1)
				Ambient=1:RGB(1,1,1)
				Emissive=RGB(0,0,0)

				Lighting=true
				ZEnable=true
				ZFunc=LessEqual
				ZWriteEnable=true
				CullMode=_cull

				ModulateTile(StandardFlic[GameTime],0)
			}
			Pass
			{
				SrcBlend=SrcAlpha
				DestBlend=One
				AlphaBlendEnable=true

				AlphaTestEnable=true
				AlphaRef=AlphaRefSI
				AlphaFunc=Greater

				SpecularEnable=false

				Diffuse=RGBA(0,0,0,1)
				Ambient=RGBA(0,0,0,1)
				Emissive=CausticsColour

				Lighting=true
				ZEnable=true
				ZFunc=LessEqual
				ZWriteEnable=true
				CullMode=_cull

				TextureStage
				{
					Colour=Modulate(Current,Texture)
					Alpha=Modulate(Current,Texture)
					TextureCoordIndex=CameraSpacePosition
					Address=Wrap
					MagFilter=Linear
					MinFilter=Linear
					MipFilter=Point
					TextureTransform=CausticsTransform
					TextureTransformType=Enabled
					Bitmap=CausticsBitmap
					MipMapLODBias=0.0
				}
				TextureStage
				{
					Colour=Select(Current)
					Alpha=Select(Texture)
					TextureCoordIndex=0
					Address=Tile
					MagFilter=Linear
					MinFilter=Linear
					MipFilter=Linear
					TextureTransformType=Off
					Bitmap=StandardFlic[GameTime]
					MipMapLODBias=0.0
				}
			}
		}
	}
}


TextureStyle SIAlphaMaskChrome( CullMode _cull=CCW, bool _alpha=0, bool _alphaFromParam=0, Colour _col=RGB(1,1,1) )
:	flic StandardFlic
{
	Downgrade
	{
		SIAlphaMaskChrome_AP( StandardFlic[GameTime], _cull, _col, ChromeEnvMap )
	} : _alphaFromParam

	Downgrade
	{
		SIAlphaMaskChrome_AV( StandardFlic[GameTime], _cull, ChromeEnvMap )
	} : _alpha

	Downgrade
	{
		SIAlphaMaskChrome_O( StandardFlic[GameTime], _cull, ChromeEnvMap )
	}
}


TextureStyle SIAlphaMaskDS( CullMode _cull=None, bool _alpha=0, bool _alphaFromParam=0, Colour _col=RGB(1,1,1) )
:	flic StandardFlic
{
	Downgrade
	{
		SIAlphaMask_AP( StandardFlic[GameTime], None, _col )
	} : _alphaFromParam

	Downgrade
	{
		SIAlphaMask_AV( StandardFlic[GameTime], None )
	} : _alpha

	Downgrade
	{
		SIAlphaMask_O( StandardFlic[GameTime], None )
	}
}


TextureStyle SIAlphaMaskLow( CullMode _cull=CCW, bool _alpha = false, bool _alphaFromParam = false, Colour _col=RGB(1,1,1) )
:	flic StandardFlic
{
	Downgrade
	{
		SIAlphaMaskLow_AP( StandardFlic[GameTime], _cull, _col )
	} : _alphaFromParam

	Downgrade
	{
		SIAlphaMaskLow_AV( StandardFlic[GameTime], _cull )
	} : _alpha

	Downgrade
	{
		SIAlphaMaskLow_O( StandardFlic[GameTime], _cull )
	}
}


TextureStyle SIAlphaMaskLowCaustics( CullMode _cull=CCW, bool _alpha = false, bool _alphaFromParam = false, Colour _col=RGB(1,1,1) )
:	flic StandardFlic
{
	Downgrade
	{
		Shader
		{
			Pass
			{
				SrcBlend=One
				DestBlend=Zero
				AlphaBlendEnable=false

				AlphaTestEnable=true
				AlphaRef=AlphaRefSILow
				AlphaFunc=Greater

				SpecularEnable=false

				Diffuse=1:RGB(1,1,1)
				Ambient=1:RGB(1,1,1)
				Emissive=RGB(0,0,0)

				Lighting=true
				ZEnable=true
				ZFunc=LessEqual
				ZWriteEnable=true
				CullMode=_cull

				ModulateTileBias(StandardFlic[GameTime],0)
			}
			Pass
			{
				SrcBlend=SrcAlpha
				DestBlend=One
				AlphaBlendEnable=true

				AlphaTestEnable=true
				AlphaRef=AlphaRefSILow
				AlphaFunc=Greater

				SpecularEnable=false

				Diffuse=RGBA(0,0,0,1)
				Ambient=RGBA(0,0,0,1)
				Emissive=CausticsColour

				Lighting=true
				ZEnable=true
				ZFunc=LessEqual
				ZWriteEnable=true
				CullMode=_cull

				TextureStage
				{
					Colour=Modulate(Current,Texture)
					Alpha=Modulate(Current,Texture)
					TextureCoordIndex=CameraSpacePosition
					Address=Wrap
					MagFilter=Linear
					MinFilter=Linear
					MipFilter=Point
					TextureTransform=CausticsTransform
					TextureTransformType=Enabled
					Bitmap=CausticsBitmap
					MipMapLODBias=0.0
				}
				TextureStage
				{
					Colour=Select(Current)
					Alpha=Select(Texture)
					TextureCoordIndex=0
					Address=Tile
					MagFilter=Linear
					MinFilter=Linear
					MipFilter=None
					TextureTransformType=Off
					Bitmap=StandardFlic[GameTime]
					MipMapLODBias=0.0
				}
			}
		}
	}
}


TextureStyle SIAlphaMaskLowSpecular100( CullMode _cull=CCW, bool _alpha=0, bool _alphaFromParam=0, Colour _col=RGB(1,1,1) )
:	flic StandardFlic
{
	Downgrade
	{
		SIAlphaMaskLowSpecular100_AP( StandardFlic[GameTime], _cull, _col )
	} : _alphaFromParam

	Downgrade
	{
		SIAlphaMaskLowSpecular100_AV( StandardFlic[GameTime], _cull )
	} : _alpha

	Downgrade
	{
		SIAlphaMaskLowSpecular100_O( StandardFlic[GameTime], _cull )
	}
}


TextureStyle SIAlphaMaskLowSpecular100Reflection( CullMode _cull=CCW, bool _alpha=0, bool _alphaFromParam=0, Colour _col=RGB(1,1,1) )
:	flic StandardFlic
{
	Downgrade
	{
		SIAlphaMaskLowSpecular100Reflection_AP( StandardFlic[GameTime], _cull, _col, ShinyEnvMap )
	} : _alphaFromParam

	Downgrade
	{
		SIAlphaMaskLowSpecular100Reflection_AV( StandardFlic[GameTime], _cull, ShinyEnvMap )
	} : _alpha

	Downgrade
	{
		SIAlphaMaskLowSpecular100Reflection_O( StandardFlic[GameTime], _cull, ShinyEnvMap )
	}
}


TextureStyle SIAlphaMaskLowSpecular50( CullMode _cull=CCW, bool _alpha = false, bool _alphaFromParam = false, Colour _col=RGB(1,1,1) )
:	flic StandardFlic
{
	Downgrade
	{
		SIAlphaMaskLowSpecular50_AP( StandardFlic[GameTime], _cull, _col )
	}: _alphaFromParam

	Downgrade
	{
		SIAlphaMaskLowSpecular50_AV( StandardFlic[GameTime], _cull )
	} : _alpha

	Downgrade
	{
		SIAlphaMaskLowSpecular50_O( StandardFlic[GameTime], _cull )
	}
}


TextureStyle SIAlphaMaskLowSpecular50Reflection( CullMode _cull=CCW, bool _alpha=0, bool _alphaFromParam=0, Colour _col=RGB(1,1,1) )
:	flic StandardFlic
{
	Downgrade
	{
		SIAlphaMaskLowSpecular50Reflection_AP( StandardFlic[GameTime], _cull, _col, ShinyEnvMap )
	} : _alphaFromParam

	Downgrade
	{
		SIAlphaMaskLowSpecular50Reflection_AV( StandardFlic[GameTime], _cull, ShinyEnvMap )
	} : _alpha

	Downgrade
	{
		SIAlphaMaskLowSpecular50Reflection_O( StandardFlic[GameTime], _cull, ShinyEnvMap )
	}
}


TextureStyle SIAlphaMaskReflection( CullMode _cull=CCW, bool _alpha=0, bool _alphaFromParam=0, Colour _col=RGB(1,1,1) )
:	flic StandardFlic
{
	Downgrade
	{
		SIAlphaMaskReflection_AP( StandardFlic[GameTime], _cull, _col, ShinyEnvMap )
	} : _alphaFromParam

	Downgrade
	{
		SIAlphaMaskReflection_AV( StandardFlic[GameTime], _cull, ShinyEnvMap )
	} : _alpha

	Downgrade
	{
		SIAlphaMaskReflection_O( StandardFlic[GameTime], _cull, ShinyEnvMap )
	}
}


TextureStyle SIAlphaMaskSpecular100( CullMode _cull=CCW, bool _alpha = false, bool _alphaFromParam = false, Colour _col=RGB(1,1,1) )
:	flic StandardFlic
{
	Downgrade
	{
		SIAlphaMaskSpecular100_AP( StandardFlic[GameTime], _cull, _col )
	} : _alphaFromParam

	Downgrade
	{
		SIAlphaMaskSpecular100_AV( StandardFlic[GameTime], _cull )
	} : _alpha

	Downgrade
	{
		SIAlphaMaskSpecular100_O( StandardFlic[GameTime], _cull )
	}
}


TextureStyle SIAlphaMaskSpecular100Reflection( CullMode _cull=CCW, bool _alpha = false, bool _alphaFromParam = false, Colour _col=RGB(1,1,1) )
:	flic StandardFlic
{
	Downgrade
	{
		SIAlphaMaskSpecular100Reflection_AP( StandardFlic[GameTime], _cull, _col, ShinyEnvMap )
	} : _alphaFromParam

	Downgrade
	{
		SIAlphaMaskSpecular100Reflection_AV( StandardFlic[GameTime], _cull, ShinyEnvMap )
	} : _alpha

	Downgrade
	{
		SIAlphaMaskSpecular100Reflection_O( StandardFlic[GameTime], _cull, ShinyEnvMap )
	}
}


TextureStyle SIAlphaMaskSpecular50( CullMode _cull=CCW, bool _alpha = false, bool _alphaFromParam = false, Colour _col=RGB(1,1,1) )
:	flic StandardFlic
{
	Downgrade
	{
		SIAlphaMaskSpecular50_AP( StandardFlic[GameTime], _cull, _col )
	} : _alphaFromParam

	Downgrade
	{
		SIAlphaMaskSpecular50_AV( StandardFlic[GameTime], _cull )
	} : _alpha

	Downgrade
	{
		SIAlphaMaskSpecular50_O( StandardFlic[GameTime], _cull )
	}
}


TextureStyle SIAlphaMaskSpecular50Reflection( CullMode _cull=CCW, bool _alpha = false, bool _alphaFromParam = false, Colour _col=RGB(1,1,1) )
:	flic StandardFlic
{
	Downgrade
	{
		SIAlphaMaskSpecular50Reflection_AP( StandardFlic[GameTime], _cull, _col, ShinyEnvMap )
	} : _alphaFromParam

	Downgrade
	{
		SIAlphaMaskSpecular50Reflection_AV( StandardFlic[GameTime], _cull, ShinyEnvMap )
	} : _alpha

	Downgrade
	{
		SIAlphaMaskSpecular50Reflection_O( StandardFlic[GameTime], _cull, ShinyEnvMap )
	}
}


TextureStyle SIAlphaMaskUnlit( CullMode _cull=CCW, bool _alpha = false, bool _alphaFromParam = false, Colour _col=RGB(1,1,1) )
:	flic StandardFlic
{
	Downgrade
	{
		SIAlphaMaskUnlit_AP( StandardFlic[GameTime], _cull, _col )
	} : _alphaFromParam

	Downgrade
	{
		SIAlphaMaskUnlit_AV( StandardFlic[GameTime], _cull )
	} : _alpha

	Downgrade
	{
		SIAlphaMaskUnlit_O( StandardFlic[GameTime], _cull )
	}
}


TextureStyle SIAlphaMaskUnlitLow( CullMode _cull=CCW, bool _alpha=0, bool _alphaFromParam=0, Colour _col=RGB(1,1,1) )
:	flic StandardFlic
{
	Downgrade
	{
		SIAlphaMaskUnlitLow_AP( StandardFlic[GameTime], _cull, _col )
	}	: _alphaFromParam

	Downgrade
	{
		SIAlphaMaskUnlitLow_AV( StandardFlic[GameTime], _cull )
	}	: _alpha

	Downgrade
	{
		SIAlphaMaskUnlitLow_O( StandardFlic[GameTime], _cull )
	}
}

TextureStyle SIAlphaReflection( CullMode _cull=CCW, bool _alpha = false, bool _alphaFromParam = false, Colour _col=RGB(1,1,1) )
:	flic StandardFlic
{
	Downgrade
	{
		SIAlphaReflection_AP( StandardFlic[GameTime], _cull, _col, ShinyEnvMap )
	} : _alphaFromParam

	Downgrade
	{
		SIAlphaReflection_AV( StandardFlic[GameTime], _cull, ShinyEnvMap )
	} : _alpha

	Downgrade
	{
		SIAlphaReflection_O( StandardFlic[GameTime], _cull, ShinyEnvMap )
	}
}


TextureStyle SIAlphaSpecular100( CullMode _cull=CCW, bool _alpha = false, bool _alphaFromParam = false, Colour _col=RGB(1,1,1) )
:	flic StandardFlic
{
	Downgrade
	{
		SIAlphaSpecular100_AP( StandardFlic[GameTime], _cull, _col )
	} : _alphaFromParam

	Downgrade
	{
		SIAlphaSpecular100_AV( StandardFlic[GameTime], _cull )
	} : _alpha

	Downgrade
	{
		SIAlphaSpecular100_O( StandardFlic[GameTime], _cull )
	}
}


TextureStyle SIAlphaSpecular100Reflection( CullMode _cull=CCW, bool _alpha = false, bool _alphaFromParam = false, Colour _col=RGB(1,1,1) )
:	flic StandardFlic
{
	Downgrade
	{
		SIAlphaSpecular100Reflection_AP( StandardFlic[GameTime], _cull, _col, ShinyEnvMap )
	} : _alphaFromParam

	Downgrade
	{
		SIAlphaSpecular100Reflection_AV( StandardFlic[GameTime], _cull, ShinyEnvMap )
	} : _alpha

	Downgrade
	{
		SIAlphaSpecular100Reflection_O( StandardFlic[GameTime], _cull, ShinyEnvMap )
	}
}


TextureStyle SIAlphaSpecular50( CullMode _cull=CCW, bool _alpha = false, bool _alphaFromParam = false, Colour _col=RGB(1,1,1) )
:	flic StandardFlic
{
	Downgrade
	{
		SIAlphaSpecular50_AP( StandardFlic[GameTime], _cull, _col )
	} : _alphaFromParam

	Downgrade
	{
		SIAlphaSpecular50_AV( StandardFlic[GameTime], _cull )
	} : _alpha

	Downgrade
	{
		SIAlphaSpecular50_O( StandardFlic[GameTime], _cull )
	}
}


TextureStyle SIAlphaSpecular50Reflection( CullMode _cull=CCW, bool _alpha = false, bool _alphaFromParam = false, Colour _col=RGB(1,1,1) )
:	flic StandardFlic
{
	Downgrade
	{
		SIAlphaSpecular50Reflection_AP( StandardFlic[GameTime], _cull, _col, ShinyEnvMap )
	} : _alphaFromParam

	Downgrade
	{
		SIAlphaSpecular50Reflection_AV( StandardFlic[GameTime], _cull, ShinyEnvMap )
	} : _alpha

	Downgrade
	{
		SIAlphaSpecular50Reflection_O( StandardFlic[GameTime], _cull, ShinyEnvMap )
	}
}


TextureStyle SIAlphaText( CullMode _cull=CCW, bool _alpha=0, bool _alphaFromParam=0, Colour _col=RGB(1,1,1) )
:	flic StandardFlic
{
	Downgrade
	{
		SIAlphaText_AP( StandardFlic[GameTime], _cull, _col )
	} : _alphaFromParam

	Downgrade
	{
		SIAlphaText_AV( StandardFlic[GameTime], _cull )
	} : _alpha

	Downgrade
	{
		SIAlphaText_O( StandardFlic[GameTime], _cull )
	}
}


TextureStyle SIAlphaUnlit( CullMode _cull=CCW, bool _alpha = false, bool _alphaFromParam = false, Colour _col=RGB(1,1,1) )
:	flic StandardFlic
{
	Downgrade
	{
		SIAlphaUnlit_AP( StandardFlic[GameTime], _cull, _col )
	} : _alphaFromParam

	Downgrade
	{
		SIAlphaUnlit_AV( StandardFlic[GameTime], _cull )
	} : _alpha

	Downgrade
	{
		SIAlphaUnlit_O( StandardFlic[GameTime], _cull )
	}
}


TextureStyle SIEmissiveMask( CullMode _cull=CCW, bool _alpha = false, bool _alphaFromParam = false, Colour _col=RGB(1,1,1) )
:	flic StandardFlic
{
	Downgrade
	{
		SIEmissiveMask_AP( StandardFlic[GameTime], _cull, _col )
	} : _alphaFromParam

	Downgrade
	{
		SIEmissiveMask_AV( StandardFlic[GameTime], _cull )
	} : _alpha

	Downgrade
	{
		SIEmissiveMask_O( StandardFlic[GameTime], _cull )
	}
}


TextureStyle SIEmissiveMaskReflection( CullMode _cull=CCW, bool _alpha = false, bool _alphaFromParam = false, Colour _col=RGB(1,1,1) )
:	flic StandardFlic
{
	SIEmissiveMaskReflection_AP( StandardFlic[GameTime], _cull, _col, ShinyEnvMap ) : _alphaFromParam
	SIEmissiveMaskReflection_AV( StandardFlic[GameTime], _cull, ShinyEnvMap ) : _alpha
	SIEmissiveMaskReflection_O( StandardFlic[GameTime], _cull, ShinyEnvMap )
}


TextureStyle SIEmissiveMaskSpecular100( CullMode _cull=CCW, bool _alpha = false, bool _alphaFromParam = false, Colour _col=RGB(1,1,1) )
:	flic StandardFlic
{
	Downgrade
	{
		SIEmissiveMaskSpecular100_AP( StandardFlic[GameTime], _cull, _col )
	} : _alphaFromParam

	Downgrade
	{
		SIEmissiveMaskSpecular100_AV( StandardFlic[GameTime], _cull )
	} : _alpha

	Downgrade
	{
		SIEmissiveMaskSpecular100_O( StandardFlic[GameTime], _cull )
	}
}


TextureStyle SIEmissiveMaskSpecular100Reflection( CullMode _cull=CCW, bool _alpha = false, bool _alphaFromParam = false, Colour _col=RGB(1,1,1) )
:	flic StandardFlic
{
	SIEmissiveMaskSpecular100Reflection_AP( StandardFlic[GameTime], _cull, _col, ShinyEnvMap ) : _alphaFromParam
	SIEmissiveMaskSpecular100Reflection_AV( StandardFlic[GameTime], _cull, ShinyEnvMap ) : _alpha
	SIEmissiveMaskSpecular100Reflection_O( StandardFlic[GameTime], _cull, ShinyEnvMap )
}


TextureStyle SIEmissiveMaskSpecular50( CullMode _cull=CCW, bool _alpha = false, bool _alphaFromParam = false, Colour _col=RGB(1,1,1) )
:	flic StandardFlic
{
	Downgrade
	{
		SIEmissiveMaskSpecular50_AP( StandardFlic[GameTime], _cull, _col )
	} : _alphaFromParam

	Downgrade
	{
		SIEmissiveMaskSpecular50_AV( StandardFlic[GameTime], _cull )
	} : _alpha

	Downgrade
	{
		SIEmissiveMaskSpecular50_O( StandardFlic[GameTime], _cull )
	}
}


TextureStyle SIEmissiveMaskSpecular50Reflection( CullMode _cull=CCW, bool _alpha = false, bool _alphaFromParam = false, Colour _col=RGB(1,1,1) )
:	flic StandardFlic
{
	SIEmissiveMaskSpecular50Reflection_AP( StandardFlic[GameTime], _cull, _col, ShinyEnvMap ) : _alphaFromParam
	SIEmissiveMaskSpecular50Reflection_AV( StandardFlic[GameTime], _cull, ShinyEnvMap ) : _alpha
	SIEmissiveMaskSpecular50Reflection_O( StandardFlic[GameTime], _cull, ShinyEnvMap )
}


TextureStyle SIFillZ( CullMode _cull=CCW, bool _alpha = false, bool _alphaFromParam = false, Colour _col=RGB(1,1,1) )
:	flic StandardFlic
{
	Downgrade
	{
		SIFillZ_O( _cull )
	}
}


TextureStyle SIGlass( CullMode _cull=CCW, bool _alpha = false, bool _alphaFromParam = false, Colour _col=RGB(1,1,1) )
:	flic StandardFlic
{
	Downgrade
	{
		SIGlass_AP( StandardFlic[GameTime], _cull, _col, ShinyEnvMap )
	} : _alphaFromParam

	Downgrade
	{
		SIGlass_AV( StandardFlic[GameTime], _cull, ShinyEnvMap )
	} : _alpha

	Downgrade
	{
		SIGlass_O( StandardFlic[GameTime], _cull, ShinyEnvMap )
	}
}


TextureStyle SimpleAlphaTile():
	flic _tx
{
	Downgrade
	{
		Shader
		{
			Pass
			{
				SrcBlend=SrcAlpha
				DestBlend=InvSrcAlpha
				AlphaBlendEnable=true

				AlphaTestEnable=false

				SpecularEnable=false

				Ambient = 1:RGBA(1.0, 1.0, 1.0, 1.0)
				Diffuse = 1:RGBA(1.0, 1.0, 1.0, 1.0)
				Emissive = RGBA(0.0, 0.0, 0.0, 0.0)

				Lighting=false
				FogEnable=false

				CullMode=none

				ZEnable=true
				ZFunc=lessequal
				ZWriteEnable=false

				TextureStage
				{
					Colour=Modulate(Current, Texture)
					Alpha=Modulate(Current, Texture)
					TextureCoordIndex=0
					Address=Tile
					MagFilter=Linear
					MinFilter=Linear
					MipFilter=Linear
					TextureTransformType=Off
					Bitmap=_tx[GameTime]
					MipMapLODBias=0.0
				}
			}
			
			Layer=0
		}
	}
}


TextureStyle SimpleWater( 
	Bitmap _bitmap, 
	Colour _ambient, 
	Colour _diffuse
)
{
	Downgrade
	{
		SimpleWater()
		VerySimpleWater( _ambient, _diffuse )
	}
}


TextureStyle SimpleWaterBumped( 
	Bitmap _bitmap, 
	Bitmap _bumpmap,
	Colour _ambient, 
	Colour _diffuse,
	Float4 _clipDir
)
{
	Downgrade
	{
		SimpleWaterBumpedPS20(_bumpmap, _clipDir)
		SimpleWaterBumped(_bumpmap, _clipDir)
		SimpleWater()
		VerySimpleWater( _ambient, _diffuse )
	}
}


TextureStyle SIOpaque( CullMode _cull=CCW, bool _alpha = false, bool _alphaFromParam = false, Colour _col=RGB(1,1,1) )
:	flic StandardFlic
{
	Downgrade
	{
		SIOpaque_AP( StandardFlic[GameTime], _cull, _col )
	} : _alphaFromParam

	Downgrade
	{
		SIOpaque_AV( StandardFlic[GameTime], _cull )
	} : _alpha

	Downgrade
	{
		SIOpaque_O( StandardFlic[GameTime], _cull )
	}
}


TextureStyle SIOpaqueCaustics( CullMode _cull=CCW, bool _alpha = false, bool _alphaFromParam = false, Colour _col=RGB(1,1,1) )
:	flic StandardFlic
{
	Downgrade
	{
		Shader
		{
			Pass
			{
				SrcBlend=One
				DestBlend=Zero
				AlphaBlendEnable=false
				AlphaTestEnable=false

				SpecularEnable=false

				Diffuse=1:RGB(1,1,1)
				Ambient=1:RGB(1,1,1)
				Emissive=RGB(0,0,0)

				Lighting=true
				ZEnable=true
				ZFunc=LessEqual
				ZWriteEnable=true
				CullMode=_cull

				TextureStage
				{
					Colour=Modulate(Texture,Current)
					Alpha=Modulate(Texture,Current)
					TextureCoordIndex=0
					Address=Wrap
					MagFilter=Linear
					MinFilter=Linear
					MipFilter=Linear
					TextureTransformType=Off
					Bitmap=StandardFlic[GameTime]
					MipMapLODBias=0.0
				}
			}
			Pass
			{
				SrcBlend=One
				DestBlend=One
				AlphaBlendEnable=true
				AlphaTestEnable=false

				SpecularEnable=false

				Diffuse=RGBA(0,0,0,1)
				Ambient=RGBA(0,0,0,1)
				Emissive=CausticsColour

				Lighting=true
				ZEnable=true
				ZFunc=LessEqual
				ZWriteEnable=true
				CullMode=_cull

				TextureStage
				{
					Colour=Modulate(Current,Texture)
					Alpha=Modulate(Current,Texture)
					TextureCoordIndex=CameraSpacePosition
					Address=Wrap
					MagFilter=Linear
					MinFilter=Linear
					MipFilter=Point
					TextureTransform=CausticsTransform
					TextureTransformType=Enabled
					Bitmap=CausticsBitmap
					MipMapLODBias=0.0
				}
			}
		}
	}
}


TextureStyle SIOpaqueCausticsGlossSpecular100( CullMode _cull=CCW, bool _alpha = false, bool _alphaFromParam = false, Colour _col=RGB(1,1,1) )
:	flic StandardFlic
{
	Downgrade
	{
		Shader
		{
			Pass
			{
				SrcBlend=SrcAlpha
				DestBlend=InvSrcAlpha
				AlphaBlendEnable=false
				AlphaTestEnable=false
				SpecularEnable=false
				SpecularPower=20
				Ambient=1:RGB(1,1,1)
				Diffuse=1:RGB(1,1,1)
				Specular=RGB(1,1,1)
				Emissive=RGB(0,0,0)
				CullMode=_cull
				ModulateAlphaTile(StandardFlic[GameTime],0)
				TextureStage
				{
					Colour=ModulateAlphaAddColour(Current,Specular)
					Alpha=Select(Diffuse)
				}
				Lighting=true
				ZEnable=true
				ZFunc=LessEqual
				ZWriteEnable=true
			}
			Pass
			{
				SrcBlend=One
				DestBlend=One
				AlphaBlendEnable=true
				AlphaTestEnable=false

				SpecularEnable=false

				Diffuse=RGBA(0,0,0,1)
				Ambient=RGBA(0,0,0,1)
				Emissive=CausticsColour

				Lighting=true
				ZEnable=true
				ZFunc=LessEqual
				ZWriteEnable=true
				CullMode=_cull

				TextureStage
				{
					Colour=Modulate(Current,Texture)
					Alpha=Modulate(Current,Texture)
					TextureCoordIndex=CameraSpacePosition
					Address=Wrap
					MagFilter=Linear
					MinFilter=Linear
					MipFilter=Point
					TextureTransform=CausticsTransform
					TextureTransformType=Enabled
					Bitmap=CausticsBitmap
					MipMapLODBias=0.0
				}
			}
		}

		Shader	// 2 pass Radeon 7x00 fallback (dodgy drivers mean that D3DTA_SPECULAR isn't initialised if !D3DRS_SPECULARENABLE)
		{
			Pass	// apply base texture
			{
				SrcBlend=SrcAlpha
				DestBlend=InvSrcAlpha
				AlphaBlendEnable=false
				AlphaTestEnable=false
				SpecularEnable=false
				Ambient=1:RGB(1,1,1)
				Diffuse=1:RGB(1,1,1)
				Specular=RGB(0,0,0)
				Emissive=RGB(0,0,0)
				CullMode=_cull
				TextureStage
				{
					Colour=Modulate(Texture,Current)
					Alpha=Select(Current)
					TextureCoordIndex=0
					Address=Tile
					MagFilter=Linear
					MinFilter=Linear
					MipFilter=Linear
					Bitmap=StandardFlic[GameTime]
				}
				Lighting=true
				ZEnable=true
				ZWriteEnable=true
			}
			Pass	// apply specular using specular mask
			{
				SrcBlend=SrcAlpha
				DestBlend=One
				AlphaBlendEnable=true
				AlphaTestEnable=true
				AlphaFunc=GreaterEqual
				AlphaRef=0x08
				SpecularEnable=true
				SpecularPower=20
				Ambient=RGB(0,0,0)
				Diffuse=RGB(0,0,0)
				Specular=RGB(1,1,1)
				Emissive=RGB(0,0,0)
				FogEnable=false
				CullMode=_cull
				ModulateAlphaTile(StandardFlic[GameTime],0)
				ColourWriteEnable=0x07
				Lighting=true
				ZEnable=true
				ZWriteEnable=false
			}
			Pass
			{
				SrcBlend=One
				DestBlend=One
				AlphaBlendEnable=true
				AlphaTestEnable=false

				SpecularEnable=false

				Diffuse=RGBA(0,0,0,1)
				Ambient=RGBA(0,0,0,1)
				Emissive=CausticsColour

				Lighting=true
				ZEnable=true
				ZFunc=LessEqual
				ZWriteEnable=true
				CullMode=_cull

				TextureStage
				{
					Colour=Modulate(Current,Texture)
					Alpha=Modulate(Current,Texture)
					TextureCoordIndex=CameraSpacePosition
					Address=Wrap
					MagFilter=Linear
					MinFilter=Linear
					MipFilter=Point
					TextureTransform=CausticsTransform
					TextureTransformType=Enabled
					Bitmap=CausticsBitmap
					MipMapLODBias=0.0
				}
			}
			Layer=0
		}
	}
}


TextureStyle SIOpaqueCausticsReflection( CullMode _cull=CCW, bool _alpha = false, bool _alphaFromParam = false, Colour _col=RGB(1,1,1) )
:	flic StandardFlic
{
	Downgrade
	{
		Shader
		{
			Pass
			{
				SrcBlend=One
				DestBlend=Zero
				AlphaBlendEnable=false
				AlphaTestEnable=false

				SpecularEnable=false

				Diffuse=1:RGB(1,1,1)
				Ambient=1:RGB(1,1,1)
				Emissive=RGB(0,0,0)

				Lighting=true

				ZEnable=true
				ZFunc=LessEqual
				ZWriteEnable=true
				CullMode=_cull

				ModulateTile(StandardFlic[GameTime],0)
				SIReflection(ShinyEnvMap)
			}
			Pass
			{
				SrcBlend=One
				DestBlend=One
				AlphaBlendEnable=true
				AlphaTestEnable=false

				SpecularEnable=false

				Diffuse=RGBA(0,0,0,1)
				Ambient=RGBA(0,0,0,1)
				Emissive=CausticsColour

				Lighting=true
				ZEnable=true
				ZFunc=LessEqual
				ZWriteEnable=true
				CullMode=_cull

				TextureStage
				{
					Colour=Modulate(Current,Texture)
					Alpha=Modulate(Current,Texture)
					TextureCoordIndex=CameraSpacePosition
					Address=Wrap
					MagFilter=Linear
					MinFilter=Linear
					MipFilter=Point
					TextureTransform=CausticsTransform
					TextureTransformType=Enabled
					Bitmap=CausticsBitmap
					MipMapLODBias=0.0
				}
			}
		}
	}
}


TextureStyle SIOpaqueCausticsSpecular100( CullMode _cull=CCW, bool _alpha = false, bool _alphaFromParam = false, Colour _col=RGB(1,1,1) )
:	flic StandardFlic
{
	Downgrade
	{
		Shader
		{
			Pass
			{
				SrcBlend=One
				DestBlend=Zero
				AlphaBlendEnable=false
				AlphaTestEnable=false

				SpecularEnable=true
				SpecularPower=20
				Specular=RGB(1,1,1)

				Diffuse=1:RGB(1,1,1)
				Ambient=1:RGB(1,1,1)
				Emissive=RGB(0,0,0)

				Lighting=true

				ZEnable=true
				ZFunc=LessEqual
				ZWriteEnable=true
				CullMode=_cull

				ModulateTile(StandardFlic[GameTime],0)
			}
			Pass
			{
				SrcBlend=One
				DestBlend=One
				AlphaBlendEnable=true
				AlphaTestEnable=false

				SpecularEnable=false

				Diffuse=RGBA(0,0,0,1)
				Ambient=RGBA(0,0,0,1)
				Emissive=CausticsColour

				Lighting=true
				ZEnable=true
				ZFunc=LessEqual
				ZWriteEnable=true
				CullMode=_cull

				TextureStage
				{
					Colour=Modulate(Current,Texture)
					Alpha=Modulate(Current,Texture)
					TextureCoordIndex=CameraSpacePosition
					Address=Wrap
					MagFilter=Linear
					MinFilter=Linear
					MipFilter=Point
					TextureTransform=CausticsTransform
					TextureTransformType=Enabled
					Bitmap=CausticsBitmap
					MipMapLODBias=0.0
				}
			}
		}
	}
}


TextureStyle SIOpaqueCausticsSpecular50( CullMode _cull=CCW, bool _alpha = false, bool _alphaFromParam = false, Colour _col=RGB(1,1,1) )
:	flic StandardFlic
{
	Downgrade
	{
		Shader
		{
			Pass
			{
				SrcBlend=One
				DestBlend=Zero
				AlphaBlendEnable=false
				AlphaTestEnable=false

				SpecularEnable=true
				SpecularPower=20
				Specular=RGB(0.55,0.55,0.55)

				Diffuse=1:RGB(1,1,1)
				Ambient=1:RGB(1,1,1)
				Emissive=RGB(0,0,0)

				Lighting=true

				ZEnable=true
				ZFunc=LessEqual
				ZWriteEnable=true
				CullMode=_cull

				ModulateTile(StandardFlic[GameTime],0)
			}
			Pass
			{
				SrcBlend=One
				DestBlend=One
				AlphaBlendEnable=true
				AlphaTestEnable=false

				SpecularEnable=false

				Diffuse=RGBA(0,0,0,1)
				Ambient=RGBA(0,0,0,1)
				Emissive=CausticsColour

				Lighting=true
				ZEnable=true
				ZFunc=LessEqual
				ZWriteEnable=true
				CullMode=_cull

				TextureStage
				{
					Colour=Modulate(Current,Texture)
					Alpha=Modulate(Current,Texture)
					TextureCoordIndex=CameraSpacePosition
					Address=Wrap
					MagFilter=Linear
					MinFilter=Linear
					MipFilter=Point
					TextureTransform=CausticsTransform
					TextureTransformType=Enabled
					Bitmap=CausticsBitmap
					MipMapLODBias=0.0
				}
			}
		}
	}
}


TextureStyle SIOpaqueChrome( CullMode _cull=CCW, bool _alpha = false, bool _alphaFromParam = false, Colour _col=RGB(1,1,1) )
:	flic StandardFlic
{
	Downgrade
	{
		SIOpaqueChrome_AP( ChromeEnvMap, _cull, _col )
	} : _alphaFromParam

	Downgrade
	{
		SIOpaqueChrome_AV( ChromeEnvMap, _cull )
	} : _alpha

	Downgrade
	{
		SIOpaqueChrome_O( ChromeEnvMap, _cull )
	}
}


TextureStyle SIOpaqueChromeModulate( CullMode _cull=CCW, bool _alpha = false, bool _alphaFromParam = false, Colour _col=RGB(1,1,1) )
:	flic StandardFlic
{
	Downgrade
	{
		SIOpaqueChromeModulate_AP( StandardFlic[GameTime], _cull, _col, ChromeEnvMap )
	} : _alphaFromParam

	Downgrade
	{
		SIOpaqueChromeModulate_AV( StandardFlic[GameTime], _cull, ChromeEnvMap )
	} : _alpha

	Downgrade
	{
		SIOpaqueChromeModulate_O( StandardFlic[GameTime], _cull, ChromeEnvMap )
	}
}


TextureStyle SIOpaqueDS( CullMode _cull=none, bool _alpha = false, bool _alphaFromParam = false, Colour _col=RGB(1,1,1) )
:	flic StandardFlic
{
	Downgrade
	{
		SIOpaque_AP( StandardFlic[GameTime], none, _col )
	} : _alphaFromParam

	Downgrade
	{
		SIOpaque_AV( StandardFlic[GameTime], none )
	} : _alpha

	Downgrade
	{
		SIOpaque_O( StandardFlic[GameTime], none )
	}
}


TextureStyle SIOpaqueGlossReflection( CullMode _cull=CCW, bool _alpha=0, bool alphaFromParam=0, Colour _col=RGB(1,1,1) )
:	flic StandardFlic
{
	Downgrade
	{
		SIOpaqueGlossReflection_AP( StandardFlic[GameTime], _cull, _col, ShinyEnvMap )
	} : alphaFromParam

	Downgrade
	{
		SIOpaqueGlossReflection_AV( StandardFlic[GameTime], _cull, ShinyEnvMap )
	} : _alpha

	Downgrade
	{
		SIOpaqueGlossReflection_O( StandardFlic[GameTime], _cull, ShinyEnvMap )
	}
}


TextureStyle SIOpaqueGlossSpecular100(
	CullMode	_cull			= CCW,
	bool		_alpha			= 0,
	bool		_alphaFromParam = 0,
	Colour		_diffuse		= RGB(1,1,1)
)
:	flic _flic
{
	SIOpaqueGlossSpecular(_flic[GameTime], _cull, _diffuse,		RGB(1,1,1),	true,	false	) : _alphaFromParam
	SIOpaqueGlossSpecular(_flic[GameTime], _cull, RGB(1,1,1),	RGB(1,1,1),	true,	true	) : _alpha
	SIOpaqueGlossSpecular(_flic[GameTime], _cull, RGB(1,1,1),	RGB(1,1,1),	false,	false	)
}


TextureStyle SIOpaqueGlossSpecular50(
	CullMode	_cull			= CCW,
	bool		_alpha			= 0,
	bool		_alphaFromParam = 0,
	Colour		_diffuse		= RGB(1,1,1)
)
:	flic _flic
{
	SIOpaqueGlossSpecular(_flic[GameTime], _cull, _diffuse,		RGB(0.55,0.55,0.55), true,	false	) : _alphaFromParam
	SIOpaqueGlossSpecular(_flic[GameTime], _cull, RGB(1,1,1),	RGB(0.55,0.55,0.55), true,	true	) : _alpha
	SIOpaqueGlossSpecular(_flic[GameTime], _cull, RGB(1,1,1),	RGB(0.55,0.55,0.55), false,	false	)
}


TextureStyle SIOpaqueReflection( CullMode _cull=CCW, bool _alpha = false, bool _alphaFromParam = false, Colour _col=RGB(1,1,1) )
:	flic StandardFlic
{
	Downgrade
	{
		SIOpaqueReflection_AP( StandardFlic[GameTime], _cull, _col, ShinyEnvMap )
	} : _alphaFromParam

	Downgrade
	{
		SIOpaqueReflection_AV( StandardFlic[GameTime], _cull, ShinyEnvMap )
	} : _alpha

	Downgrade
	{
		SIOpaqueReflection_O( StandardFlic[GameTime], _cull, ShinyEnvMap )
	}
}


TextureStyle SIOpaqueSpecular100( CullMode _cull=CCW, bool _alpha = false, bool _alphaFromParam = false, Colour _col=RGB(1,1,1) )
:	flic StandardFlic
{
	Downgrade
	{
		SIOpaqueSpecular100_AP( StandardFlic[GameTime], _cull, _col )
	} : _alphaFromParam

	Downgrade
	{
		SIOpaqueSpecular100_AV( StandardFlic[GameTime], _cull )
	} : _alpha

	Downgrade
	{
		SIOpaqueSpecular100_O( StandardFlic[GameTime], _cull )
	}
}


TextureStyle SIOpaqueSpecular100Reflection( CullMode _cull=CCW, bool _alpha = false, bool _alphaFromParam = false, Colour _col=RGB(1,1,1) )
:	flic StandardFlic
{
	Downgrade
	{
		SIOpaqueSpecular100Reflection_AP( StandardFlic[GameTime], _cull, _col, ShinyEnvMap )
	} : _alphaFromParam

	Downgrade
	{
		SIOpaqueSpecular100Reflection_AV( StandardFlic[GameTime], _cull, ShinyEnvMap )
	} : _alpha

	Downgrade
	{
		SIOpaqueSpecular100Reflection_O( StandardFlic[GameTime], _cull, ShinyEnvMap )
	}
}


TextureStyle SIOpaqueSpecular50( CullMode _cull=CCW, bool _alpha = false, bool _alphaFromParam = false, Colour _col=RGB(1,1,1) )
:	flic StandardFlic
{
	Downgrade
	{
		SIOpaqueSpecular50_AP( StandardFlic[GameTime], _cull, _col )
	} : _alphaFromParam

	Downgrade
	{
		SIOpaqueSpecular50_AV( StandardFlic[GameTime], _cull )
	} : _alpha

	Downgrade
	{
		SIOpaqueSpecular50_O( StandardFlic[GameTime], _cull )
	}
}


TextureStyle SIOpaqueSpecular50Reflection( CullMode _cull=CCW, bool _alpha = false, bool _alphaFromParam = false, Colour _col=RGB(1,1,1) )
:	flic StandardFlic
{
	Downgrade
	{
		SIOpaqueSpecular50Reflection_AP( StandardFlic[GameTime], _cull, _col, ShinyEnvMap )
	} : _alphaFromParam

	Downgrade
	{
		SIOpaqueSpecular50Reflection_AV( StandardFlic[GameTime], _cull, ShinyEnvMap )
	} : _alpha

	Downgrade
	{
		SIOpaqueSpecular50Reflection_O( StandardFlic[GameTime], _cull, ShinyEnvMap )
	}
}


TextureStyle SIOpaqueText( CullMode _cull=CCW, bool _alpha = false, bool _alphaFromParam = false, Colour _col=RGB(1,1,1) )
:	flic StandardFlic
{
	Downgrade
	{
		SIOpaqueText_AP( StandardFlic[GameTime], _cull, _col )
	} : _alphaFromParam

	Downgrade
	{
		SIOpaqueText_AV( StandardFlic[GameTime], _cull )
	} : _alpha

	Downgrade
	{
		SIOpaqueText_O( StandardFlic[GameTime], _cull )
	}
}


TextureStyle SIOpaqueUnlit( CullMode _cull=CCW, bool _alpha = false, bool _alphaFromParam = false, Colour _col=RGB(1,1,1) )
:	flic StandardFlic
{
	Downgrade
	{
		SIOpaqueUnlit_AP( StandardFlic[GameTime], _cull, _col )
	} : _alphaFromParam

	Downgrade
	{
		SIOpaqueUnlit_AV( StandardFlic[GameTime], _cull )
	} : _alpha

	Downgrade
	{
		SIOpaqueUnlit_O( StandardFlic[GameTime], _cull )
	}
}


TextureStyle SIWater( CullMode _cull=CCW, bool _alpha = false, bool _alphaFromParam = false, Colour _col=RGB(1,1,1) )
:	flic StandardFlic
{
	Downgrade
	{
		SimpleWater()
		VerySimpleWater( RGBA(0.23, 0.38, 0.48, 0.0), RGBA(0.0, 0.0, 0.0, 0.9) )
	}
}


TextureStyle SkyUVScroll( Bitmap _tx, CullMode _cull = CCW, bool _destAlpha = true )
{
	Downgrade
	{
		SkyUVScroll( _tx, _cull )
	} : _destAlpha

	Downgrade
	{
		SkyUVScrollNoDestAlpha( _tx, _cull )
	}
}


TextureStyle SolidColourFont( int _pageNumber=0 )
:	flic StandardFlic
{
	Downgrade
	{
		SolidColourFont( StandardFlic[_pageNumber] )
	}
}


TextureStyle StarStyle( CullMode _cull = CCW )
:	flic StandardFlic
{
	Downgrade
	{
		StarStyle( StandardFlic[GameTime], _cull ) // select the flic frame based on game time.
	}
}


TextureStyle SystemFont( )
:	flic StandardFlic
{
	Downgrade
	{
		SystemFont( StandardFlic[GameTime] )
	}
}


TextureStyle TerrainBlending()
:	flic _tex
{
	Downgrade
	{
		TerrainBlending( _tex[GameTime] )
	}
}


TextureStyle TerrainCircleBack( )
:	flic StandardFlic
{
	Downgrade
	{
		TerrainCircleBack( StandardFlic[GameTime] ) // select the flic frame based on game time.
	}
}


TextureStyle TerrainCircleFront( )
:	flic StandardFlic
{
	Downgrade
	{
		TerrainCircleFront( StandardFlic[GameTime] ) // select the flic frame based on game time.
	}
}


TextureStyle TerrainCliff()
:	flic StandardFlic
{
	Downgrade
	{
		TerrainCliff( StandardFlic[GameTime] )
	}
}


TextureStyle TerrainCliffTransparent(
)
:	flic StandardFlic
{
	Downgrade
	{
		Shader
		{
			Pass
			{
				SrcBlend=SrcAlpha
				DestBlend=InvSrcAlpha
				AlphaBlendEnable=true
				AlphaTestEnable=false
				SpecularEnable=false

				Ambient = 1:RGBA(1.0, 1.0, 1.0, 1.0)
				Diffuse = 1:RGBA(1.0, 1.0, 1.0, 1.0)
				Emissive = RGBA(0.0, 0.0, 0.0, 0.0)

				Lighting=true
				FogEnable=false

				CullMode=CCW

				ZEnable=true
				ZFunc=equal
				ZWriteEnable=false

				TerrainCliff( StandardFlic[GameTime] )
			}
			
			Layer=0
		}
	}
}

TextureStyle TerrainContour()
:	flic MainFlic,
	flic FadeFlic
{
	Downgrade
	{
		TerrainContour( MainFlic[GameTime], FadeFlic[GameTime] ) // select the flic frame based on game time.
	}
}


TextureStyle TerrainDebug( )
{
	Downgrade
	{
		TerrainDebug( )
	}
}


TextureStyle TerrainDetail( 
	bool _fogEnable = true
)
:	flic StandardFlic
{
	Downgrade
	{
		TerrainDetail( StandardFlic[GameTime], _fogEnable )
	}
}


TextureStyle TerrainDetailAndLightmap( 
	Bitmap _detailMap, 
	Bitmap _lightMap
)
{
	Downgrade
	{
		Shader
		{
			Pass
			{
				AlphaBlendEnable=false
				AlphaTestEnable=false

				Lighting=true
				SpecularEnable=false
				FogEnable=false
				Diffuse=1:RGB(1,1,1)
				Ambient=1:RGB(1,1,1)
				Emissive=RGB(0,0,0)
				
				CullMode=CCW
				ZEnable=true
				ZFunc=LessEqual
				ZWriteEnable=true

				TextureStage
				{
					Colour=Modulate2X( Texture, Diffuse )
					Alpha=Select( Diffuse )
					TextureCoordIndex=CameraSpacePosition
					Address=Wrap
					MagFilter=Linear
					MinFilter=Linear
					MipFilter=Linear
					TextureTransform=Texture0
					TextureTransformType=Enabled
					Bitmap=_detailMap
					MipMapLODBias=0.0
				}
			}
			Pass
			{
				AlphaBlendEnable=true
				AlphaTestEnable=false
				SrcBlend=One
				DestBlend=One

				Lighting=false
				SpecularEnable=false
				Diffuse=1:RGB(1,1,1)
				FogEnable=false

				CullMode=CCW
				ZEnable=true
				ZFunc=LessEqual
				ZWriteEnable=false

				TextureStage
				{
					Colour=Modulate2X( Texture, Diffuse )
					Alpha=Select( Diffuse )
					TextureCoordIndex=CameraSpacePosition
					Address=Wrap
					MagFilter=Linear
					MinFilter=Linear
					MipFilter=Linear
					TextureTransform=Texture0
					TextureTransformType=Enabled
					Bitmap=_detailMap
					MipMapLODBias=0.0
				}

				TextureStage
				{
					Colour=Modulate( Texture, Current )
					Alpha=Select( Current )
					TextureCoordIndex=CameraSpacePosition
					Address=Clamp
					MagFilter=Linear
					MinFilter=Linear
					MipFilter=None
					TextureTransform=Texture1
					TextureTransformType=Enabled
					Bitmap=_lightMap
					MipMapLODBias=0.0
				}
			}
			Layer=0
		}
	}
}


TextureStyle TerrainFakeUp( )
: flic _textureBitmap
{
	Downgrade
	{
		TerrainFakeUp( _textureBitmap[GameTime] )
	}
}


TextureStyle TerrainFog( 
	Colour _fogColour
) :
	flic _gradient
{
	Downgrade
	{
		Shader
		{
			Pass
			{
				AlphaBlendEnable=true
				AlphaTestEnable=false
				SrcBlend=SrcAlpha
				DestBlend=InvSrcAlpha

				Lighting=false
				FogEnable=false
				Diffuse=1:RGB(1,1,1)
				TextureFactor=_fogColour

				CullMode=CCW
				ZEnable=true
				ZFunc=LessEqual
				ZWriteEnable=false

				TextureStage
				{
					Colour=Select( TFactor )
					Alpha=Select( Texture )
					TextureCoordIndex=CameraSpacePosition
					Address=Clamp
					MagFilter=Linear
					MinFilter=Linear
					MipFilter=None
					TextureTransform=Texture0
					TextureTransformType=Enabled
					Bitmap=_gradient[GameTime]
					MipMapLODBias=0.0
				}
			}
			Layer=0
		}
	}
}


TextureStyle TerrainGrid()
:	flic StandardFlic
{
	Downgrade
	{
		TerrainGrid( StandardFlic[GameTime] ) // select the flic frame based on game time.
	}
}


TextureStyle TerrainGrid2Stage( Bitmap _tex = ChromeEnvMap, Bitmap _tex2 = ChromeEnvMap )
{
	Downgrade
	{
		TerrainGrid2Stage( _tex, _tex2 )
	}
}


TextureStyle TerrainHighlight(
)
:	flic StandardFlic
{
	Downgrade
	{
		TerrainHighlight( StandardFlic[GameTime] ) // select the flic frame based on game time.
	}
}


TextureStyle TerrainHole( )
: flic _textureBitmap
{
	Downgrade
	{
		TerrainHole( _textureBitmap[GameTime] )
	}
}


TextureStyle TerrainHoleStencil( )
{
	Downgrade
	{
		TerrainHoleStencil( )
	}
}


TextureStyle TerrainLightFalloff()
:	flic StandardFlic
{
	Downgrade
	{
		TerrainLightFalloff( StandardFlic[GameTime] )
	}
}


TextureStyle TerrainLightmap()
:	flic StandardFlic
{
	Downgrade
	{
		TerrainLightmap( StandardFlic[GameTime] )
	}
}


TextureStyle TerrainPosition()
: flic _black
{
	Downgrade
	{
		TerrainPosition( _black[GameTime] )
	}
}


TextureStyle TerrainPositionNoZ()
: flic _black
{
	Downgrade
	{
		TerrainPositionNoZ( _black[GameTime] )
	}
}

TextureStyle TerrainShadowHorizon( CullMode _cull=CCW, Colour _tfactor = RGBA(0,0,0,0) )
:	flic StandardFlic
{
	Downgrade
	{
		TerrainShadowHorizon( StandardFlic[GameTime], HorizonShadowMap, _cull, _tfactor )
	}
}


TextureStyle TerrainTileBlueprint()
{
	Downgrade
	{
		TerrainTileBlueprint()
	}
}


TextureStyle TerrainTransparent(
)
:	flic StandardFlic
{
	Downgrade
	{
		Shader
		{
			Pass
			{
				SrcBlend=SrcAlpha
				DestBlend=InvSrcAlpha
				AlphaBlendEnable=true
				AlphaTestEnable=false
				SpecularEnable=false

				Ambient = 1:RGBA(1.0, 1.0, 1.0, 1.0)
				Diffuse = 1:RGBA(1.0, 1.0, 1.0, 1.0)
				Emissive = RGBA(0.0, 0.0, 0.0, 0.0)

				Lighting=true
				FogEnable=false

				CullMode=CCW

				ZEnable=true
				ZFunc=equal
				ZWriteEnable=false

				TextureStage
				{
					Colour=Modulate2X( Texture, Diffuse )
					Alpha=Select( Texture )
					TextureCoordIndex=CameraSpacePosition
					Address=Wrap
					MagFilter=Linear
					MinFilter=Linear
					MipFilter=Linear
					TextureTransformType=On
					TextureTransform=Texture0
					Bitmap=StandardFlic[GameTime]
					MipMapLODBias=0.0
				}
			}
			
			Layer=0
		}
	}
}

TextureStyle TerrainZRender(
)
:	flic StandardFlic
{
	Downgrade
	{
		Shader
		{
			Pass
			{
				SrcBlend=Zero
				DestBlend=One
				AlphaBlendEnable=true
				AlphaTestEnable=false
				SpecularEnable=false

				Ambient = 1:RGBA(1.0, 1.0, 1.0, 1.0)
				Diffuse = 1:RGBA(1.0, 1.0, 1.0, 1.0)
				Emissive = RGBA(0.0, 0.0, 0.0, 0.0)

				Lighting=false
				FogEnable=false

				CullMode=None

				ZEnable=true
				ZFunc=lessequal
				ZWriteEnable=true

				TextureStage
				{
					Colour=Select(Current)
					Alpha=Select(Current)
					TextureCoordIndex=CameraSpacePosition
					Address=Tile
					MagFilter=Linear
					MinFilter=Linear
					MipFilter=Linear
					TextureTransformType=Off
					Bitmap=StandardFlic[GameTime]
					MipMapLODBias=0.0
				}
			}
			
			Layer=0
		}
	}
}

TextureStyle Underground():
	flic _tx
{
	Downgrade
	{
		Shader
		{
			Pass
			{
				SrcBlend=One
				DestBlend=Zero
				AlphaBlendEnable=false
				AlphaTestEnable=false
				SpecularEnable=false

				Ambient = 1:RGBA(1.0, 1.0, 1.0, 1.0)
				Diffuse = 1:RGBA(1.0, 1.0, 1.0, 1.0)
				Emissive = RGBA(0.0, 0.0, 0.0, 0.0)

				Lighting=true
				FogEnable=false

				CullMode=none

				ZEnable=true
				ZFunc=less
				ZWriteEnable=true

				TextureStage
				{
					Colour=Modulate(Current, Texture)
					Alpha=Modulate(Current, Texture)
					TextureCoordIndex=0
					Address=Tile
					MagFilter=Linear
					MinFilter=Linear
					MipFilter=Linear
					TextureTransformType=Off
					Bitmap=_tx[GameTime]
					MipMapLODBias=0.0
				}
			}
			
			Layer=0
		}
	}
}


TextureStyle VisibleFootprint()
:	flic StandardFlic
{
	Downgrade
	{
		VisibleFootprint( StandardFlic[GameTime] )
	}
}


TextureStyle WaterBlobAdditive( Bitmap _tx )
{
	Downgrade
	{
		Shader
		{
			Pass
			{
				SrcBlend=One
				DestBlend=One

				AlphaBlendEnable=true

				//ColourWriteEnable=0x7

				AlphaTestEnable=false

				SpecularEnable=false
				//SpecularPower=1
				//Specular=RGBA(0.0, 0.0, 0.0, 0.0)

				//Ambient = RGBA(0.05, 0.05, 0.05, 1.0)
				//Ambient = RGBA(0.1, 0.1, 0.1, 1.0)
				Ambient = RGBA(0.15, 0.15, 0.15, 1.0)
				Diffuse = RGBA(0.0, 0.0, 0.0, 1.0)
				Emissive = RGBA(0.0, 0.0, 0.0, 1.0)

				Lighting=true
				FogEnable=false

				CullMode=ccw

				ZEnable=true
				ZFunc=lessequal
				ZWriteEnable=false

				TextureStage
				{
					Colour=Modulate(Current,Texture)
					Alpha=Select(Current)

					TextureCoordIndex=0
					Address=Clamp
					MagFilter=Linear
					MinFilter=Linear
					MipFilter=Linear
					TextureTransformType=Off
					//TextureTransformType=Enabled
					//TextureTransform=_maskTransform
					Bitmap=_tx
					MipMapLODBias=0.0
				}
			}
						
			Layer=0
		}
	}
}


TextureStyle WaterBlobAlpha( Bitmap _tx )
{
	Downgrade
	{
		Shader
		{
			Pass
			{
				SrcBlend=SrcAlpha
				DestBlend=InvSrcAlpha
				AlphaBlendEnable=true

				AlphaTestEnable=false

				SpecularEnable=false
				//SpecularPower=1
				//Specular=RGBA(0.0, 0.0, 0.0, 0.0)

				Ambient = 1:RGBA(1.0, 1.0, 1.0, 1.0)
				Diffuse = 1:RGBA(1.0, 1.0, 1.0, 1.0)
				Emissive = RGBA(0.0, 0.0, 0.0, 0.0)

				Lighting=false
				FogEnable=false

				CullMode=none

				ZEnable=true
				ZFunc=lessequal
				ZWriteEnable=false

				TextureStage
				{
					Colour=Add(Texture,Current)
					Alpha=Select(Current)
					TextureCoordIndex=CameraSpacePosition
					Address=Clamp
					MagFilter=Linear
					MinFilter=Linear
					MipFilter=None
					TextureTransform=LightmapTransform
					TextureTransformType=Enabled
					Bitmap=Lightmap
					MipMapLODBias=0.0
				}
				TextureStage
				{
					Colour=Modulate(Texture,Current)
					Alpha=Modulate(Texture,Current)
					TextureCoordIndex=0
					Address=Tile
					MagFilter=Linear
					MinFilter=Linear
					MipFilter=Linear
					TextureTransformType=Off
					Bitmap=_tx
					MipMapLODBias=0.0
				}
			}
			
			Layer=0
		}
	}
}


TextureStyle WaterBlobPerPixelRefraction( Bitmap _tx, Bitmap _screen, Bitmap _normal, float4x4 _maskTransform )
{
	Downgrade
	{
		// ps_2_x version
		Shader
		{
			Pass
			{
				//SrcBlend=Zero
				//DestBlend=One
				SrcBlend=SrcAlpha
				DestBlend=InvSrcAlpha
				AlphaBlendEnable=true
				AlphaTestEnable=false

				SpecularEnable=false

				Ambient = RGBA(0.0, 0.0, 0.0, 1.0)
				Diffuse = RGBA(0.0, 0.0, 0.0, 1.0)
				Emissive = RGBA(0.0, 0.0, 0.0, 1.0)

				Lighting=false
				FogEnable=false

				CullMode=ccw

				ZEnable=true
				ZFunc=lessequal
				ZWriteEnable=false

				VertexShader
				{
					Program
					{{
						#include <vsdefault>

						void main(void)
						{
#if MAX_LIGHTS
							InitLightsArrays();
#endif
							InitConstantArrays();
							GEF_InputVertex();
							GEF_Transform();
							GEF_Project();

							vec3 viewU = mul(vec3(_input_Tangent0), float3x3(c_worldViewMat));
							vec3 viewV = mul(vec3(_input_Tangent1), float3x3(c_worldViewMat));
							//float3 viewU = mul((float3)g_inBinormal, (float3x3)c_worldViewMat);
							//float3 viewV = mul((float3)g_inTangent, (float3x3)c_worldViewMat);

							vec2 screenU = viewU.xy;
							vec2 screenV = -viewV.xy;
							
							//float distScale = 0.0f;
							//float distScale = 6.0f / g_viewPosition.z;
							//float distScale = 3.0f / g_viewPosition.z;
							float distScale = 1.0 / g_viewPosition.z;
							screenU *= distScale;
							screenV *= distScale;

							vec2 uv = ((gl_Position.xy / gl_Position.ww) * 0.5) + 0.5;

							gl_TexCoord[0].xy = g_inTexCoord[1].xy;
							gl_TexCoord[1].x = screenU.x;
							gl_TexCoord[1].y = screenV.x;
							gl_TexCoord[1].z = uv.x;
							gl_TexCoord[2].x = -screenU.y;
							gl_TexCoord[2].y = -screenV.y;
							gl_TexCoord[2].z = 1.0 - uv.y;
						}
					}}
				}

				PixelShader
				{
					//Profile = ps_2_x
					//Profile = ps_2_0 //jcb

					Sampler s_normal = LinearTile( _normal )
					Sampler s_screen = LinearClamp( _screen )

					struct PS_INPUT
					{
						float2 TexCoord0	: texcoord 0
						float3 TexCoord1	: texcoord 1
						float3 TexCoord2	: texcoord 2
					}

					Program
					{{
						void main(void)
						{
							vec4 normal = texture2D( s_normal, gl_TexCoord[0].xy );
							vec3 normalBX2 = (vec3(normal) - 0.5) * 2.0;

							vec2 screenUV;
							screenUV.x = dot( vec3(gl_TexCoord[1]), normalBX2 ); // jcb: demotion correct?
							screenUV.y = dot( vec3(gl_TexCoord[2]), normalBX2 ); // jcb: demotion correct?
							vec4 screen = texture2D( s_screen, screenUV );

							gl_FragColor.rgb = vec3(screen * vec4( 0.95, 0.95, 0.98, 1.0 ));
							gl_FragColor.a = normal.a;
						}
					}}
				}
			}

			Pass
			{
				//SrcBlend=Zero
				SrcBlend=One
				DestBlend=One

				AlphaBlendEnable=true

				//ColourWriteEnable=0x7

				AlphaTestEnable=false

				SpecularEnable=false
				//SpecularPower=1
				//Specular=RGBA(0.0, 0.0, 0.0, 0.0)

				//Ambient = RGBA(0.05, 0.05, 0.05, 1.0)
				//Ambient = RGBA(0.1, 0.1, 0.1, 1.0)
				Ambient = RGBA(0.15, 0.15, 0.15, 1.0)
				Diffuse = RGBA(0.0, 0.0, 0.0, 1.0)
				Emissive = RGBA(0.0, 0.0, 0.0, 1.0)

				Lighting=true
				FogEnable=false

				CullMode=ccw

				ZEnable=true
				ZFunc=lessequal
				ZWriteEnable=false

				TextureStage
				{
					Colour=Modulate(Current,Texture)
					Alpha=Select(Current)

					TextureCoordIndex=0
					Address=Clamp
					MagFilter=Linear
					MinFilter=Linear
					MipFilter=Linear
					TextureTransformType=Off
					//TextureTransformType=Enabled
					//TextureTransform=_maskTransform
					Bitmap=_tx
					MipMapLODBias=0.0
				}
			}
						
			Layer=0
		}

		// ps_1_1 version
		Shader
		{
			Pass
			{
				//SrcBlend=Zero
				//DestBlend=One
				SrcBlend=SrcAlpha
				DestBlend=InvSrcAlpha
				AlphaBlendEnable=true
				AlphaTestEnable=false

				SpecularEnable=false

				Ambient = RGBA(0.0, 0.0, 0.0, 1.0)
				Diffuse = RGBA(0.0, 0.0, 0.0, 1.0)
				Emissive = RGBA(0.0, 0.0, 0.0, 1.0)

				Lighting=false
				FogEnable=false

				CullMode=ccw

				ZEnable=true
				ZFunc=lessequal
				ZWriteEnable=false

				VertexShader
				{
					Program
					{{
						#include <vsdefault>

						void main(void)
						{
							GEF_InputVertex();
							GEF_Transform();
							GEF_Project();

							vec3 viewU = mul(vec3(_input_Tangent0), float3x3(c_worldViewMat));
							vec3 viewV = mul(vec3(_input_Tangent1), float3x3(c_worldViewMat));
							//float3 viewU = mul((float3)g_inBinormal, (float3x3)c_worldViewMat);
							//float3 viewV = mul((float3)g_inTangent, (float3x3)c_worldViewMat);

							vec2 screenU = viewU.xy;
							vec2 screenV = -viewV.xy;
							
							//float distScale = 0.0f;
							//float distScale = 6.0f / g_viewPosition.z;
							//float distScale = 3.0f / g_viewPosition.z;
							float distScale = 1.0 / g_viewPosition.z;
							screenU *= distScale;
							screenV *= distScale;

							vec2 uv = ((gl_Position.xy / gl_Position.ww) * 0.5) + 0.5;

							gl_TexCoord[0].xy = g_inTexCoord[1].xy;
							gl_TexCoord[1].x = screenU.x;
							gl_TexCoord[1].y = screenV.x;
							gl_TexCoord[1].z = uv.x;
							gl_TexCoord[2].x = -screenU.y;
							gl_TexCoord[2].y = -screenV.y;
							gl_TexCoord[2].z = 1.0 - uv.y;
						}
					}}
				}

				PixelShader
				{
					Sampler s_normal = LinearTile( _normal )
					Sampler s_screen = LinearClamp( _screen )

					struct PS_INPUT
					{
						float2 TexCoord0	: texcoord 0
						float3 TexCoord1	: texcoord 1
						float3 TexCoord2	: texcoord 2
					}

					Program
					{{
						#asm
						#bind s_normal s0
						#bind s_screen s2

						ps.1.1
						def c0, 0.95, 0.95, 0.98, 1.0
						tex			t0
						texm3x2pad	t1,		t0_bx2
						texm3x2tex	t2,		t0_bx2
						mul r0.rgb, t2, c0
						+mov r0.a, t0.a
						//mov r0, t0
					}}
				}
			}

			Pass
			{
				//SrcBlend=Zero
				SrcBlend=One
				DestBlend=One

				AlphaBlendEnable=true

				//ColourWriteEnable=0x7

				AlphaTestEnable=false

				SpecularEnable=false
				//SpecularPower=1
				//Specular=RGBA(0.0, 0.0, 0.0, 0.0)

				//Ambient = RGBA(0.05, 0.05, 0.05, 1.0)
				//Ambient = RGBA(0.1, 0.1, 0.1, 1.0)
				Ambient = RGBA(0.15, 0.15, 0.15, 1.0)
				Diffuse = RGBA(0.0, 0.0, 0.0, 1.0)
				Emissive = RGBA(0.0, 0.0, 0.0, 1.0)

				Lighting=true
				FogEnable=false

				CullMode=ccw

				ZEnable=true
				ZFunc=lessequal
				ZWriteEnable=false

				TextureStage
				{
					Colour=Modulate(Current,Texture)
					Alpha=Select(Current)

					TextureCoordIndex=0
					Address=Clamp
					MagFilter=Linear
					MinFilter=Linear
					MipFilter=Linear
					TextureTransformType=Off
					//TextureTransformType=Enabled
					//TextureTransform=_maskTransform
					Bitmap=_tx
					MipMapLODBias=0.0
				}
			}
						
			Layer=0
		}
	}
}


TextureStyle WaterBlobRefraction( Bitmap _tx, Bitmap _screen, float4x4 _maskTransform )
{
	Downgrade
	{
		Shader
		{
			Pass
			{
				SrcBlend=SrcAlpha
				DestBlend=InvSrcAlpha
				AlphaBlendEnable=true

				//ColourWriteEnable=0x7

				AlphaTestEnable=false
				//AlphaTestEnable=true
				//AlphaRef=AlphaRefSILow
				//AlphaFunc=Greater

				SpecularEnable=false
				//SpecularPower=1
				//Specular=RGBA(0.0, 0.0, 0.0, 0.0)

				//Ambient = 1:RGBA(1.0, 1.0, 1.0, 1.0)
				//Diffuse = 1:RGBA(1.0, 1.0, 1.0, 1.0)
				//Ambient = RGBA(0.85, 0.85, 0.93, 1.0)
				//Ambient = RGBA(0.9, 0.9, 0.93, 1.0)
				Ambient = RGBA(0.95, 0.95, 0.98, 1.0)
				Diffuse = RGBA(0.0, 0.0, 0.0, 1.0)
				Emissive = RGBA(0.0, 0.0, 0.0, 1.0)

				Lighting=true
				//Lighting=false
				FogEnable=false

				CullMode=ccw

				ZEnable=true
				ZFunc=lessequal
				ZWriteEnable=false
				//ZWriteEnable=true

				TextureStage
				{
					Colour=Select(Current)
					Alpha=Modulate(Current, Texture)
					TextureCoordIndex=0
					Address=Clamp
					MagFilter=Linear
					MinFilter=Linear
					MipFilter=Linear
					TextureTransformType=Off
					//TextureTransformType=Enabled
					//TextureTransform=_maskTransform
					Bitmap=_tx
					MipMapLODBias=0.0
				}
				TextureStage
				{
					Colour=Modulate(Current,Texture)
					Alpha=Select(Current)
					TextureCoordIndex=1
					Address=Clamp
					MagFilter=Linear
					MinFilter=Linear
					MipFilter=None
					TextureTransformType=Off
					Bitmap=_screen
					MipMapLODBias=0.0
				}
			}
			Pass
			{
				SrcBlend=One
				DestBlend=One

				AlphaBlendEnable=true

				//ColourWriteEnable=0x7

				AlphaTestEnable=false

				SpecularEnable=false
				//SpecularPower=1
				//Specular=RGBA(0.0, 0.0, 0.0, 0.0)

				//Ambient = RGBA(0.05, 0.05, 0.05, 1.0)
				//Ambient = RGBA(0.1, 0.1, 0.1, 1.0)
				Ambient = RGBA(0.15, 0.15, 0.15, 1.0)
				Diffuse = RGBA(0.0, 0.0, 0.0, 1.0)
				Emissive = RGBA(0.0, 0.0, 0.0, 1.0)

				Lighting=true
				FogEnable=false

				CullMode=ccw

				ZEnable=true
				ZFunc=lessequal
				ZWriteEnable=false

				TextureStage
				{
					Colour=Modulate(Current,Texture)
					Alpha=Select(Current)

					TextureCoordIndex=0
					Address=Clamp
					MagFilter=Linear
					MinFilter=Linear
					MipFilter=Linear
					TextureTransformType=Off
					//TextureTransformType=Enabled
					//TextureTransform=_maskTransform
					Bitmap=_tx
					MipMapLODBias=0.0
				}
			}
						
			Layer=0
		}
	}
}


TextureStyle WaterCaustics()
{
	Downgrade
	{
		WaterCaustics( CausticsBitmap, RGB(1,1,1) )
	}
}


TextureStyle WaterCausticsDepthFog(
	float4 _fogColour,
	float4 _fogData,
	float3 _camPos
)
{
	Downgrade
	{
		Shader
		{
			Pass
			{
				SrcBlend=One
				DestBlend=InvSrcAlpha

				AlphaBlendEnable=true
				AlphaTestEnable=false

				SpecularEnable=false
				Ambient=RGB(1,1,1)
				Diffuse=RGB(0,0,0)
				Emissive=RGB(0,0,0)

				Lighting=true
				FogEnable=false

				CullMode=CCW

				ZEnable=true
				ZFunc=LessEqual
				ZWriteEnable=false	

				VertexShader
				{
					float4 c_fogColour = _fogColour
					float4 c_fogData = _fogData
					float4x4 c_causticsTransform = Texture0
					float3 c_camPos = _camPos

					Program
					{{
						#include <vsdefault>

						void main(void)
						{
#if MAX_LIGHTS
							InitLightsArrays();
#endif
							InitConstantArrays();
							GEF_InputVertex();

							GEF_Transform();
							GEF_Project();
							GEF_Light();
							GEF_Fog();

							gl_TexCoord[0].xy = mul( vec4( g_viewPosition, 1.0 ), c_causticsTransform ).xy;

							vec3 camDiff = vec3(g_inPosition) - c_camPos;
							float camDist = length( camDiff );
							vec3 camDir = normalize( camDiff );

							float waterHeight = c_fogColour.w;
							float camDepth = waterHeight - c_camPos.y;
							float hitDist = camDepth / camDir.y;
							float yStart = (camDepth > 0.0) ? camDepth : 0.0;
							float yDir = -camDir.y;
							//float dist = (hitDist < 0.0) ? camDist : ((hitDist > camDist) ? camDist : (camDist - hitDist));
							float dist = (camDepth >= 0.0) ? camDist : (camDist - hitDist);

							float fog = (c_fogData.x * yStart * dist) + (c_fogData.x * yDir * dist * dist * 0.5) + (c_fogData.y * dist);
							gl_FrontColor.a = saturate( fog );
							float depth = waterHeight - g_inPosition.y;
							gl_FrontColor.rgb *= saturate( 1.0 - (depth * c_fogData.z) );
							gl_FrontColor.rgb *= (depth < 0.5) ? vec3( 0.0, 0.0, 0.0 ) : vec3( 1.0, 1.0, 1.0 );
						}
					}}
				}

				PixelShader
				{
					Sampler s_caustics	= LinearTile( CausticsBitmap )
					float4	c_fogColour	= _fogColour

					struct PS_INPUT
					{
						float4 Diffuse		: colour 0
						float2 TexCoord0	: texcoord 0
					}

					Program
					{{
						#asm
						#bind s_caustics	s0
						#bind c_fogColour	c0

						ps.1.1
						tex t0
						mul r0, t0, v0
						lrp r0.rgb, v0.a, c0, r0
						+mov r0.a, v0.a
					}}
				}
			}
		}
	}
}


TextureStyle WaterDrop( Bitmap _tx, Bitmap _screen, Bitmap _normal, float4x4 _maskTransform )
{
	Downgrade
	{
		// ps_2_x version
		Shader
		{
			Pass
			{
				//SrcBlend=Zero
				//DestBlend=One
				SrcBlend=SrcAlpha
				DestBlend=InvSrcAlpha
				AlphaBlendEnable=true
				AlphaTestEnable=false

				SpecularEnable=false

				Ambient = RGBA(0.0, 0.0, 0.0, 1.0)
				Diffuse = RGBA(0.0, 0.0, 0.0, 1.0)
				Emissive = RGBA(0.0, 0.0, 0.0, 1.0)

				Lighting=false
				FogEnable=false

				CullMode=None

				ZEnable=true
				ZFunc=lessequal
				ZWriteEnable=false

				// Vertex shader wont get called when code uses XYZRHW

				PixelShader
				{
					//Profile = ps_2_x
					//Profile = ps_2_0 //jcb

					Sampler s_normal = LinearTile( _normal )
					Sampler s_screen = LinearClamp( _screen )
					Sampler s_add = LinearClamp( _tx )

					struct PS_INPUT
					{
						float4 Diffuse		: colour 0
						float2 TexCoord0	: texcoord 0
						float2 TexCoord1	: texcoord 1
						float3 TexCoord2	: texcoord 2
						float3 TexCoord3	: texcoord 3
					}

					Program
					{{
						void main(void)
						{
							vec4 normal = texture2D( s_normal, gl_TexCoord[1].xy );
							vec3 normalBX2 = (vec3(normal) - 0.5) * 2.0; //jcb

							vec4 add = texture2D( s_add, gl_TexCoord[0].xy );

							vec2 screenUV;
							screenUV.x = dot( vec3(gl_TexCoord[2]), normalBX2 ); // jcb: demotion correct?
							screenUV.y = dot( vec3(gl_TexCoord[3]), normalBX2 ); // jcb: demotion correct?
							vec4 screen = texture2D( s_screen, screenUV );

							gl_FragColor.rgb = vec3((screen * vec4( 0.95, 0.95, 0.98, 1.0 )) + (add * gl_Color));
							gl_FragColor.a = normal.a * gl_Color.a;
						}
					}}
				}
			}

			Layer=0
		}

		// ps_1_1 version
		Shader
		{
			Pass
			{
				//SrcBlend=Zero
				//DestBlend=One
				SrcBlend=SrcAlpha
				DestBlend=InvSrcAlpha
				AlphaBlendEnable=true
				AlphaTestEnable=false

				SpecularEnable=false

				Ambient = RGBA(0.0, 0.0, 0.0, 1.0)
				Diffuse = RGBA(0.0, 0.0, 0.0, 1.0)
				Emissive = RGBA(0.0, 0.0, 0.0, 1.0)

				Lighting=false
				FogEnable=false

				CullMode=None

				ZEnable=true
				ZFunc=lessequal
				ZWriteEnable=false

				// Vertex shader wont get called when code uses XYZRHW

				PixelShader
				{
					Sampler s_normal = LinearTile( _normal )
					Sampler s_screen = LinearClamp( _screen )
					Sampler s_add = LinearClamp( _tx )

					struct PS_INPUT
					{
						float4 Diffuse		: colour 0
						float2 TexCoord0	: texcoord 0
						float2 TexCoord1	: texcoord 1
						float3 TexCoord2	: texcoord 2
						float3 TexCoord3	: texcoord 3
					}

					Program
					{{
						#asm
						#bind s_add		s0
						#bind s_normal	s1
						#bind s_screen	s3
						
						ps.1.1
						def c0, 0.95, 0.95, 0.98, 1.0
						tex			t0
						tex			t1
						texm3x2pad	t2,		t1_bx2
						texm3x2tex	t3,		t1_bx2
						mul r0.rgb, t3, c0
						+mul r0.a, t1, v0
						mad r0.rgb, t0, v0, r0
						//mov r0, t0
					}}
				}
			}

			Layer=0
		}
	}
}


TextureStyle WaterDropWash( Bitmap _tx, Bitmap _screen, Bitmap _normal, float4x4 _maskTransform )
{
	Downgrade
	{
		// ps_2_x version
		Shader
		{
			Pass
			{
				//SrcBlend=Zero
				//DestBlend=One
				SrcBlend=SrcAlpha
				DestBlend=InvSrcAlpha
				AlphaBlendEnable=true
				AlphaTestEnable=true

				SpecularEnable=false

				Ambient = RGBA(0.0, 0.0, 0.0, 1.0)
				Diffuse = RGBA(0.0, 0.0, 0.0, 1.0)
				Emissive = RGBA(0.0, 0.0, 0.0, 1.0)

				Lighting=false
				FogEnable=false

				CullMode=None

				ZEnable=true
				ZFunc=lessequal
				ZWriteEnable=false

				// Vertex shader wont get called when code uses XYZRHW

				PixelShader
				{
					//Profile = ps_2_x
					//Profile = ps_2_0 //jcb

					Sampler s_normal = LinearTile( _normal )
					Sampler s_screen = LinearClamp( _screen )
					Sampler s_add = LinearClamp( _tx )

					struct PS_INPUT
					{
						float4 Diffuse		: colour 0
						float2 TexCoord0	: texcoord 0
						float2 TexCoord1	: texcoord 1
						float3 TexCoord2	: texcoord 2
						float3 TexCoord3	: texcoord 3
					}

					Program
					{{
						void main(void)
						{
							vec4 normal = texture2D( s_normal, gl_TexCoord[1].xy );
							vec3 normalBX2 = (vec3(normal) - 0.5) * 2.0; //jcb

							vec4 add = texture2D( s_add, gl_TexCoord[0].xy );

							vec2 screenUV;
							screenUV.x = dot( vec3(gl_TexCoord[2]), normalBX2 ); // jcb: demotion correct?
							screenUV.y = dot( vec3(gl_TexCoord[3]), normalBX2 ); // jcb: demotion correct?
							vec4 screen = texture2D( s_screen, screenUV );

							gl_FragColor.rgb = vec3((screen * vec4( 0.95, 0.95, 0.98, 1.0 )) + (add * gl_Color));
							gl_FragColor.a = normal.a * gl_Color.a;
						}
					}}
				}
			}

			Layer=0
		}

		// ps_1_1 version
		Shader
		{
			Pass
			{
				//SrcBlend=Zero
				//DestBlend=One
				SrcBlend=SrcAlpha
				DestBlend=InvSrcAlpha
				AlphaBlendEnable=true
				AlphaTestEnable=true

				SpecularEnable=false

				Ambient = RGBA(0.0, 0.0, 0.0, 1.0)
				Diffuse = RGBA(0.0, 0.0, 0.0, 1.0)
				Emissive = RGBA(0.0, 0.0, 0.0, 1.0)

				Lighting=false
				FogEnable=false

				CullMode=None

				ZEnable=true
				ZFunc=lessequal
				ZWriteEnable=false

				// Vertex shader wont get called when code uses XYZRHW

				PixelShader
				{
					Sampler s_normal = LinearTile( _normal )
					Sampler s_screen = LinearClamp( _screen )
					Sampler s_add = LinearClamp( _tx )

					struct PS_INPUT
					{
						float4 Diffuse		: colour 0
						float2 TexCoord0	: texcoord 0
						float2 TexCoord1	: texcoord 1
						float3 TexCoord2	: texcoord 2
						float3 TexCoord3	: texcoord 3
					}

					Program
					{{
						#asm
						#bind s_add		s0
						#bind s_normal	s1
						#bind s_screen	s3

						ps.1.1
						def c0, 0.95, 0.95, 0.98, 1.0
						tex			t0
						tex			t1
						texm3x2pad	t2,		t1_bx2
						texm3x2tex	t3,		t1_bx2
						mul r0.rgb, t3, c0
						+mul r0.a, t1, v0
						mad r0.rgb, t0, v0, r0
						//mov r0, t0
					}}
				}
			}

			Layer=0
		}
	}
}


TextureStyle Waterfall( Bitmap _tx, Bitmap _blend, Colour _diffuse, float4x4 _transform1, float4x4 _transform2 )
{
	Downgrade
	{
		Waterfall( _tx, _blend, _diffuse, _transform1, _transform2 )
	}
}


TextureStyle WaterfallFloor( Bitmap _tx, Bitmap _blend, float4x4 _transform1, float4x4 _transform2 )
{
	Downgrade
	{
		WaterfallFloor( _tx, _blend, _transform1, _transform2 )
	}
}


TextureStyle WaterfallFloorFroth( Bitmap _tx, Bitmap _blend, float4x4 _transform1, float4x4 _transform2 )
{
	Downgrade
	{
		WaterfallFloorFroth( _tx, _blend, _transform1, _transform2 )
	}
}


TextureStyle WaterFlowUVScroll(
	Bitmap _tx,
	Bitmap _blend,
	Colour _diffuse,
	float4x4 _transform1,
	float4x4 _transform2,
	bool _envMap
)
{
	Downgrade
	{
		// water textures and cube map
		Shader
		{
			Pass
			{
				SrcBlend=SrcAlpha
				DestBlend=InvSrcAlpha
				AlphaBlendEnable=true
				AlphaTestEnable=false
				SpecularEnable=false
				
				Diffuse=_diffuse
				Ambient=1:RGB(1,1,1)
				Emissive=RGB(0,0,0)
				
				Lighting=1
				ZEnable=true
				ZFunc=LessEqual
				ZWriteEnable=true
				CullMode=none

				TextureStage
				{
					Colour=Add(Texture,Current)
					Alpha=Modulate(Texture,Current)
					TextureCoordIndex=0
					Address=Mirror
					MagFilter=Linear
					MinFilter=Linear
					MipFilter=Linear
					TextureTransform=_transform1
					TextureTransformType=On
					Bitmap=_tx
					MipMapLODBias=0.0
				}

				TextureStage
				{
					Colour=Add(Texture,Current)
					Alpha=Modulate(Texture,Current)
					TextureCoordIndex=0
					Address=Mirror
					MagFilter=Linear
					MinFilter=Linear
					MipFilter=Linear
					TextureTransform=_transform2
					TextureTransformType=On
					Bitmap=_blend
					MipMapLODBias=0.0
				}
			}

			Pass
			{
				SrcBlend=SrcAlpha
				DestBlend=InvSrcAlpha
				AlphaBlendEnable=true

				AlphaTestEnable=false

				SpecularEnable=true
				SpecularPower=150
				Specular=RGBA(0.4, 0.4, 0.4, 0.0)

				Ambient = RGBA(0.0, 0.0, 0.0, 0.0)
				Diffuse = _diffuse
				Emissive = RGBA(0.0, 0.0, 0.0, 0.0)

				Lighting=true

				CullMode=none

				ZEnable=true
				ZFunc=LessEqual
				ZWriteEnable=true

				VertexShader
				{
					float4 c_envCubemapColour = EnvCubemapColour
					float4x4 c_envCubemapTransform = EnvCubemapTransform

					Program
					{{
						#include <vsdefault>

						void main(void)
						{
#if MAX_LIGHTS
							InitLightsArrays();
#endif
							InitConstantArrays();
							GEF_InputVertex();
							GEF_Transform();
							GEF_Project();
							GEF_Light();
							GEF_Fog();

							vec4 uv = vec4(reflect(normalize(g_viewPosition), g_viewNormal), 1.0);
							gl_TexCoord[0].xyz = mul(uv, c_envCubemapTransform).xyz;

							float cosAngle = dot(normalize(g_viewPosition),-g_viewNormal);
							float fresnel = 1.0 - abs( cosAngle );
							float cFresnel = c_envCubemapColour.w;
							gl_FrontColor.w = (fresnel * (1.0 - cFresnel)) + cFresnel;
							gl_FrontColor.w *= g_inDiffuse.w * c_materialDiffuse.w;
						}
					}}
				}

				PixelShader
				{
					Sampler s_envMap = LinearClampCubemap(EnvCubemap);
					float4	c_envCol = EnvCubemapColour

					struct PS_INPUT
					{
						float4 Diffuse		: colour 0		// goes in v0
						float4 Specular		: colour 1		// goes in v1
						float3 TexCoord0	: texcoord 0
					}

					Program
					{{
						#asm
						#bind s_envMap s0
						#bind c_envCol c0

						!!ARBfp1.0
						ATTRIB v0 = fragment.color.primary;
						ATTRIB v1 = fragment.color.secondary;
						ATTRIB T0 = fragment.texcoord[0];
						TEMP r0, t0;
						PARAM c[1] = { program.env[0] };
						TEX t0, T0, texture[0], CUBE;
						MAD r0.xyz, t0, c[0], v1;
						MOV r0.w, v0;
						MOV result.color, r0;
						END
					}}
				}
			}
		}

		// water textures and env map for geforce2
		Shader
		{
			Pass
			{
				SrcBlend=SrcAlpha
				DestBlend=InvSrcAlpha
				AlphaBlendEnable=true
				AlphaTestEnable=false
				SpecularEnable=false
				
				Diffuse=_diffuse
				Ambient=1:RGB(1,1,1)
				Emissive=RGB(0,0,0)
				
				Lighting=1
				ZEnable=true
				ZFunc=LessEqual
				ZWriteEnable=true
				CullMode=none

				TextureStage
				{
					Colour=Add(Texture,Current)
					Alpha=Modulate(Texture,Current)
					TextureCoordIndex=0
					Address=Mirror
					MagFilter=Linear
					MinFilter=Linear
					MipFilter=Linear
					TextureTransform=_transform1
					TextureTransformType=On
					Bitmap=_tx
					MipMapLODBias=0.0
				}

				TextureStage
				{
					Colour=Add(Texture,Current)
					Alpha=Modulate(Texture,Current)
					TextureCoordIndex=0
					Address=Mirror
					MagFilter=Linear
					MinFilter=Linear
					MipFilter=Linear
					TextureTransform=_transform2
					TextureTransformType=On
					Bitmap=_blend
					MipMapLODBias=0.0
				}
			}

			Pass
			{
				SrcBlend=SrcAlpha
				DestBlend=InvSrcAlpha
				AlphaBlendEnable=true

				AlphaTestEnable=false

				SpecularEnable=true
				SpecularPower=150
				Specular=RGBA(0.4, 0.4, 0.4, 0.0)

				Ambient = RGBA(0.0, 0.0, 0.0, 0.0)
				Diffuse = _diffuse
				Emissive = RGBA(0.0, 0.0, 0.0, 0.0)

				Lighting=true

				CullMode=none

				ZEnable=true
				ZFunc=LessEqual
				ZWriteEnable=true

				TextureStage
				{
					Colour=Select(Texture)
					Alpha=Modulate(Texture,Current)
					TextureCoordIndex=CameraSpaceReflectionVector
					Address=Clamp
					MagFilter=Linear
					MinFilter=Linear
					MipFilter=None
					TextureTransformType=Enabled
					TextureTransform=Texture3
					Bitmap=WaterEnvMap
					MipMapLODBias=0.0
				}
			}
		}
	} : _envMap

	// water textures only
	Downgrade
	{
		Shader
		{
			Pass
			{
				SrcBlend=SrcAlpha
				DestBlend=InvSrcAlpha
				AlphaBlendEnable=true
				AlphaTestEnable=false
				SpecularEnable=false
				
				Diffuse=_diffuse
				Ambient=1:RGB(1,1,1)
				Emissive=RGB(0,0,0)
				
				Lighting=1
				ZEnable=true
				ZFunc=LessEqual
				ZWriteEnable=true
				CullMode=none

				TextureStage
				{
					Colour=Add(Texture,Current)
					Alpha=Modulate(Texture,Current)
					TextureCoordIndex=0
					Address=Mirror
					MagFilter=Linear
					MinFilter=Linear
					MipFilter=Linear
					TextureTransform=_transform1
					TextureTransformType=On
					Bitmap=_tx
					MipMapLODBias=0.0
				}

				TextureStage
				{
					Colour=Add(Texture,Current)
					Alpha=Modulate(Texture,Current)
					TextureCoordIndex=0
					Address=Mirror
					MagFilter=Linear
					MinFilter=Linear
					MipFilter=Linear
					TextureTransform=_transform2
					TextureTransformType=On
					Bitmap=_blend
					MipMapLODBias=0.0
				}
			}
		}
	}
}


TextureStyle WaterFlowUVScroll2(
	Bitmap _tx,
	Bitmap _blend,
	Colour _diffuse,
	float4x4 _transform1,
	float4x4 _transform2
)
{
	Downgrade
	{
		Shader
		{
			Pass
			{
				SrcBlend=SrcAlpha
				DestBlend=InvSrcAlpha
				AlphaBlendEnable=true
				AlphaTestEnable=false
				SpecularEnable=false
				
				Diffuse=_diffuse
				Ambient=1:RGB(1,1,1)
				Emissive=RGB(0,0,0)
				
				Lighting=1
				ZEnable=true
				ZFunc=LessEqual
				ZWriteEnable=true
				CullMode=none

				TextureStage
				{
					Colour=Modulate(Texture,Current)
					Alpha=Modulate(Texture,Current)
					TextureCoordIndex=0
					Address=Mirror
					MagFilter=Linear
					MinFilter=Linear
					MipFilter=Linear
					TextureTransform=_transform1
					TextureTransformType=On
					Bitmap=_tx
					MipMapLODBias=0.0
				}

				TextureStage
				{
					Colour=Add(Texture,Current)
					Alpha=Modulate(Texture,Current)
					TextureCoordIndex=0
					Address=Mirror
					MagFilter=Linear
					MinFilter=Linear
					MipFilter=Linear
					TextureTransform=_transform2
					TextureTransformType=On
					Bitmap=_blend
					MipMapLODBias=0.0
				}
			}
		}
	}
}


TextureStyle WaterFlowUVScroll2Dynamic(
	Bitmap _tx,
	Bitmap _blend,
	float4x4 _transform1,
	float4x4 _transform2
)
{
	Downgrade
	{
		Shader
		{
			Pass
			{
				SrcBlend=SrcAlpha
				DestBlend=InvSrcAlpha
				AlphaBlendEnable=true
				AlphaTestEnable=false
				SpecularEnable=false
				
				Diffuse=1:RGB(1,1,1)
				Ambient=1:RGB(1,1,1)
				Emissive=RGB(0,0,0)
				
				Lighting=1
				ZEnable=true
				ZFunc=LessEqual
				ZWriteEnable=true
				CullMode=none

				TextureStage
				{
					Colour=Modulate(Texture,Current)
					Alpha=Modulate(Texture,Current)
					TextureCoordIndex=0
					Address=Mirror
					MagFilter=Linear
					MinFilter=Linear
					MipFilter=Linear
					TextureTransform=_transform1
					TextureTransformType=On
					Bitmap=_tx
					MipMapLODBias=0.0
				}

				TextureStage
				{
					Colour=Add(Texture,Current)
					Alpha=Modulate(Texture,Current)
					TextureCoordIndex=0
					Address=Mirror
					MagFilter=Linear
					MinFilter=Linear
					MipFilter=Linear
					TextureTransform=_transform2
					TextureTransformType=On
					Bitmap=_blend
					MipMapLODBias=0.0
				}
			}
		}
	}
}


TextureStyle WaterFlowUVScrollDynamic(	
	Bitmap _tx,
	Bitmap _blend,
	float4x4 _transform1,
	float4x4 _transform2,
	bool _envMap
)
{
	Downgrade
	{
		// water textures and cube map
		Shader
		{
			Pass
			{
				SrcBlend=SrcAlpha
				DestBlend=InvSrcAlpha
				AlphaBlendEnable=true
				AlphaTestEnable=false
				SpecularEnable=false
				
				Diffuse=1:RGB(1,1,1)
				Ambient=1:RGB(1,1,1)
				Emissive=RGB(0,0,0)
				
				Lighting=1
				ZEnable=true
				ZFunc=LessEqual
				ZWriteEnable=true
				CullMode=none

				TextureStage
				{
					Colour=Add(Texture,Current)
					Alpha=Modulate(Texture,Current)
					TextureCoordIndex=0
					Address=Mirror
					MagFilter=Linear
					MinFilter=Linear
					MipFilter=Linear
					TextureTransform=_transform1
					TextureTransformType=On
					Bitmap=_tx
					MipMapLODBias=0.0
				}

				TextureStage
				{
					Colour=Add(Texture,Current)
					Alpha=Modulate(Texture,Current)
					TextureCoordIndex=0
					Address=Mirror
					MagFilter=Linear
					MinFilter=Linear
					MipFilter=Linear
					TextureTransform=_transform2
					TextureTransformType=On
					Bitmap=_blend
					MipMapLODBias=0.0
				}
			}

			Pass
			{
				SrcBlend=SrcAlpha
				DestBlend=InvSrcAlpha
				AlphaBlendEnable=true

				AlphaTestEnable=false

				SpecularEnable=true
				SpecularPower=150
				Specular=RGBA(0.4, 0.4, 0.4, 0.0)

				Ambient = RGBA(0.0, 0.0, 0.0, 0.0)
				Diffuse = 1:RGBA(0.9, 0.9, 0.9, 0.5)
				Emissive = RGBA(0.0, 0.0, 0.0, 0.0)

				Lighting=true

				CullMode=none

				ZEnable=true
				ZFunc=LessEqual
				ZWriteEnable=true

				VertexShader
				{
					float4 c_envCubemapColour = EnvCubemapColour
					float4x4 c_envCubemapTransform = EnvCubemapTransform

					Program
					{{
						#include <vsdefault>

						void main(void)
						{
#if MAX_LIGHTS
							InitLightsArrays();
#endif
							InitConstantArrays();
							GEF_InputVertex();
							GEF_Transform();
							GEF_Project();
							GEF_Light();
							GEF_Fog();

							vec4 uv = vec4(reflect(normalize(g_viewPosition), g_viewNormal), 1.0);
							gl_TexCoord[0].xyz = mul(uv, c_envCubemapTransform).xyz;

							float cosAngle = dot(normalize(g_viewPosition),-g_viewNormal);
							float fresnel = 1.0 - abs( cosAngle );
							float cFresnel = c_envCubemapColour.w;
							gl_FrontColor.w = (fresnel * (1.0 - cFresnel)) + cFresnel;
							gl_FrontColor.w *= g_inDiffuse.w;
						}
					}}
				}

				PixelShader
				{
					Sampler s_envMap = LinearClampCubemap(EnvCubemap);
					float4	c_envCol = EnvCubemapColour

					struct PS_INPUT
					{
						float4 Diffuse		: colour 0		// goes in v0
						float4 Specular		: colour 1		// goes in v1
						float3 TexCoord0	: texcoord 0
					}

					Program
					{{
						#asm
						#bind s_envMap s0
						#bind c_envCol c0

						!!ARBfp1.0
						ATTRIB v0 = fragment.color.primary;
						ATTRIB v1 = fragment.color.secondary;
						ATTRIB T0 = fragment.texcoord[0];
						TEMP r0, t0;
						PARAM c[1] = { program.env[0] };
						TEX t0, T0, texture[0], CUBE;
						MAD r0.xyz, t0, c[0], v1;
						MOV r0.w, v0;
						MOV result.color, r0;
						END
					}}
				}
			}
		}

		// water textures and env map for geforce 2
		Shader
		{
			Pass
			{
				SrcBlend=SrcAlpha
				DestBlend=InvSrcAlpha
				AlphaBlendEnable=true
				AlphaTestEnable=false
				SpecularEnable=false
				
				Diffuse=1:RGB(1,1,1)
				Ambient=1:RGB(1,1,1)
				Emissive=RGB(0,0,0)
				
				Lighting=1
				ZEnable=true
				ZFunc=LessEqual
				ZWriteEnable=true
				CullMode=none

				TextureStage
				{
					Colour=Add(Texture,Current)
					Alpha=Modulate(Texture,Current)
					TextureCoordIndex=0
					Address=Mirror
					MagFilter=Linear
					MinFilter=Linear
					MipFilter=Linear
					TextureTransform=_transform1
					TextureTransformType=On
					Bitmap=_tx
					MipMapLODBias=0.0
				}

				TextureStage
				{
					Colour=Add(Texture,Current)
					Alpha=Modulate(Texture,Current)
					TextureCoordIndex=0
					Address=Mirror
					MagFilter=Linear
					MinFilter=Linear
					MipFilter=Linear
					TextureTransform=_transform2
					TextureTransformType=On
					Bitmap=_blend
					MipMapLODBias=0.0
				}
			}

			Pass
			{
				SrcBlend=SrcAlpha
				DestBlend=InvSrcAlpha
				AlphaBlendEnable=true

				AlphaTestEnable=false

				SpecularEnable=true
				SpecularPower=150
				Specular=RGBA(0.4, 0.4, 0.4, 0.0)

				Ambient = RGBA(0.0, 0.0, 0.0, 0.0)
				Diffuse = 1:RGBA(0.9, 0.9, 0.9, 0.5)
				Emissive = RGBA(0.0, 0.0, 0.0, 0.0)

				Lighting=true

				CullMode=none

				ZEnable=true
				ZFunc=LessEqual
				ZWriteEnable=true

				TextureStage
				{
					Colour=Select(Texture)
					Alpha=Modulate(Texture,Current)
					TextureCoordIndex=CameraSpaceReflectionVector
					Address=Clamp
					MagFilter=Linear
					MinFilter=Linear
					MipFilter=None
					TextureTransformType=Enabled
					TextureTransform=Texture3
					Bitmap=WaterEnvMap
					MipMapLODBias=0.0
				}
			}
		}
	} : _envMap

	// textures only
	Downgrade
	{
		Shader
		{
			Pass
			{
				SrcBlend=SrcAlpha
				DestBlend=InvSrcAlpha
				AlphaBlendEnable=true
				AlphaTestEnable=false
				SpecularEnable=false
				
				Diffuse=1:RGB(1,1,1)
				Ambient=1:RGB(1,1,1)
				Emissive=RGB(0,0,0)
				
				Lighting=1
				ZEnable=true
				ZFunc=LessEqual
				ZWriteEnable=true
				CullMode=none

				TextureStage
				{
					Colour=Add(Texture,Current)
					Alpha=Modulate(Texture,Current)
					TextureCoordIndex=0
					Address=Mirror
					MagFilter=Linear
					MinFilter=Linear
					MipFilter=Linear
					TextureTransform=_transform1
					TextureTransformType=On
					Bitmap=_tx
					MipMapLODBias=0.0
				}

				TextureStage
				{
					Colour=Add(Texture,Current)
					Alpha=Modulate(Texture,Current)
					TextureCoordIndex=0
					Address=Mirror
					MagFilter=Linear
					MinFilter=Linear
					MipFilter=Linear
					TextureTransform=_transform2
					TextureTransformType=On
					Bitmap=_blend
					MipMapLODBias=0.0
				}
			}
		}
	}
}


TextureStyle WaterJet( Bitmap _tx )
{
	Downgrade
	{
		Shader
		{
			Pass
			{
				SrcBlend=SrcAlpha
				DestBlend=InvSrcAlpha
				AlphaBlendEnable=true

				AlphaTestEnable=false

				SpecularEnable=false
				//SpecularPower=1
				//Specular=RGBA(0.0, 0.0, 0.0, 0.0)

				Ambient = 1:RGBA(1.0, 1.0, 1.0, 1.0)
				Diffuse = 1:RGBA(1.0, 1.0, 1.0, 1.0)
				Emissive = RGBA(0.0, 0.0, 0.0, 0.0)

				Lighting=false
				FogEnable=false

				CullMode=ccw

				ZEnable=true
				ZFunc=lessequal
				ZWriteEnable=false

				TextureStage
				{
					Colour=Select(Current)
					Alpha=Modulate(Current, Texture)
					TextureCoordIndex=0
					Address=Wrap
					MagFilter=Linear
					MinFilter=Linear
					MipFilter=Linear
					TextureTransformType=Off
					Bitmap=_tx
					MipMapLODBias=0.0
				}
			}
			
			Layer=0
		}
	}
}


TextureStyle WaterJetRefraction( Bitmap _tx, Bitmap _screen, float4x4 _maskTransform )
{
	Downgrade
	{
		Shader
		{
			Pass
			{
				SrcBlend=SrcAlpha
				DestBlend=InvSrcAlpha
				AlphaBlendEnable=true

				AlphaTestEnable=false

				SpecularEnable=false
				//SpecularPower=1
				//Specular=RGBA(0.0, 0.0, 0.0, 0.0)

				Ambient = 1:RGBA(1.0, 1.0, 1.0, 1.0)
				Diffuse = 1:RGBA(1.0, 1.0, 1.0, 1.0)
				Emissive = RGBA(0.0, 0.0, 0.0, 0.0)

				Lighting=false
				FogEnable=false

				CullMode=ccw

				ZEnable=true
				ZFunc=lessequal
				ZWriteEnable=false

				TextureStage
				{
					Colour=Select(Texture)
					Alpha=Select(Current)
					TextureCoordIndex=1
					Address=Clamp
					MagFilter=Linear
					MinFilter=Linear
					MipFilter=None
					TextureTransformType=Off
					Bitmap=_screen
					MipMapLODBias=0.0
				}
				TextureStage
				{
					Colour=Select(Current)
					Alpha=Modulate(Current, Texture)
					TextureCoordIndex=0
					Address=Wrap
					MagFilter=Linear
					MinFilter=Linear
					MipFilter=Linear
					TextureTransformType=Enabled
					TextureTransform=_maskTransform
					Bitmap=_tx
					MipMapLODBias=0.0
				}
			}
			Pass
			{
				SrcBlend=SrcAlpha
				DestBlend=InvSrcAlpha
				AlphaBlendEnable=true

				AlphaTestEnable=false

				SpecularEnable=false
				//SpecularPower=1
				//Specular=RGBA(0.0, 0.0, 0.0, 0.0)

				Ambient = 1:RGBA(1.0, 1.0, 1.0, 1.0)
				Diffuse = 1:RGBA(1.0, 1.0, 1.0, 1.0)
				Emissive = RGBA(0.0, 0.0, 0.0, 0.0)

				Lighting=false
				FogEnable=false

				CullMode=ccw

				ZEnable=true
				ZFunc=lessequal
				ZWriteEnable=false

				TextureStage
				{
					Colour=Add(Texture,Current)
					Alpha=Select(Current)
					TextureCoordIndex=CameraSpacePosition
					Address=Clamp
					MagFilter=Linear
					MinFilter=Linear
					MipFilter=None
					TextureTransform=LightmapTransform
					TextureTransformType=Enabled
					Bitmap=Lightmap
					MipMapLODBias=0.0
				}
				TextureStage
				{
					Colour=Select(Current)
					Alpha=Modulate(Current, Texture)
					TextureCoordIndex=0
					Address=Wrap
					MagFilter=Linear
					MinFilter=Linear
					MipFilter=Linear
					TextureTransformType=Off
					Bitmap=_tx
					MipMapLODBias=0.0
				}
			}
			
			Layer=0
		}
	}
}


TextureStyle WaterMask()
{
	Downgrade
	{
		Shader
		{
			Pass
			{
				SrcBlend=Zero
				DestBlend=One
				AlphaBlendEnable=true
				AlphaTestEnable=false
				SpecularEnable=false
				
				Diffuse=1:RGB(1,1,1)
				Ambient=1:RGB(1,1,1)
				Emissive=RGB(0,0,0)
				
				Lighting=false
				FogEnable=false
								
				ZEnable=true
				ZFunc=LessEqual
				ZWriteEnable=true
				CullMode=none
			}
			Layer=0
		}
	}
}


TextureStyle WaterReflection(
	Bitmap _bump,
	Bitmap _reflection,
	float4 _clipDir,
	float4 _colour,
	float _fresnel
)
{
	Downgrade
	{
		// shiny new shader device implementation
		// ps_2_x version
		Shader
		{
			Pass
			{
				AlphaBlendEnable=true
				AlphaTestEnable=false
				SrcBlend=SrcAlpha
				DestBlend=InvSrcAlpha
				ZEnable=false
				Lighting=true
				SpecularEnable=false
				Diffuse=RGB(0,0,0)
				Ambient=RGB(0,0,0)
				Emissive=RGB(0,0,0)
				Specular=RGB(0,0,0)
				CullMode=None

				VertexShader
				{
					// these could be tidied up once we drop the gf4 device
					float4x4 c_bumpMat = Texture0
					float4x4 c_reflMat = Texture1
					float4 c_clipDir = _clipDir
					float c_fresnel = _fresnel
					
					Program
					{{
						#include <vsdefault>
						//#define FRESNEL 0.85
						//#define FRESNEL 0.5
						
						void F_Fresnel( float _scale )
						{
							// apply fresnel to calculated colour
							float cosAngle = dot(normalize(g_viewPosition),-g_viewNormal);
							float x = 1.0 - cosAngle;
							float x2 = x * x;
							float x4 = x2 * x2;
							float x5 = x4 * x;
							float fresnel = c_fresnel * _scale;
							gl_FrontColor.w = x5*(1.0-fresnel) + fresnel;
						}

						void main(void)
						{
#if MAX_LIGHTS
							InitLightsArrays();
#endif
							InitConstantArrays();
							GEF_InputVertex();
							GEF_Transform();

							float heightScale = abs( dot( g_viewPosition, g_viewNormal ) );
							heightScale /= 20.0;
							heightScale = min( heightScale, 1.0 );
							heightScale = 1.0 - heightScale;
							heightScale = 1.0 - (heightScale * heightScale);

							// clip given position to water plane
							g_viewPosition += c_clipDir.xyz * max(0.0, c_clipDir.w - g_viewPosition.z);

							GEF_Project();
							GEF_Light();
							GEF_Fog();
							F_Fresnel( heightScale );

							// apply projection matrix and perspective divide
							vec4 viewPos4 = vec4(g_viewPosition, 1.0);
							vec4 pspPos4 = viewPos4 / dot(c_projMat[3], viewPos4);
							gl_Position.xy = vec2(mul(pspPos4, float4x2(c_projMat)));
							gl_Position.z = 0.0;
							gl_Position.w = 1.0;

							// transform and perspective project position for 2d bump texture
							gl_TexCoord[0].xy = vec2(mul(pspPos4, float4x2(c_bumpMat)));
							
							// setup 3x2 bem matrix
							vec2 reflBase = vec2(mul(pspPos4, float4x2(c_reflMat)));
							gl_TexCoord[1].z = reflBase.x;
							gl_TexCoord[2].z = reflBase.y;
							gl_TexCoord[1].xy = c_reflMat[2].xy;
							gl_TexCoord[2].xy = c_reflMat[2].zw;
						}
					}}
				}

				PixelShader
				{
					//Profile = ps_2_0 //jcb

					Sampler s_bump		= LinearClamp(_bump)
					Sampler s_refl		= LinearClamp(_reflection)
					float4	c_colour	= _colour
					
					struct PS_INPUT
					{
						float4 Diffuse		: colour 0
						float4 Specular		: colour 1
						float2 TexCoord0	: texcoord 0
						float3 TexCoord1	: texcoord 1
						float3 TexCoord2	: texcoord 2
					}
					
					// inputs:
					// t0 - (ubase, vbase) / bump offset texture
					// t1 - (uscale, 0, ubase) / no texture
					// t2 - (0, vscale, vbase) / reflection texture
					// v0 - water diffuse colour and transparency
					// v1 - water specular colour	
					Program
					{{
						void main(void)
						{
							vec4 bump = texture2D( s_bump, gl_TexCoord[0].xy );
							vec3 bumpBX2 = (vec3(bump) - 0.5) * 2.0;

							vec2 reflectionUV;
							reflectionUV.x = dot( vec3(gl_TexCoord[1]), bumpBX2 ); // jcb: demotion correct?
							reflectionUV.y = dot( vec3(gl_TexCoord[2]), bumpBX2 ); // jcb: demotion correct?
							vec4 reflection = texture2D( s_refl, reflectionUV );

							gl_FragColor.rgb = vec3((reflection * c_colour) + gl_Color + gl_SecondaryColor);
							gl_FragColor.a = gl_Color.a * c_colour.a;
						}
					}}
				}
			}
		}

		// ps_1_1 version
		Shader
		{
			Pass
			{
				AlphaBlendEnable=true
				AlphaTestEnable=false
				SrcBlend=SrcAlpha
				DestBlend=InvSrcAlpha
				ZEnable=false
				Lighting=true
				SpecularEnable=false
				Diffuse=RGB(0,0,0)
				Ambient=RGB(0,0,0)
				Emissive=RGB(0,0,0)
				Specular=RGB(0,0,0)
				CullMode=None

				VertexShader
				{
					// these could be tidied up once we drop the gf4 device
					float4x4 c_bumpMat = Texture0
					float4x4 c_reflMat = Texture1
					float4 c_clipDir = _clipDir
					float c_fresnel = _fresnel
					
					Program
					{{
						#include <vsdefault>
						//#define FRESNEL 0.85
						//#define FRESNEL 0.5
						
						void F_Fresnel()
						{
							// apply fresnel to calculated colour
							float cosAngle = dot(normalize(g_viewPosition),-g_viewNormal);
							float x = 1.0 - cosAngle;
							float x2 = x * x;
							float x4 = x2 * x2;
							float x5 = x4 * x;
							gl_FrontColor.w = x5*(1.0-c_fresnel) + c_fresnel;
						}

						void main(void)
						{
#if MAX_LIGHTS
							InitLightsArrays();
#endif
							InitConstantArrays();
							GEF_InputVertex();
							GEF_Transform();

							// clip given position to water plane
							g_viewPosition += c_clipDir.xyz * max(0.0, c_clipDir.w - g_viewPosition.z);

							GEF_Project();
							GEF_Light();
							GEF_Fog();
							F_Fresnel();

							// apply projection matrix and perspective divide
							vec4 viewPos4 = vec4(g_viewPosition, 1.0);
							vec4 pspPos4 = viewPos4 / dot(c_projMat[3], viewPos4);
							gl_Position.xy = vec2(mul(pspPos4, float4x2(c_projMat)));
							gl_Position.z = 0.0;
							gl_Position.w = 1.0;

							// transform and perspective project position for 2d bump texture
							gl_TexCoord[0].xy = vec2(mul(pspPos4, float4x2(c_bumpMat)));
							
							// setup 3x2 bem matrix
							vec2 reflBase = vec2(mul(pspPos4, float4x2(c_reflMat)));
							gl_TexCoord[1].z = reflBase.x;
							gl_TexCoord[2].z = reflBase.y;
							gl_TexCoord[1].xy = c_reflMat[2].xy;
							gl_TexCoord[2].xy = c_reflMat[2].zw;
						}
					}}
				}

				PixelShader
				{
					Sampler s_bump		= LinearClamp(_bump)
					Sampler s_refl		= LinearClamp(_reflection)
					float4	c_colour	= _colour
					
					struct PS_INPUT
					{
						float4 Diffuse		: colour 0
						float4 Specular		: colour 1
						float2 TexCoord0	: texcoord 0
						float3 TexCoord1	: texcoord 1
						float3 TexCoord2	: texcoord 2
					}
					
					// inputs:
					// t0 - (ubase, vbase) / bump offset texture
					// t1 - (uscale, 0, ubase) / no texture
					// t2 - (0, vscale, vbase) / reflection texture
					// v0 - water diffuse colour and transparency
					// v1 - water specular colour	
					//	def			c0, 0.75, 0.75, 0.80, 0.9
					//	def			c0, 0.9, 0.9, 0.95, 0.975
					Program
					{{
						#asm
						#bind s_bump	s0
						#bind s_refl	s2
						#bind c_colour	c0

						ps.1.1
						tex			t0					// sample bump offset texture
						texm3x2pad	t1,		t0_bx2		// calculate u coord
						texm3x2tex	t2,		t0_bx2		// calculate v and sample reflection(u, v)
						mad			r0.rgb,	t2,	c0, v0	// modulate reflection and add in diffuse
						mul			r0.a,	v0, c0		// copy alpha from vertex
						add			r0.rgb, r0, v1		// add in specular						
					}}
				}
			}
		}

		// legacy GF4 device implementation
		Shader
		{
			Pass
			{
				AlphaBlendEnable=true
				AlphaTestEnable=false
				SrcBlend=SrcAlpha
				DestBlend=InvSrcAlpha
				ZEnable=false
				Lighting=true
				SpecularEnable=false
				Diffuse=RGB(0,0,0)
				Ambient=RGB(0,0,0)
				Emissive=RGB(0,0,0)
				Specular=RGB(0,0,0)
				TextureStage
				{
					TextureTransform=Texture0
					Address=Clamp
					MagFilter=Linear
					MinFilter=Linear
					MipFilter=None
					Bitmap=_bump
				}
				TextureStage
				{
					// dummy stage
				}
				TextureStage
				{
					TextureTransform=Texture1
					Address=Clamp
					MagFilter=Linear
					MinFilter=Linear
					MipFilter=None
					Bitmap=_reflection
				}
				PixelShaderType=PS_WaterApplyBEM
				CullMode=None
				Fresnel=0.85
			}
			Layer=0
		}
	}
}


TextureStyle WaterReflectionAnimatedBumpMap(
	float _lo,
	float _hi,
	float _waterBumpScale,
	float _waterBumpBlend
)
:	flic StandardFlic
{
	Downgrade
	{
		// shiny new shader device implementation
		Shader
		{
			Pass
			{
				AlphaBlendEnable=false
				AlphaTestEnable=false
				ZEnable=false
				Lighting=false
				FogEnable=false
				CullMode=none

				VertexShader
				{
					float c_waterBumpScale = _waterBumpScale
					
					Program
					{{
						#include <vsdefault>

						void F_BumpScale()
						{
							gl_FrontColor.xyzw = vec4(c_waterBumpScale / length(g_viewPosition));
						}

						void F_TexCoords()
						{
							gl_TexCoord[0] = g_inTexCoord[0];
							gl_TexCoord[1] = g_inTexCoord[0];
						}

						void main(void)
						{
							InitConstantArrays();
							GEF_InputVertex();
							GEF_Transform();
							GEF_Project();
							F_BumpScale();
							F_TexCoords();
						}
					}}
				}

				PixelShader
				{
					Sampler s_lo	= LinearTile(StandardFlic[_lo])
					Sampler s_hi	= LinearTile(StandardFlic[_hi])
					float	c_blend = _waterBumpBlend

					struct PS_INPUT
					{
						float4 BumpScale : colour 0
						float2 TexCoord0 : texcoord 0
						float2 TexCoord1 : texcoord 1
					}

					//	inputs:
					//	t0 - normal map anim frame 0
					//	t1 - normal map anim frame 1
					//	v0.a - offset scale (based on distance)
					//	c0.a - anim blend amount
					Program
					{{
						#asm
						#bind s_lo		s0
						#bind s_hi		s1
						#bind c_blend	c0

						ps.1.1
						def	c1, 0.5, 0.5, 1.0, 1.0
						tex	t0
						tex	t1
						lrp	r0,	c0.a, t1, t0
						lrp	r0,	v0.a, r0, c1
					}}
				}
			}
		}

		// legacy GF4 device implementation
		Shader
		{
			Pass
			{
				AlphaBlendEnable=false
				AlphaTestEnable=false
				ZEnable=false
				Lighting=false
				SpecularEnable=false
				WaterReflectionAnimatedBumpMap( StandardFlic[_lo] )
				WaterReflectionAnimatedBumpMap( StandardFlic[_hi] )
				PixelShaderType=PS_WaterBumpScale
				CullMode=none
				FogEnable=false
			}
		}
	}
}


TextureStyle WaterRippleNeg( Bitmap _tx )
{
	Downgrade
	{
		WaterRippleNeg( _tx )
	}
}


TextureStyle WaterRipplePos( Bitmap _tx )
{
	Downgrade
	{
		WaterRipplePos( _tx )
	}
}


TextureStyle WaterRippleSimple( Bitmap _tx )
{
	Downgrade
	{
		WaterRippleSimple( _tx )
	}
}


TextureStyle WaterSimulated( 
	Bitmap _base
)
{
	Downgrade
	{
		Shader
		{
			Pass
			{
				SrcBlend=SrcAlpha
				DestBlend=InvSrcAlpha
				AlphaBlendEnable=true

				AlphaTestEnable=false

				SpecularEnable=true
				SpecularPower=150
				Specular=RGBA(0.4, 0.4, 0.4, 0.0)

				Ambient = 1:RGBA(1.0, 1.0, 1.0, 1.0)
				Diffuse = 1:RGBA(1.0, 1.0, 1.0, 1.0)
				Emissive = RGBA(0.0, 0.0, 0.0, 0.0)

				Lighting=true

				CullMode=CCW

				ZEnable=true
				ZFunc=LessEqual
				ZWriteEnable=true

				TextureStage
				{
					Colour=Modulate(Texture,Current)
					//Colour=Select(Current)
					//Alpha=Modulate(Texture,Current)
					Alpha=Select(Current)
					TextureCoordIndex=0
					Address=Tile
					MagFilter=Linear
					MinFilter=Linear
					MipFilter=Linear
					TextureTransformType=Off
					Bitmap=_base
					MipMapLODBias=0.0
				}
				TextureStage
				{
					Colour=Add(Texture,Current)
					Alpha=Select(Current)
					TextureCoordIndex=CameraSpaceReflectionVector
					Address=Clamp
					MagFilter=Linear
					MinFilter=Linear
					MipFilter=None
					TextureTransformType=Enabled
					TextureTransform=Texture3
					Bitmap=WaterEnvMap
					MipMapLODBias=0.0
				}
			}
			
			Layer=0
		}
	}
}


TextureStyle WaterSimulatedCaustics( 
	float3 _lightDir,
	float3 _causticsColour,
	float _bottomHeight
)
{
	Downgrade
	{
		Shader
		{
			Pass
			{
				SrcBlend=One
				DestBlend=One
				AlphaBlendEnable=true
				AlphaTestEnable=false
				//CullMode=none
				CullMode=CCW
				ZEnable=true
				ZFunc=LessEqual
				ZWriteEnable=false

				VertexShader
				{
					float3 c_lightDir = _lightDir
					float3 c_causticsColour = _causticsColour
					float c_bottomHeight = _bottomHeight

					Program
					{{
						#include <vsdefault>
						#define IOR 1.33
						//#define IOR 1.6

						void main(void)
						{
#if MAX_LIGHTS
							InitLightsArrays();
#endif
							InitConstantArrays();
							GEF_InputVertex();

							vec3 inPosition = vec3(g_inPosition);

							vec3 rayDir = c_lightDir * -1.0;
							vec3 normal = vec3(g_inNormal);
							normal.y *= 0.5;
							normal = normalize( normal );

							vec3 flatRayDir = rayDir;
							vec3 tangent;
							tangent.xz = flatRayDir.xz;
							tangent.y = 0.0;
							tangent = normalize( tangent );
							float sinThetaI = dot( flatRayDir, tangent );
							float sinThetaR = sinThetaI / IOR;
							float cosThetaR = sqrt( 1.0 - (sinThetaR * sinThetaR) );
							flatRayDir = tangent * sinThetaR;
							flatRayDir.y = cosThetaR * -1.0;
							flatRayDir = normalize( flatRayDir );
							float flatCol = -flatRayDir.y;

							tangent = rayDir - (normal * dot( rayDir, normal ));
							tangent = normalize( tangent );
							sinThetaI = dot( rayDir, tangent );
							sinThetaR = sinThetaI / IOR;
							cosThetaR = sqrt( 1.0 - (sinThetaR * sinThetaR) );
							rayDir = (tangent * sinThetaR) - (normal * cosThetaR);
							rayDir = normalize( rayDir );
							float height = c_bottomHeight - g_inPosition.y;
							float comp = height / rayDir.y;
							g_inPosition.xyz = vec3(g_inPosition) + (rayDir * comp);
							float col = -rayDir.y;

							gl_FrontColor.rgb = (inPosition.y <= c_bottomHeight) ? vec3( 0.0, 0.0, 0.0 ) : c_causticsColour;
							gl_FrontColor.a = saturate( ( (abs(col - flatCol)) * 20.0 ) + 0.1 );
							//g_output.Diffuse = saturate( ((1.0f - dot( rayDir, flatRayDir )) * 4.0f) + 0.5f );
							//g_output.Diffuse = 1.0f;
							//g_output.Diffuse = ((-rayDir.y) * 0.5f) + 0.5f;
							//g_output.Diffuse = 0.0f;
							//g_output.Diffuse = -rayDir.y;

							// Adjusts brightness
							//g_output.TexCoord1.xy = inPosition.xz;
							gl_TexCoord[1].xy = inPosition.xz * 0.5;

							// Constant brightness
							//float2 blendPos = (inPosition.xz + g_inPosition.xz) * 0.5f;
							vec2 blendPos = inPosition.xz;
							//g_output.TexCoord0.xy = (blendPos + 0.2f) * 0.4f;
							gl_TexCoord[0].xy = (blendPos + 0.2) * 0.2;

							GEF_Transform();
							GEF_Project();
							GEF_Fog();
						}
					}}
				}

				PixelShader
				{
					Sampler s_caustics = LinearTile(CausticsBitmap)
					
					struct PS_INPUT
					{
						float4 Diffuse		: colour 0
						float2 TexCoord0	: texcoord 0
						float2 TexCoord1	: texcoord 1
					}

					Program
					{{
						#asm
						#bind s_caustics s0
						#bind s_caustics s1

						ps.1.1
						def c0, 0.1, 0.1, 0.1, 0.0
						def c1, 0.25, 0.25, 0.25, 1.0
						tex t0
						tex t1
						sub r0, t0, c0
						mul r0, r0, c1
						sub r1, t1, c0
						mul r1, r1, v0.a
						add r0, r0, r1
						mul_x4 r0, r0, v0
					}}
				}
			}
		}
	}
}


TextureStyle WaterSimulatedRefraction( Bitmap _tx )
{
	Downgrade
	{
		Shader
		{
			Pass
			{
				SrcBlend=One
				DestBlend=Zero
				AlphaBlendEnable=false

				AlphaTestEnable=false

				SpecularEnable=false
				//SpecularPower=1
				//Specular=RGBA(0.0, 0.0, 0.0, 0.0)

				Ambient = 1:RGBA(1.0, 1.0, 1.0, 1.0)
				Diffuse = 1:RGBA(1.0, 1.0, 1.0, 1.0)
				Emissive = RGBA(0.0, 0.0, 0.0, 0.0)

				Lighting=false
				FogEnable=false

				CullMode=none

				ZEnable=true
				ZFunc=lessequal
				ZWriteEnable=false

				TextureStage
				{
					Colour=Select(Texture)
					Alpha=Select(Texture)
					TextureCoordIndex=0
					Address=Clamp
					MagFilter=Linear
					MinFilter=Linear
					MipFilter=None
					TextureTransformType=Off
					Bitmap=_tx
					MipMapLODBias=0.0
				}
			}
			
			Layer=0
		}
	}
}


TextureStyle WaterSimulatedShader( 
	Bitmap _base,
	float3 _envmapColour,
	float3 _camPos,
	float _fresnel
)
{
	Downgrade
	{
		Shader
		{
			Pass
			{
				SrcBlend=SrcAlpha
				DestBlend=InvSrcAlpha
				AlphaBlendEnable=true

				AlphaTestEnable=false

				SpecularEnable=true
				SpecularPower=150
				Specular=RGBA(0.4, 0.4, 0.4, 0.0)

				Ambient = 1:RGBA(1.0, 1.0, 1.0, 1.0)
				Diffuse = 1:RGBA(1.0, 1.0, 1.0, 1.0)
				Emissive = RGBA(0.0, 0.0, 0.0, 0.0)

				Lighting=true

				CullMode=CCW

				ZEnable=true
				ZFunc=LessEqual
				ZWriteEnable=true

				VertexShader
				{
					float3 c_camPos = _camPos
					float c_fresnel = _fresnel
					float4x4 waterTransform = Texture3

					Program
					{{
						#include <vsdefault>

						void main (void)
						{
#if MAX_LIGHTS
							InitLightsArrays();
#endif
							InitConstantArrays();
							GEF_InputVertex();
							GEF_Transform();
							GEF_Project();
							GEF_Light();
							GEF_Fog();

							gl_TexCoord[0].xy = vec2(g_inTexCoord[0]);

							//float3 camDir = normalize( g_inPosition - c_camPos );
							//g_output.TexCoord1.xyz = reflect( camDir, g_inNormal );

							vec3 camDir = normalize( c_camPos - vec3(g_inPosition) );
							float camBumpDot = dot( camDir, vec3(g_inNormal) );
							float comp = 2.0 * camBumpDot;
							gl_TexCoord[1].xyz = (comp * vec3(g_inNormal)) - camDir;

							float fresnel = 1.0 - abs( camBumpDot );
							gl_FrontColor.w = (fresnel * (1.0 - c_fresnel)) + c_fresnel;
						}
					}}
				}

				PixelShader
				{
					Sampler s_base		= LinearTile(_base)
					Sampler s_envMap	= LinearClampCubemap(EnvCubemap);
					float3	c_envColour	= _envmapColour

					struct PS_INPUT
					{
						float4 Diffuse		: colour 0
						float4 Specular		: colour 1
						float2 TexCoord0	: texcoord 0
						float3 TexCoord1	: texcoord 1
					}

					Program
					{{
						#asm
						#bind s_base		s0
						#bind s_envMap		s1
						#bind c_envColour	c0

						!!ARBfp1.0
						ATTRIB v0 = fragment.color.primary;
						ATTRIB T0 = fragment.texcoord[0];
						ATTRIB v1 = fragment.color.secondary;
						ATTRIB T1 = fragment.texcoord[1];
						TEMP r0, t0, t1;
						PARAM c[1] = { program.env[0] };
						TEX t0, T0, texture[0], 2D;
						TEX t1, T1, texture[1], CUBE;
						MUL r0.xyz, t0, v0;
						MOV r0.w, v0;
						MAD r0.xyz, t1, c[0], r0;
						ADD r0.xyz, r0, v1;
						MOV result.color, r0;
						END
					}}
				}
			}

			Layer=0
		}
	}
}


TextureStyle WaterStencil()
{
	Downgrade
	{
		WaterStencil()
	}
}


TextureStyle WaterTest( Bitmap _bitmap )
{
	Downgrade
	{
		WaterTest( _bitmap )
	}
}


TextureStyle WaypointHighlight()
:	flic StandardFlic
{
	Downgrade
	{
		WaypointHighlight( StandardFlic[GameTime] )
	}
}


TextureStyle ZFillAlpha()
:	flic StandardFlic
{
	Downgrade
	{
		ZFillAlphaShader( StandardFlic[GameTime] )
	}
}


